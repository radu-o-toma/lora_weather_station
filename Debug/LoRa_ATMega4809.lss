
LoRa_ATMega4809.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00802800  000034db  0000358f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000033da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000101  000073da  000033da  0000348e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000001ac  00802848  00802848  000035d7  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000035d7  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003634  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000006e8  00000000  00000000  00003678  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000661b  00000000  00000000  00003d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003656  00000000  00000000  0000a37b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000032bb  00000000  00000000  0000d9d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001794  00000000  00000000  00010c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002e04  00000000  00000000  00012420  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002f36  00000000  00000000  00015224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005b8  00000000  00000000  0001815a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
       4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_12>
      34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      3c:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__vector_15>
      40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      44:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__vector_17>
      48:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__vector_18>
      4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      54:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      58:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      68:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      6c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      70:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      74:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      78:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      7c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      80:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      84:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      88:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      8c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      90:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      94:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__vector_37>
      98:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__vector_38>
      9c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>

000000a0 <__ctors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf ef       	ldi	r28, 0xFF	; 255
      a6:	cd bf       	out	0x3d, r28	; 61
      a8:	df e3       	ldi	r29, 0x3F	; 63
      aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_copy_data>:
      ac:	18 e2       	ldi	r17, 0x28	; 40
      ae:	a0 e0       	ldi	r26, 0x00	; 0
      b0:	b8 e2       	ldi	r27, 0x28	; 40
      b2:	eb ed       	ldi	r30, 0xDB	; 219
      b4:	f4 e3       	ldi	r31, 0x34	; 52
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
      b8:	05 90       	lpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	a8 34       	cpi	r26, 0x48	; 72
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
      c2:	29 e2       	ldi	r18, 0x29	; 41
      c4:	a8 e4       	ldi	r26, 0x48	; 72
      c6:	b8 e2       	ldi	r27, 0x28	; 40
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a4 3f       	cpi	r26, 0xF4	; 244
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	0e 94 03 03 	call	0x606	; 0x606 <main>
      d6:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <_exit>

000000da <__bad_interrupt>:
      da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	cd b7       	in	r28, 0x3d	; 61
      e4:	de b7       	in	r29, 0x3e	; 62
	system_init();
      e6:	0e 94 16 0b 	call	0x162c	; 0x162c <system_init>
}
      ea:	00 00       	nop
      ec:	df 91       	pop	r29
      ee:	cf 91       	pop	r28
      f0:	08 95       	ret

000000f2 <__vector_12>:

#include <driver_init.h>
#include <compiler.h>

ISR(TCB0_INT_vect)
{
      f2:	1f 92       	push	r1
      f4:	0f 92       	push	r0
      f6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
      fa:	0f 92       	push	r0
      fc:	11 24       	eor	r1, r1
      fe:	2f 93       	push	r18
     100:	8f 93       	push	r24
     102:	9f 93       	push	r25
     104:	ef 93       	push	r30
     106:	ff 93       	push	r31
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62

	/**
	 * The interrupt flag is cleared by writing 1 to it, or when the Capture register
	 * is read in Capture mode
	 */
	TCB0.INTFLAGS = TCB_CAPT_bm;
     110:	80 e8       	ldi	r24, 0x80	; 128
     112:	9a e0       	ldi	r25, 0x0A	; 10
     114:	21 e0       	ldi	r18, 0x01	; 1
     116:	fc 01       	movw	r30, r24
     118:	26 83       	std	Z+6, r18	; 0x06
}
     11a:	00 00       	nop
     11c:	df 91       	pop	r29
     11e:	cf 91       	pop	r28
     120:	ff 91       	pop	r31
     122:	ef 91       	pop	r30
     124:	9f 91       	pop	r25
     126:	8f 91       	pop	r24
     128:	2f 91       	pop	r18
     12a:	0f 90       	pop	r0
     12c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     130:	0f 90       	pop	r0
     132:	1f 90       	pop	r1
     134:	18 95       	reti

00000136 <LORA_HANDLING_createCommand>:
extern bool has_entered_low_power_at_least_once;
extern volatile uint8_t LoRa2ResponseIndex;
extern volatile char LoRa2ResponseBuffer[];

void LORA_HANDLING_createCommand(const char* command, const char* value)
{
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	00 d0       	rcall	.+0      	; 0x13c <LORA_HANDLING_createCommand+0x6>
     13c:	00 d0       	rcall	.+0      	; 0x13e <LORA_HANDLING_createCommand+0x8>
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
     142:	89 83       	std	Y+1, r24	; 0x01
     144:	9a 83       	std	Y+2, r25	; 0x02
     146:	6b 83       	std	Y+3, r22	; 0x03
     148:	7c 83       	std	Y+4, r23	; 0x04
    snprintf(complete_command, sizeof complete_command, "%s %s", command, value);
     14a:	8c 81       	ldd	r24, Y+4	; 0x04
     14c:	8f 93       	push	r24
     14e:	8b 81       	ldd	r24, Y+3	; 0x03
     150:	8f 93       	push	r24
     152:	8a 81       	ldd	r24, Y+2	; 0x02
     154:	8f 93       	push	r24
     156:	89 81       	ldd	r24, Y+1	; 0x01
     158:	8f 93       	push	r24
     15a:	8a ed       	ldi	r24, 0xDA	; 218
     15c:	93 e7       	ldi	r25, 0x73	; 115
     15e:	89 2f       	mov	r24, r25
     160:	8f 93       	push	r24
     162:	8a ed       	ldi	r24, 0xDA	; 218
     164:	93 e7       	ldi	r25, 0x73	; 115
     166:	8f 93       	push	r24
     168:	1f 92       	push	r1
     16a:	84 e6       	ldi	r24, 0x64	; 100
     16c:	8f 93       	push	r24
     16e:	84 ef       	ldi	r24, 0xF4	; 244
     170:	98 e2       	ldi	r25, 0x28	; 40
     172:	89 2f       	mov	r24, r25
     174:	8f 93       	push	r24
     176:	84 ef       	ldi	r24, 0xF4	; 244
     178:	98 e2       	ldi	r25, 0x28	; 40
     17a:	8f 93       	push	r24
     17c:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <snprintf>
     180:	8d b7       	in	r24, 0x3d	; 61
     182:	9e b7       	in	r25, 0x3e	; 62
     184:	0a 96       	adiw	r24, 0x0a	; 10
     186:	cd bf       	out	0x3d, r28	; 61
     188:	de bf       	out	0x3e, r29	; 62
}
     18a:	00 00       	nop
     18c:	24 96       	adiw	r28, 0x04	; 4
     18e:	cd bf       	out	0x3d, r28	; 61
     190:	de bf       	out	0x3e, r29	; 62
     192:	df 91       	pop	r29
     194:	cf 91       	pop	r28
     196:	08 95       	ret

00000198 <sendKey>:

static void sendKey (const char* command, const char* key)
{
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	00 d0       	rcall	.+0      	; 0x19e <sendKey+0x6>
     19e:	00 d0       	rcall	.+0      	; 0x1a0 <sendKey+0x8>
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
     1a4:	89 83       	std	Y+1, r24	; 0x01
     1a6:	9a 83       	std	Y+2, r25	; 0x02
     1a8:	6b 83       	std	Y+3, r22	; 0x03
     1aa:	7c 83       	std	Y+4, r23	; 0x04
    LORA_HANDLING_createCommand(command, key);
     1ac:	2b 81       	ldd	r18, Y+3	; 0x03
     1ae:	3c 81       	ldd	r19, Y+4	; 0x04
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	9a 81       	ldd	r25, Y+2	; 0x02
     1b4:	b9 01       	movw	r22, r18
     1b6:	0e 94 9b 00 	call	0x136	; 0x136 <LORA_HANDLING_createCommand>
    rn2903_SendString(complete_command);
     1ba:	84 ef       	ldi	r24, 0xF4	; 244
     1bc:	98 e2       	ldi	r25, 0x28	; 40
     1be:	0e 94 99 0b 	call	0x1732	; 0x1732 <rn2903_SendString>
	printf("%s", complete_command);
     1c2:	84 ef       	ldi	r24, 0xF4	; 244
     1c4:	98 e2       	ldi	r25, 0x28	; 40
     1c6:	89 2f       	mov	r24, r25
     1c8:	8f 93       	push	r24
     1ca:	84 ef       	ldi	r24, 0xF4	; 244
     1cc:	98 e2       	ldi	r25, 0x28	; 40
     1ce:	8f 93       	push	r24
     1d0:	80 ee       	ldi	r24, 0xE0	; 224
     1d2:	93 e7       	ldi	r25, 0x73	; 115
     1d4:	89 2f       	mov	r24, r25
     1d6:	8f 93       	push	r24
     1d8:	80 ee       	ldi	r24, 0xE0	; 224
     1da:	93 e7       	ldi	r25, 0x73	; 115
     1dc:	8f 93       	push	r24
     1de:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <printf>
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
    handleResponse();
     1ea:	0e 94 00 01 	call	0x200	; 0x200 <handleResponse>
    LoRa2_ReadyReceiveBuffer();
     1ee:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LoRa2_ReadyReceiveBuffer>
}
     1f2:	00 00       	nop
     1f4:	24 96       	adiw	r28, 0x04	; 4
     1f6:	cd bf       	out	0x3d, r28	; 61
     1f8:	de bf       	out	0x3e, r29	; 62
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <handleResponse>:

static void handleResponse(void)
{
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
    do{
		;
	}while(LoRa2ResponseBuffer[LoRa2ResponseIndex - 1] != '\n');
     208:	80 91 7c 28 	lds	r24, 0x287C	; 0x80287c <LoRa2ResponseIndex>
     20c:	88 2f       	mov	r24, r24
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	01 97       	sbiw	r24, 0x01	; 1
     212:	83 58       	subi	r24, 0x83	; 131
     214:	97 4d       	sbci	r25, 0xD7	; 215
     216:	fc 01       	movw	r30, r24
     218:	80 81       	ld	r24, Z
     21a:	8a 30       	cpi	r24, 0x0A	; 10
     21c:	a9 f7       	brne	.-22     	; 0x208 <handleResponse+0x8>
	
    strncpy(response,LoRa2_GetResponse(),responseBufferSize);
     21e:	0e 94 0d 11 	call	0x221a	; 0x221a <LoRa2_GetResponse>
     222:	43 e2       	ldi	r20, 0x23	; 35
     224:	50 e0       	ldi	r21, 0x00	; 0
     226:	bc 01       	movw	r22, r24
     228:	8c ec       	ldi	r24, 0xCC	; 204
     22a:	98 e2       	ldi	r25, 0x28	; 40
     22c:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <strncpy>
    printf("%s", response);
     230:	8c ec       	ldi	r24, 0xCC	; 204
     232:	98 e2       	ldi	r25, 0x28	; 40
     234:	89 2f       	mov	r24, r25
     236:	8f 93       	push	r24
     238:	8c ec       	ldi	r24, 0xCC	; 204
     23a:	98 e2       	ldi	r25, 0x28	; 40
     23c:	8f 93       	push	r24
     23e:	80 ee       	ldi	r24, 0xE0	; 224
     240:	93 e7       	ldi	r25, 0x73	; 115
     242:	89 2f       	mov	r24, r25
     244:	8f 93       	push	r24
     246:	80 ee       	ldi	r24, 0xE0	; 224
     248:	93 e7       	ldi	r25, 0x73	; 115
     24a:	8f 93       	push	r24
     24c:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <printf>
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
     256:	0f 90       	pop	r0
}
     258:	00 00       	nop
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <loopUntilOk>:

static void loopUntilOk(const char* command_to_be_sent)
{
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	00 d0       	rcall	.+0      	; 0x266 <loopUntilOk+0x6>
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
     26a:	89 83       	std	Y+1, r24	; 0x01
     26c:	9a 83       	std	Y+2, r25	; 0x02
    do
    {
        LoRa2_ReadyReceiveBuffer();
     26e:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LoRa2_ReadyReceiveBuffer>
        
        rn2903_SendString(command_to_be_sent);
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	9a 81       	ldd	r25, Y+2	; 0x02
     276:	0e 94 99 0b 	call	0x1732	; 0x1732 <rn2903_SendString>
		printf("%s", command_to_be_sent);
     27a:	8a 81       	ldd	r24, Y+2	; 0x02
     27c:	8f 93       	push	r24
     27e:	89 81       	ldd	r24, Y+1	; 0x01
     280:	8f 93       	push	r24
     282:	80 ee       	ldi	r24, 0xE0	; 224
     284:	93 e7       	ldi	r25, 0x73	; 115
     286:	89 2f       	mov	r24, r25
     288:	8f 93       	push	r24
     28a:	80 ee       	ldi	r24, 0xE0	; 224
     28c:	93 e7       	ldi	r25, 0x73	; 115
     28e:	8f 93       	push	r24
     290:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <printf>
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0

        handleResponse();
     29c:	0e 94 00 01 	call	0x200	; 0x200 <handleResponse>
        
        if(strcmp(response, NO_FREE_CH) == EQUALS)
     2a0:	63 ee       	ldi	r22, 0xE3	; 227
     2a2:	73 e7       	ldi	r23, 0x73	; 115
     2a4:	8c ec       	ldi	r24, 0xCC	; 204
     2a6:	98 e2       	ldi	r25, 0x28	; 40
     2a8:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <strcmp>
     2ac:	89 2b       	or	r24, r25
     2ae:	21 f4       	brne	.+8      	; 0x2b8 <loopUntilOk+0x58>
        {
            LoRa2_blockingWait(LONG_DELAY);
     2b0:	88 ee       	ldi	r24, 0xE8	; 232
     2b2:	93 e0       	ldi	r25, 0x03	; 3
     2b4:	0e 94 16 11 	call	0x222c	; 0x222c <LoRa2_blockingWait>
        }
    }while(strcmp(response, OK) != EQUALS);
     2b8:	60 ef       	ldi	r22, 0xF0	; 240
     2ba:	73 e7       	ldi	r23, 0x73	; 115
     2bc:	8c ec       	ldi	r24, 0xCC	; 204
     2be:	98 e2       	ldi	r25, 0x28	; 40
     2c0:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <strcmp>
     2c4:	89 2b       	or	r24, r25
     2c6:	99 f6       	brne	.-90     	; 0x26e <loopUntilOk+0xe>
}
     2c8:	00 00       	nop
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	08 95       	ret

000002d4 <LORA_HANDLING_loraInit>:

void LORA_HANDLING_loraInit(void) // Call After System Init; Above while(1) Loop in Main.c
{
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
    
    LoRa2_RegisterISRCallback();
     2dc:	0e 94 e5 10 	call	0x21ca	; 0x21ca <LoRa2_RegisterISRCallback>
    LoRa2_blockingWait(SHORT_DELAY);
     2e0:	82 e0       	ldi	r24, 0x02	; 2
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 16 11 	call	0x222c	; 0x222c <LoRa2_blockingWait>
    
    rn2903_SetHardwareReset(false);
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	0e 94 8b 0b 	call	0x1716	; 0x1716 <rn2903_SetHardwareReset>
    LoRa2_blockingWait(SHORT_DELAY);
     2ee:	82 e0       	ldi	r24, 0x02	; 2
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 16 11 	call	0x222c	; 0x222c <LoRa2_blockingWait>
    rn2903_SetHardwareReset(true);
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	0e 94 8b 0b 	call	0x1716	; 0x1716 <rn2903_SetHardwareReset>
    LoRa2_blockingWait(MEDIUM_DELAY);
     2fc:	8f e0       	ldi	r24, 0x0F	; 15
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 16 11 	call	0x222c	; 0x222c <LoRa2_blockingWait>
    handleResponse();
     304:	0e 94 00 01 	call	0x200	; 0x200 <handleResponse>
    LoRa2_ReadyReceiveBuffer();
     308:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LoRa2_ReadyReceiveBuffer>
	
	snprintf(complete_command, sizeof complete_command, "%s %s", RN_cmd_mac_get, band);
     30c:	89 ea       	ldi	r24, 0xA9	; 169
     30e:	94 e7       	ldi	r25, 0x74	; 116
     310:	89 2f       	mov	r24, r25
     312:	8f 93       	push	r24
     314:	89 ea       	ldi	r24, 0xA9	; 169
     316:	94 e7       	ldi	r25, 0x74	; 116
     318:	8f 93       	push	r24
     31a:	81 ea       	ldi	r24, 0xA1	; 161
     31c:	94 e7       	ldi	r25, 0x74	; 116
     31e:	89 2f       	mov	r24, r25
     320:	8f 93       	push	r24
     322:	81 ea       	ldi	r24, 0xA1	; 161
     324:	94 e7       	ldi	r25, 0x74	; 116
     326:	8f 93       	push	r24
     328:	8a ed       	ldi	r24, 0xDA	; 218
     32a:	93 e7       	ldi	r25, 0x73	; 115
     32c:	89 2f       	mov	r24, r25
     32e:	8f 93       	push	r24
     330:	8a ed       	ldi	r24, 0xDA	; 218
     332:	93 e7       	ldi	r25, 0x73	; 115
     334:	8f 93       	push	r24
     336:	1f 92       	push	r1
     338:	84 e6       	ldi	r24, 0x64	; 100
     33a:	8f 93       	push	r24
     33c:	84 ef       	ldi	r24, 0xF4	; 244
     33e:	98 e2       	ldi	r25, 0x28	; 40
     340:	89 2f       	mov	r24, r25
     342:	8f 93       	push	r24
     344:	84 ef       	ldi	r24, 0xF4	; 244
     346:	98 e2       	ldi	r25, 0x28	; 40
     348:	8f 93       	push	r24
     34a:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <snprintf>
     34e:	8d b7       	in	r24, 0x3d	; 61
     350:	9e b7       	in	r25, 0x3e	; 62
     352:	0a 96       	adiw	r24, 0x0a	; 10
     354:	cd bf       	out	0x3d, r28	; 61
     356:	de bf       	out	0x3e, r29	; 62
	printf(complete_command);
     358:	84 ef       	ldi	r24, 0xF4	; 244
     35a:	98 e2       	ldi	r25, 0x28	; 40
     35c:	89 2f       	mov	r24, r25
     35e:	8f 93       	push	r24
     360:	84 ef       	ldi	r24, 0xF4	; 244
     362:	98 e2       	ldi	r25, 0x28	; 40
     364:	8f 93       	push	r24
     366:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <printf>
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
	rn2903_SendString(complete_command);
     36e:	84 ef       	ldi	r24, 0xF4	; 244
     370:	98 e2       	ldi	r25, 0x28	; 40
     372:	0e 94 99 0b 	call	0x1732	; 0x1732 <rn2903_SendString>
	LoRa2_blockingWait(SHORT_DELAY);
     376:	82 e0       	ldi	r24, 0x02	; 2
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 16 11 	call	0x222c	; 0x222c <LoRa2_blockingWait>
	handleResponse();
     37e:	0e 94 00 01 	call	0x200	; 0x200 <handleResponse>
	LoRa2_ReadyReceiveBuffer();
     382:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LoRa2_ReadyReceiveBuffer>
	handleResponse();
	LoRa2_ReadyReceiveBuffer();
	*/
	#ifdef OTAA

	sendKey(RN_cmd_deveui, my_deveui);
     386:	63 e2       	ldi	r22, 0x23	; 35
     388:	74 e7       	ldi	r23, 0x74	; 116
     38a:	86 e6       	ldi	r24, 0x66	; 102
     38c:	94 e7       	ldi	r25, 0x74	; 116
     38e:	0e 94 cc 00 	call	0x198	; 0x198 <sendKey>
	sendKey(RN_cmd_appeui, my_appeui);
     392:	64 e3       	ldi	r22, 0x34	; 52
     394:	74 e7       	ldi	r23, 0x74	; 116
     396:	85 e7       	ldi	r24, 0x75	; 117
     398:	94 e7       	ldi	r25, 0x74	; 116
     39a:	0e 94 cc 00 	call	0x198	; 0x198 <sendKey>
	sendKey(RN_cmd_appkey, my_appkey);
     39e:	65 e4       	ldi	r22, 0x45	; 69
     3a0:	74 e7       	ldi	r23, 0x74	; 116
     3a2:	84 e8       	ldi	r24, 0x84	; 132
     3a4:	94 e7       	ldi	r25, 0x74	; 116
     3a6:	0e 94 cc 00 	call	0x198	; 0x198 <sendKey>
	handleResponse();
	LoRa2_ReadyReceiveBuffer();
	*/
	

    rn2903_SendString(RN_cmd_mac_set_dr);
     3aa:	8e eb       	ldi	r24, 0xBE	; 190
     3ac:	94 e7       	ldi	r25, 0x74	; 116
     3ae:	0e 94 99 0b 	call	0x1732	; 0x1732 <rn2903_SendString>
	printf("%s\r\n", RN_cmd_mac_set_dr);
     3b2:	8e eb       	ldi	r24, 0xBE	; 190
     3b4:	94 e7       	ldi	r25, 0x74	; 116
     3b6:	89 2f       	mov	r24, r25
     3b8:	8f 93       	push	r24
     3ba:	8e eb       	ldi	r24, 0xBE	; 190
     3bc:	94 e7       	ldi	r25, 0x74	; 116
     3be:	8f 93       	push	r24
     3c0:	85 ef       	ldi	r24, 0xF5	; 245
     3c2:	93 e7       	ldi	r25, 0x73	; 115
     3c4:	89 2f       	mov	r24, r25
     3c6:	8f 93       	push	r24
     3c8:	85 ef       	ldi	r24, 0xF5	; 245
     3ca:	93 e7       	ldi	r25, 0x73	; 115
     3cc:	8f 93       	push	r24
     3ce:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <printf>
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
    LoRa2_blockingWait(SHORT_DELAY);
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 16 11 	call	0x222c	; 0x222c <LoRa2_blockingWait>
    handleResponse();
     3e2:	0e 94 00 01 	call	0x200	; 0x200 <handleResponse>
    LoRa2_ReadyReceiveBuffer();
     3e6:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LoRa2_ReadyReceiveBuffer>

    rn2903_SendString(RN_cmd_mac_save);
     3ea:	85 eb       	ldi	r24, 0xB5	; 181
     3ec:	94 e7       	ldi	r25, 0x74	; 116
     3ee:	0e 94 99 0b 	call	0x1732	; 0x1732 <rn2903_SendString>
	printf("%s", RN_cmd_mac_save);
     3f2:	85 eb       	ldi	r24, 0xB5	; 181
     3f4:	94 e7       	ldi	r25, 0x74	; 116
     3f6:	89 2f       	mov	r24, r25
     3f8:	8f 93       	push	r24
     3fa:	85 eb       	ldi	r24, 0xB5	; 181
     3fc:	94 e7       	ldi	r25, 0x74	; 116
     3fe:	8f 93       	push	r24
     400:	80 ee       	ldi	r24, 0xE0	; 224
     402:	93 e7       	ldi	r25, 0x73	; 115
     404:	89 2f       	mov	r24, r25
     406:	8f 93       	push	r24
     408:	80 ee       	ldi	r24, 0xE0	; 224
     40a:	93 e7       	ldi	r25, 0x73	; 115
     40c:	8f 93       	push	r24
     40e:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <printf>
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
    LoRa2_blockingWait(LONG_DELAY);
     41a:	88 ee       	ldi	r24, 0xE8	; 232
     41c:	93 e0       	ldi	r25, 0x03	; 3
     41e:	0e 94 16 11 	call	0x222c	; 0x222c <LoRa2_blockingWait>
    handleResponse();
     422:	0e 94 00 01 	call	0x200	; 0x200 <handleResponse>
    LoRa2_ReadyReceiveBuffer();
     426:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LoRa2_ReadyReceiveBuffer>

    do
    {  //rejoins until the message is "accepted" instead of "denied"
		
		snprintf(complete_command, sizeof complete_command, "%s %s", RN_cmd_mac_get, status);
     42a:	8e ea       	ldi	r24, 0xAE	; 174
     42c:	94 e7       	ldi	r25, 0x74	; 116
     42e:	89 2f       	mov	r24, r25
     430:	8f 93       	push	r24
     432:	8e ea       	ldi	r24, 0xAE	; 174
     434:	94 e7       	ldi	r25, 0x74	; 116
     436:	8f 93       	push	r24
     438:	81 ea       	ldi	r24, 0xA1	; 161
     43a:	94 e7       	ldi	r25, 0x74	; 116
     43c:	89 2f       	mov	r24, r25
     43e:	8f 93       	push	r24
     440:	81 ea       	ldi	r24, 0xA1	; 161
     442:	94 e7       	ldi	r25, 0x74	; 116
     444:	8f 93       	push	r24
     446:	8a ed       	ldi	r24, 0xDA	; 218
     448:	93 e7       	ldi	r25, 0x73	; 115
     44a:	89 2f       	mov	r24, r25
     44c:	8f 93       	push	r24
     44e:	8a ed       	ldi	r24, 0xDA	; 218
     450:	93 e7       	ldi	r25, 0x73	; 115
     452:	8f 93       	push	r24
     454:	1f 92       	push	r1
     456:	84 e6       	ldi	r24, 0x64	; 100
     458:	8f 93       	push	r24
     45a:	84 ef       	ldi	r24, 0xF4	; 244
     45c:	98 e2       	ldi	r25, 0x28	; 40
     45e:	89 2f       	mov	r24, r25
     460:	8f 93       	push	r24
     462:	84 ef       	ldi	r24, 0xF4	; 244
     464:	98 e2       	ldi	r25, 0x28	; 40
     466:	8f 93       	push	r24
     468:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <snprintf>
     46c:	8d b7       	in	r24, 0x3d	; 61
     46e:	9e b7       	in	r25, 0x3e	; 62
     470:	0a 96       	adiw	r24, 0x0a	; 10
     472:	cd bf       	out	0x3d, r28	; 61
     474:	de bf       	out	0x3e, r29	; 62
		printf(complete_command);
     476:	84 ef       	ldi	r24, 0xF4	; 244
     478:	98 e2       	ldi	r25, 0x28	; 40
     47a:	89 2f       	mov	r24, r25
     47c:	8f 93       	push	r24
     47e:	84 ef       	ldi	r24, 0xF4	; 244
     480:	98 e2       	ldi	r25, 0x28	; 40
     482:	8f 93       	push	r24
     484:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <printf>
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
		rn2903_SendString(complete_command);
     48c:	84 ef       	ldi	r24, 0xF4	; 244
     48e:	98 e2       	ldi	r25, 0x28	; 40
     490:	0e 94 99 0b 	call	0x1732	; 0x1732 <rn2903_SendString>
		LoRa2_blockingWait(SHORT_DELAY);
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 16 11 	call	0x222c	; 0x222c <LoRa2_blockingWait>
		handleResponse();
     49c:	0e 94 00 01 	call	0x200	; 0x200 <handleResponse>
		LoRa2_ReadyReceiveBuffer();
     4a0:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LoRa2_ReadyReceiveBuffer>
        
#ifdef OTAA
        
        loopUntilOk(RN_cmd_join_otaa);
     4a4:	83 e9       	ldi	r24, 0x93	; 147
     4a6:	94 e7       	ldi	r25, 0x74	; 116
     4a8:	0e 94 30 01 	call	0x260	; 0x260 <loopUntilOk>

        loopUntilOk(RN_cmd_join_abp);

#endif
 
        LoRa2_ReadyReceiveBuffer();
     4ac:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LoRa2_ReadyReceiveBuffer>
        handleResponse();
     4b0:	0e 94 00 01 	call	0x200	; 0x200 <handleResponse>

    }while(strcmp(response, ACCEPTED) != EQUALS);
     4b4:	6a ef       	ldi	r22, 0xFA	; 250
     4b6:	73 e7       	ldi	r23, 0x73	; 115
     4b8:	8c ec       	ldi	r24, 0xCC	; 204
     4ba:	98 e2       	ldi	r25, 0x28	; 40
     4bc:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <strcmp>
     4c0:	89 2b       	or	r24, r25
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4c4:	b2 cf       	rjmp	.-156    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	
	snprintf(complete_command, sizeof complete_command, "%s %s", RN_cmd_mac_get, status);
     4c6:	8e ea       	ldi	r24, 0xAE	; 174
     4c8:	94 e7       	ldi	r25, 0x74	; 116
     4ca:	89 2f       	mov	r24, r25
     4cc:	8f 93       	push	r24
     4ce:	8e ea       	ldi	r24, 0xAE	; 174
     4d0:	94 e7       	ldi	r25, 0x74	; 116
     4d2:	8f 93       	push	r24
     4d4:	81 ea       	ldi	r24, 0xA1	; 161
     4d6:	94 e7       	ldi	r25, 0x74	; 116
     4d8:	89 2f       	mov	r24, r25
     4da:	8f 93       	push	r24
     4dc:	81 ea       	ldi	r24, 0xA1	; 161
     4de:	94 e7       	ldi	r25, 0x74	; 116
     4e0:	8f 93       	push	r24
     4e2:	8a ed       	ldi	r24, 0xDA	; 218
     4e4:	93 e7       	ldi	r25, 0x73	; 115
     4e6:	89 2f       	mov	r24, r25
     4e8:	8f 93       	push	r24
     4ea:	8a ed       	ldi	r24, 0xDA	; 218
     4ec:	93 e7       	ldi	r25, 0x73	; 115
     4ee:	8f 93       	push	r24
     4f0:	1f 92       	push	r1
     4f2:	84 e6       	ldi	r24, 0x64	; 100
     4f4:	8f 93       	push	r24
     4f6:	84 ef       	ldi	r24, 0xF4	; 244
     4f8:	98 e2       	ldi	r25, 0x28	; 40
     4fa:	89 2f       	mov	r24, r25
     4fc:	8f 93       	push	r24
     4fe:	84 ef       	ldi	r24, 0xF4	; 244
     500:	98 e2       	ldi	r25, 0x28	; 40
     502:	8f 93       	push	r24
     504:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <snprintf>
     508:	8d b7       	in	r24, 0x3d	; 61
     50a:	9e b7       	in	r25, 0x3e	; 62
     50c:	0a 96       	adiw	r24, 0x0a	; 10
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	de bf       	out	0x3e, r29	; 62
	printf(complete_command);
     512:	84 ef       	ldi	r24, 0xF4	; 244
     514:	98 e2       	ldi	r25, 0x28	; 40
     516:	89 2f       	mov	r24, r25
     518:	8f 93       	push	r24
     51a:	84 ef       	ldi	r24, 0xF4	; 244
     51c:	98 e2       	ldi	r25, 0x28	; 40
     51e:	8f 93       	push	r24
     520:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <printf>
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
	rn2903_SendString(complete_command);
     528:	84 ef       	ldi	r24, 0xF4	; 244
     52a:	98 e2       	ldi	r25, 0x28	; 40
     52c:	0e 94 99 0b 	call	0x1732	; 0x1732 <rn2903_SendString>
	LoRa2_blockingWait(SHORT_DELAY);
     530:	82 e0       	ldi	r24, 0x02	; 2
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 16 11 	call	0x222c	; 0x222c <LoRa2_blockingWait>
	handleResponse();
     538:	0e 94 00 01 	call	0x200	; 0x200 <handleResponse>
	LoRa2_ReadyReceiveBuffer();
     53c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LoRa2_ReadyReceiveBuffer>

}
     540:	00 00       	nop
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <createTransmission>:

static void createTransmission(char* sensor_data)
{
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	00 d0       	rcall	.+0      	; 0x54e <createTransmission+0x6>
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	89 83       	std	Y+1, r24	; 0x01
     554:	9a 83       	std	Y+2, r25	; 0x02
    LORA_HANDLING_createCommand(RN_cmd_mac_tx, unconfirmed_transmission);
     556:	62 ed       	ldi	r22, 0xD2	; 210
     558:	74 e7       	ldi	r23, 0x74	; 116
     55a:	8b ec       	ldi	r24, 0xCB	; 203
     55c:	94 e7       	ldi	r25, 0x74	; 116
     55e:	0e 94 9b 00 	call	0x136	; 0x136 <LORA_HANDLING_createCommand>
    snprintf(transmission_command, sizeof transmission_command, "%s %s", complete_command, sensor_data);
     562:	8a 81       	ldd	r24, Y+2	; 0x02
     564:	8f 93       	push	r24
     566:	89 81       	ldd	r24, Y+1	; 0x01
     568:	8f 93       	push	r24
     56a:	84 ef       	ldi	r24, 0xF4	; 244
     56c:	98 e2       	ldi	r25, 0x28	; 40
     56e:	89 2f       	mov	r24, r25
     570:	8f 93       	push	r24
     572:	84 ef       	ldi	r24, 0xF4	; 244
     574:	98 e2       	ldi	r25, 0x28	; 40
     576:	8f 93       	push	r24
     578:	8a ed       	ldi	r24, 0xDA	; 218
     57a:	93 e7       	ldi	r25, 0x73	; 115
     57c:	89 2f       	mov	r24, r25
     57e:	8f 93       	push	r24
     580:	8a ed       	ldi	r24, 0xDA	; 218
     582:	93 e7       	ldi	r25, 0x73	; 115
     584:	8f 93       	push	r24
     586:	1f 92       	push	r1
     588:	84 e6       	ldi	r24, 0x64	; 100
     58a:	8f 93       	push	r24
     58c:	88 e5       	ldi	r24, 0x58	; 88
     58e:	99 e2       	ldi	r25, 0x29	; 41
     590:	89 2f       	mov	r24, r25
     592:	8f 93       	push	r24
     594:	88 e5       	ldi	r24, 0x58	; 88
     596:	99 e2       	ldi	r25, 0x29	; 41
     598:	8f 93       	push	r24
     59a:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <snprintf>
     59e:	8d b7       	in	r24, 0x3d	; 61
     5a0:	9e b7       	in	r25, 0x3e	; 62
     5a2:	0a 96       	adiw	r24, 0x0a	; 10
     5a4:	cd bf       	out	0x3d, r28	; 61
     5a6:	de bf       	out	0x3e, r29	; 62
}
     5a8:	00 00       	nop
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <LORA_HANDLING_transmit>:

void LORA_HANDLING_transmit(char* sensor_data)
{
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <LORA_HANDLING_transmit+0x6>
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	89 83       	std	Y+1, r24	; 0x01
     5c0:	9a 83       	std	Y+2, r25	; 0x02
    
    if(has_entered_low_power_at_least_once == true)
     5c2:	80 91 48 28 	lds	r24, 0x2848	; 0x802848 <__data_end>
     5c6:	88 23       	and	r24, r24
     5c8:	41 f0       	breq	.+16     	; 0x5da <LORA_HANDLING_transmit+0x26>
    {
        LoRa2_blockingWait(MEDIUM_DELAY);
     5ca:	8f e0       	ldi	r24, 0x0F	; 15
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 16 11 	call	0x222c	; 0x222c <LoRa2_blockingWait>
        //handleResponse();
        LoRa2_blockingWait(SHORT_DELAY);
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 16 11 	call	0x222c	; 0x222c <LoRa2_blockingWait>
		handleResponse();
		LoRa2_ReadyReceiveBuffer();
		*/
    }

    createTransmission(sensor_data);
     5da:	89 81       	ldd	r24, Y+1	; 0x01
     5dc:	9a 81       	ldd	r25, Y+2	; 0x02
     5de:	0e 94 a4 02 	call	0x548	; 0x548 <createTransmission>

    loopUntilOk(transmission_command);
     5e2:	88 e5       	ldi	r24, 0x58	; 88
     5e4:	99 e2       	ldi	r25, 0x29	; 41
     5e6:	0e 94 30 01 	call	0x260	; 0x260 <loopUntilOk>

    LoRa2_blockingWait(SHORT_DELAY);
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 16 11 	call	0x222c	; 0x222c <LoRa2_blockingWait>
    LoRa2_ReadyReceiveBuffer();
     5f2:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <LoRa2_ReadyReceiveBuffer>

    handleResponse();
     5f6:	0e 94 00 01 	call	0x200	; 0x200 <handleResponse>
	
     5fa:	00 00       	nop
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	08 95       	ret

00000606 <main>:

char* SENSORS_HANDLING_readSensors(void);


int main(void)
{
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	ea 97       	sbiw	r28, 0x3a	; 58
     610:	cd bf       	out	0x3d, r28	; 61
     612:	de bf       	out	0x3e, r29	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     614:	0e 94 6f 00 	call	0xde	; 0xde <atmel_start_init>
	
	sensor_data[0] = 0x41;
     618:	81 e4       	ldi	r24, 0x41	; 65
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	80 93 bc 29 	sts	0x29BC, r24	; 0x8029bc <sensor_data>
     620:	90 93 bd 29 	sts	0x29BD, r25	; 0x8029bd <sensor_data+0x1>
	sensor_data[1] = 0x30;
     624:	80 e3       	ldi	r24, 0x30	; 48
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	80 93 be 29 	sts	0x29BE, r24	; 0x8029be <sensor_data+0x2>
     62c:	90 93 bf 29 	sts	0x29BF, r25	; 0x8029bf <sensor_data+0x3>

    LORA_HANDLING_loraInit();
     630:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LORA_HANDLING_loraInit>
	
	command[0]=0xF3;
     634:	83 ef       	ldi	r24, 0xF3	; 243
     636:	80 93 da 29 	sts	0x29DA, r24	; 0x8029da <command>
	command[1]=0x2D;
     63a:	8d e2       	ldi	r24, 0x2D	; 45
     63c:	80 93 db 29 	sts	0x29DB, r24	; 0x8029db <command+0x1>
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	a8 ec       	ldi	r26, 0xC8	; 200
     646:	b2 e4       	ldi	r27, 0x42	; 66
     648:	8f 83       	std	Y+7, r24	; 0x07
     64a:	98 87       	std	Y+8, r25	; 0x08
     64c:	a9 87       	std	Y+9, r26	; 0x09
     64e:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e4       	ldi	r19, 0x40	; 64
     654:	4c e9       	ldi	r20, 0x9C	; 156
     656:	54 e4       	ldi	r21, 0x44	; 68
     658:	6f 81       	ldd	r22, Y+7	; 0x07
     65a:	78 85       	ldd	r23, Y+8	; 0x08
     65c:	89 85       	ldd	r24, Y+9	; 0x09
     65e:	9a 85       	ldd	r25, Y+10	; 0x0a
     660:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     664:	dc 01       	movw	r26, r24
     666:	cb 01       	movw	r24, r22
     668:	8f a3       	std	Y+39, r24	; 0x27
     66a:	98 a7       	std	Y+40, r25	; 0x28
     66c:	a9 a7       	std	Y+41, r26	; 0x29
     66e:	ba a7       	std	Y+42, r27	; 0x2a
	if (__tmp < 1.0)
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	40 e8       	ldi	r20, 0x80	; 128
     676:	5f e3       	ldi	r21, 0x3F	; 63
     678:	6f a1       	ldd	r22, Y+39	; 0x27
     67a:	78 a5       	ldd	r23, Y+40	; 0x28
     67c:	89 a5       	ldd	r24, Y+41	; 0x29
     67e:	9a a5       	ldd	r25, Y+42	; 0x2a
     680:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__cmpsf2>
     684:	88 23       	and	r24, r24
     686:	2c f4       	brge	.+10     	; 0x692 <main+0x8c>
		__ticks = 1;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	8b a7       	std	Y+43, r24	; 0x2b
     68e:	9c a7       	std	Y+44, r25	; 0x2c
     690:	3f c0       	rjmp	.+126    	; 0x710 <main+0x10a>
	else if (__tmp > 65535)
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	3f ef       	ldi	r19, 0xFF	; 255
     696:	4f e7       	ldi	r20, 0x7F	; 127
     698:	57 e4       	ldi	r21, 0x47	; 71
     69a:	6f a1       	ldd	r22, Y+39	; 0x27
     69c:	78 a5       	ldd	r23, Y+40	; 0x28
     69e:	89 a5       	ldd	r24, Y+41	; 0x29
     6a0:	9a a5       	ldd	r25, Y+42	; 0x2a
     6a2:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <__gesf2>
     6a6:	18 16       	cp	r1, r24
     6a8:	4c f5       	brge	.+82     	; 0x6fc <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	40 e2       	ldi	r20, 0x20	; 32
     6b0:	51 e4       	ldi	r21, 0x41	; 65
     6b2:	6f 81       	ldd	r22, Y+7	; 0x07
     6b4:	78 85       	ldd	r23, Y+8	; 0x08
     6b6:	89 85       	ldd	r24, Y+9	; 0x09
     6b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ba:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     6be:	dc 01       	movw	r26, r24
     6c0:	cb 01       	movw	r24, r22
     6c2:	bc 01       	movw	r22, r24
     6c4:	cd 01       	movw	r24, r26
     6c6:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
     6ca:	dc 01       	movw	r26, r24
     6cc:	cb 01       	movw	r24, r22
     6ce:	8b a7       	std	Y+43, r24	; 0x2b
     6d0:	9c a7       	std	Y+44, r25	; 0x2c
     6d2:	0f c0       	rjmp	.+30     	; 0x6f2 <main+0xec>
     6d4:	8d e7       	ldi	r24, 0x7D	; 125
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	8d a7       	std	Y+45, r24	; 0x2d
     6da:	9e a7       	std	Y+46, r25	; 0x2e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6dc:	8d a5       	ldd	r24, Y+45	; 0x2d
     6de:	9e a5       	ldd	r25, Y+46	; 0x2e
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	f1 f7       	brne	.-4      	; 0x6e0 <main+0xda>
     6e4:	8d a7       	std	Y+45, r24	; 0x2d
     6e6:	9e a7       	std	Y+46, r25	; 0x2e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6e8:	8b a5       	ldd	r24, Y+43	; 0x2b
     6ea:	9c a5       	ldd	r25, Y+44	; 0x2c
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	8b a7       	std	Y+43, r24	; 0x2b
     6f0:	9c a7       	std	Y+44, r25	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6f2:	8b a5       	ldd	r24, Y+43	; 0x2b
     6f4:	9c a5       	ldd	r25, Y+44	; 0x2c
     6f6:	89 2b       	or	r24, r25
     6f8:	69 f7       	brne	.-38     	; 0x6d4 <main+0xce>
     6fa:	14 c0       	rjmp	.+40     	; 0x724 <main+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6fc:	6f a1       	ldd	r22, Y+39	; 0x27
     6fe:	78 a5       	ldd	r23, Y+40	; 0x28
     700:	89 a5       	ldd	r24, Y+41	; 0x29
     702:	9a a5       	ldd	r25, Y+42	; 0x2a
     704:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
     708:	dc 01       	movw	r26, r24
     70a:	cb 01       	movw	r24, r22
     70c:	8b a7       	std	Y+43, r24	; 0x2b
     70e:	9c a7       	std	Y+44, r25	; 0x2c
     710:	8b a5       	ldd	r24, Y+43	; 0x2b
     712:	9c a5       	ldd	r25, Y+44	; 0x2c
     714:	8f a7       	std	Y+47, r24	; 0x2f
     716:	98 ab       	std	Y+48, r25	; 0x30
     718:	8f a5       	ldd	r24, Y+47	; 0x2f
     71a:	98 a9       	ldd	r25, Y+48	; 0x30
     71c:	01 97       	sbiw	r24, 0x01	; 1
     71e:	f1 f7       	brne	.-4      	; 0x71c <main+0x116>
     720:	8f a7       	std	Y+47, r24	; 0x2f
     722:	98 ab       	std	Y+48, r25	; 0x30
	
	_delay_ms(100); //  delay for SHT3x sensor
	
	I2C_MASTER_writeNBytes(SHT3X_ADDR, &command, COMMAND_LENGTH);
     724:	42 e0       	ldi	r20, 0x02	; 2
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	6a ed       	ldi	r22, 0xDA	; 218
     72a:	79 e2       	ldi	r23, 0x29	; 41
     72c:	84 e4       	ldi	r24, 0x44	; 68
     72e:	0e 94 63 10 	call	0x20c6	; 0x20c6 <I2C_MASTER_writeNBytes>
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	a0 e8       	ldi	r26, 0x80	; 128
     738:	bf e3       	ldi	r27, 0x3F	; 63
     73a:	8b 87       	std	Y+11, r24	; 0x0b
     73c:	9c 87       	std	Y+12, r25	; 0x0c
     73e:	ad 87       	std	Y+13, r26	; 0x0d
     740:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e4       	ldi	r19, 0x40	; 64
     746:	4c e9       	ldi	r20, 0x9C	; 156
     748:	54 e4       	ldi	r21, 0x44	; 68
     74a:	6b 85       	ldd	r22, Y+11	; 0x0b
     74c:	7c 85       	ldd	r23, Y+12	; 0x0c
     74e:	8d 85       	ldd	r24, Y+13	; 0x0d
     750:	9e 85       	ldd	r25, Y+14	; 0x0e
     752:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     756:	dc 01       	movw	r26, r24
     758:	cb 01       	movw	r24, r22
     75a:	8d 8f       	std	Y+29, r24	; 0x1d
     75c:	9e 8f       	std	Y+30, r25	; 0x1e
     75e:	af 8f       	std	Y+31, r26	; 0x1f
     760:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e8       	ldi	r20, 0x80	; 128
     768:	5f e3       	ldi	r21, 0x3F	; 63
     76a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     76c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     76e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     770:	98 a1       	ldd	r25, Y+32	; 0x20
     772:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__cmpsf2>
     776:	88 23       	and	r24, r24
     778:	2c f4       	brge	.+10     	; 0x784 <main+0x17e>
		__ticks = 1;
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	89 a3       	std	Y+33, r24	; 0x21
     780:	9a a3       	std	Y+34, r25	; 0x22
     782:	3f c0       	rjmp	.+126    	; 0x802 <main+0x1fc>
	else if (__tmp > 65535)
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	3f ef       	ldi	r19, 0xFF	; 255
     788:	4f e7       	ldi	r20, 0x7F	; 127
     78a:	57 e4       	ldi	r21, 0x47	; 71
     78c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     78e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     790:	8f 8d       	ldd	r24, Y+31	; 0x1f
     792:	98 a1       	ldd	r25, Y+32	; 0x20
     794:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <__gesf2>
     798:	18 16       	cp	r1, r24
     79a:	4c f5       	brge	.+82     	; 0x7ee <main+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	40 e2       	ldi	r20, 0x20	; 32
     7a2:	51 e4       	ldi	r21, 0x41	; 65
     7a4:	6b 85       	ldd	r22, Y+11	; 0x0b
     7a6:	7c 85       	ldd	r23, Y+12	; 0x0c
     7a8:	8d 85       	ldd	r24, Y+13	; 0x0d
     7aa:	9e 85       	ldd	r25, Y+14	; 0x0e
     7ac:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     7b0:	dc 01       	movw	r26, r24
     7b2:	cb 01       	movw	r24, r22
     7b4:	bc 01       	movw	r22, r24
     7b6:	cd 01       	movw	r24, r26
     7b8:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
     7bc:	dc 01       	movw	r26, r24
     7be:	cb 01       	movw	r24, r22
     7c0:	89 a3       	std	Y+33, r24	; 0x21
     7c2:	9a a3       	std	Y+34, r25	; 0x22
     7c4:	0f c0       	rjmp	.+30     	; 0x7e4 <main+0x1de>
     7c6:	8d e7       	ldi	r24, 0x7D	; 125
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	8b a3       	std	Y+35, r24	; 0x23
     7cc:	9c a3       	std	Y+36, r25	; 0x24
     7ce:	8b a1       	ldd	r24, Y+35	; 0x23
     7d0:	9c a1       	ldd	r25, Y+36	; 0x24
     7d2:	01 97       	sbiw	r24, 0x01	; 1
     7d4:	f1 f7       	brne	.-4      	; 0x7d2 <main+0x1cc>
     7d6:	8b a3       	std	Y+35, r24	; 0x23
     7d8:	9c a3       	std	Y+36, r25	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7da:	89 a1       	ldd	r24, Y+33	; 0x21
     7dc:	9a a1       	ldd	r25, Y+34	; 0x22
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	89 a3       	std	Y+33, r24	; 0x21
     7e2:	9a a3       	std	Y+34, r25	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7e4:	89 a1       	ldd	r24, Y+33	; 0x21
     7e6:	9a a1       	ldd	r25, Y+34	; 0x22
     7e8:	89 2b       	or	r24, r25
     7ea:	69 f7       	brne	.-38     	; 0x7c6 <main+0x1c0>
     7ec:	14 c0       	rjmp	.+40     	; 0x816 <main+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7ee:	6d 8d       	ldd	r22, Y+29	; 0x1d
     7f0:	7e 8d       	ldd	r23, Y+30	; 0x1e
     7f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7f4:	98 a1       	ldd	r25, Y+32	; 0x20
     7f6:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
     7fa:	dc 01       	movw	r26, r24
     7fc:	cb 01       	movw	r24, r22
     7fe:	89 a3       	std	Y+33, r24	; 0x21
     800:	9a a3       	std	Y+34, r25	; 0x22
     802:	89 a1       	ldd	r24, Y+33	; 0x21
     804:	9a a1       	ldd	r25, Y+34	; 0x22
     806:	8d a3       	std	Y+37, r24	; 0x25
     808:	9e a3       	std	Y+38, r25	; 0x26
     80a:	8d a1       	ldd	r24, Y+37	; 0x25
     80c:	9e a1       	ldd	r25, Y+38	; 0x26
     80e:	01 97       	sbiw	r24, 0x01	; 1
     810:	f1 f7       	brne	.-4      	; 0x80e <main+0x208>
     812:	8d a3       	std	Y+37, r24	; 0x25
     814:	9e a3       	std	Y+38, r25	; 0x26
	_delay_ms(1); //  delay for SHT3x sensor
	I2C_MASTER_readNBytes(SHT3X_ADDR, &reply,3);
     816:	43 e0       	ldi	r20, 0x03	; 3
     818:	50 e0       	ldi	r21, 0x00	; 0
     81a:	64 ee       	ldi	r22, 0xE4	; 228
     81c:	79 e2       	ldi	r23, 0x29	; 41
     81e:	84 e4       	ldi	r24, 0x44	; 68
     820:	0e 94 90 10 	call	0x2120	; 0x2120 <I2C_MASTER_readNBytes>
	
	command[0]=0x30;
     824:	80 e3       	ldi	r24, 0x30	; 48
     826:	80 93 da 29 	sts	0x29DA, r24	; 0x8029da <command>
	command[1]=0x41;
     82a:	81 e4       	ldi	r24, 0x41	; 65
     82c:	80 93 db 29 	sts	0x29DB, r24	; 0x8029db <command+0x1>
	
	I2C_MASTER_writeNBytes(SHT3X_ADDR, &command, COMMAND_LENGTH);
     830:	42 e0       	ldi	r20, 0x02	; 2
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	6a ed       	ldi	r22, 0xDA	; 218
     836:	79 e2       	ldi	r23, 0x29	; 41
     838:	84 e4       	ldi	r24, 0x44	; 68
     83a:	0e 94 63 10 	call	0x20c6	; 0x20c6 <I2C_MASTER_writeNBytes>
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	a0 e8       	ldi	r26, 0x80	; 128
     844:	bf e3       	ldi	r27, 0x3F	; 63
     846:	8f 87       	std	Y+15, r24	; 0x0f
     848:	98 8b       	std	Y+16, r25	; 0x10
     84a:	a9 8b       	std	Y+17, r26	; 0x11
     84c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e4       	ldi	r19, 0x40	; 64
     852:	4c e9       	ldi	r20, 0x9C	; 156
     854:	54 e4       	ldi	r21, 0x44	; 68
     856:	6f 85       	ldd	r22, Y+15	; 0x0f
     858:	78 89       	ldd	r23, Y+16	; 0x10
     85a:	89 89       	ldd	r24, Y+17	; 0x11
     85c:	9a 89       	ldd	r25, Y+18	; 0x12
     85e:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     862:	dc 01       	movw	r26, r24
     864:	cb 01       	movw	r24, r22
     866:	8b 8b       	std	Y+19, r24	; 0x13
     868:	9c 8b       	std	Y+20, r25	; 0x14
     86a:	ad 8b       	std	Y+21, r26	; 0x15
     86c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	40 e8       	ldi	r20, 0x80	; 128
     874:	5f e3       	ldi	r21, 0x3F	; 63
     876:	6b 89       	ldd	r22, Y+19	; 0x13
     878:	7c 89       	ldd	r23, Y+20	; 0x14
     87a:	8d 89       	ldd	r24, Y+21	; 0x15
     87c:	9e 89       	ldd	r25, Y+22	; 0x16
     87e:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__cmpsf2>
     882:	88 23       	and	r24, r24
     884:	2c f4       	brge	.+10     	; 0x890 <main+0x28a>
		__ticks = 1;
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	8f 8b       	std	Y+23, r24	; 0x17
     88c:	98 8f       	std	Y+24, r25	; 0x18
     88e:	3f c0       	rjmp	.+126    	; 0x90e <main+0x308>
	else if (__tmp > 65535)
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	3f ef       	ldi	r19, 0xFF	; 255
     894:	4f e7       	ldi	r20, 0x7F	; 127
     896:	57 e4       	ldi	r21, 0x47	; 71
     898:	6b 89       	ldd	r22, Y+19	; 0x13
     89a:	7c 89       	ldd	r23, Y+20	; 0x14
     89c:	8d 89       	ldd	r24, Y+21	; 0x15
     89e:	9e 89       	ldd	r25, Y+22	; 0x16
     8a0:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <__gesf2>
     8a4:	18 16       	cp	r1, r24
     8a6:	4c f5       	brge	.+82     	; 0x8fa <main+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	40 e2       	ldi	r20, 0x20	; 32
     8ae:	51 e4       	ldi	r21, 0x41	; 65
     8b0:	6f 85       	ldd	r22, Y+15	; 0x0f
     8b2:	78 89       	ldd	r23, Y+16	; 0x10
     8b4:	89 89       	ldd	r24, Y+17	; 0x11
     8b6:	9a 89       	ldd	r25, Y+18	; 0x12
     8b8:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
     8c0:	bc 01       	movw	r22, r24
     8c2:	cd 01       	movw	r24, r26
     8c4:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
     8c8:	dc 01       	movw	r26, r24
     8ca:	cb 01       	movw	r24, r22
     8cc:	8f 8b       	std	Y+23, r24	; 0x17
     8ce:	98 8f       	std	Y+24, r25	; 0x18
     8d0:	0f c0       	rjmp	.+30     	; 0x8f0 <main+0x2ea>
     8d2:	8d e7       	ldi	r24, 0x7D	; 125
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	89 8f       	std	Y+25, r24	; 0x19
     8d8:	9a 8f       	std	Y+26, r25	; 0x1a
     8da:	89 8d       	ldd	r24, Y+25	; 0x19
     8dc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <main+0x2d8>
     8e2:	89 8f       	std	Y+25, r24	; 0x19
     8e4:	9a 8f       	std	Y+26, r25	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e6:	8f 89       	ldd	r24, Y+23	; 0x17
     8e8:	98 8d       	ldd	r25, Y+24	; 0x18
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	8f 8b       	std	Y+23, r24	; 0x17
     8ee:	98 8f       	std	Y+24, r25	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8f0:	8f 89       	ldd	r24, Y+23	; 0x17
     8f2:	98 8d       	ldd	r25, Y+24	; 0x18
     8f4:	89 2b       	or	r24, r25
     8f6:	69 f7       	brne	.-38     	; 0x8d2 <main+0x2cc>
     8f8:	14 c0       	rjmp	.+40     	; 0x922 <main+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8fa:	6b 89       	ldd	r22, Y+19	; 0x13
     8fc:	7c 89       	ldd	r23, Y+20	; 0x14
     8fe:	8d 89       	ldd	r24, Y+21	; 0x15
     900:	9e 89       	ldd	r25, Y+22	; 0x16
     902:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
     906:	dc 01       	movw	r26, r24
     908:	cb 01       	movw	r24, r22
     90a:	8f 8b       	std	Y+23, r24	; 0x17
     90c:	98 8f       	std	Y+24, r25	; 0x18
     90e:	8f 89       	ldd	r24, Y+23	; 0x17
     910:	98 8d       	ldd	r25, Y+24	; 0x18
     912:	8b 8f       	std	Y+27, r24	; 0x1b
     914:	9c 8f       	std	Y+28, r25	; 0x1c
     916:	8b 8d       	ldd	r24, Y+27	; 0x1b
     918:	9c 8d       	ldd	r25, Y+28	; 0x1c
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	f1 f7       	brne	.-4      	; 0x91a <main+0x314>
     91e:	8b 8f       	std	Y+27, r24	; 0x1b
     920:	9c 8f       	std	Y+28, r25	; 0x1c
	_delay_ms(1); //  delay for SHT3x sensor
	I2C_MASTER_readNBytes(SHT3X_ADDR, &reply,3);
     922:	43 e0       	ldi	r20, 0x03	; 3
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	64 ee       	ldi	r22, 0xE4	; 228
     928:	79 e2       	ldi	r23, 0x29	; 41
     92a:	84 e4       	ldi	r24, 0x44	; 68
     92c:	0e 94 90 10 	call	0x2120	; 0x2120 <I2C_MASTER_readNBytes>
		//	sensor_data[1] = 0x41;
		//}
		

        //LOW_POWER_enterLowPower();
		for (uint16_t counter = 0; counter < 10; counter++)
     930:	19 82       	std	Y+1, r1	; 0x01
     932:	1a 82       	std	Y+2, r1	; 0x02
     934:	77 c0       	rjmp	.+238    	; 0xa24 <main+0x41e>
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	aa e7       	ldi	r26, 0x7A	; 122
     93c:	b4 e4       	ldi	r27, 0x44	; 68
     93e:	8b 83       	std	Y+3, r24	; 0x03
     940:	9c 83       	std	Y+4, r25	; 0x04
     942:	ad 83       	std	Y+5, r26	; 0x05
     944:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e4       	ldi	r19, 0x40	; 64
     94a:	4c e9       	ldi	r20, 0x9C	; 156
     94c:	54 e4       	ldi	r21, 0x44	; 68
     94e:	6b 81       	ldd	r22, Y+3	; 0x03
     950:	7c 81       	ldd	r23, Y+4	; 0x04
     952:	8d 81       	ldd	r24, Y+5	; 0x05
     954:	9e 81       	ldd	r25, Y+6	; 0x06
     956:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     95a:	dc 01       	movw	r26, r24
     95c:	cb 01       	movw	r24, r22
     95e:	89 ab       	std	Y+49, r24	; 0x31
     960:	9a ab       	std	Y+50, r25	; 0x32
     962:	ab ab       	std	Y+51, r26	; 0x33
     964:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	40 e8       	ldi	r20, 0x80	; 128
     96c:	5f e3       	ldi	r21, 0x3F	; 63
     96e:	69 a9       	ldd	r22, Y+49	; 0x31
     970:	7a a9       	ldd	r23, Y+50	; 0x32
     972:	8b a9       	ldd	r24, Y+51	; 0x33
     974:	9c a9       	ldd	r25, Y+52	; 0x34
     976:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__cmpsf2>
     97a:	88 23       	and	r24, r24
     97c:	2c f4       	brge	.+10     	; 0x988 <main+0x382>
		__ticks = 1;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	8d ab       	std	Y+53, r24	; 0x35
     984:	9e ab       	std	Y+54, r25	; 0x36
     986:	3f c0       	rjmp	.+126    	; 0xa06 <main+0x400>
	else if (__tmp > 65535)
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	3f ef       	ldi	r19, 0xFF	; 255
     98c:	4f e7       	ldi	r20, 0x7F	; 127
     98e:	57 e4       	ldi	r21, 0x47	; 71
     990:	69 a9       	ldd	r22, Y+49	; 0x31
     992:	7a a9       	ldd	r23, Y+50	; 0x32
     994:	8b a9       	ldd	r24, Y+51	; 0x33
     996:	9c a9       	ldd	r25, Y+52	; 0x34
     998:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <__gesf2>
     99c:	18 16       	cp	r1, r24
     99e:	4c f5       	brge	.+82     	; 0x9f2 <main+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 e2       	ldi	r20, 0x20	; 32
     9a6:	51 e4       	ldi	r21, 0x41	; 65
     9a8:	6b 81       	ldd	r22, Y+3	; 0x03
     9aa:	7c 81       	ldd	r23, Y+4	; 0x04
     9ac:	8d 81       	ldd	r24, Y+5	; 0x05
     9ae:	9e 81       	ldd	r25, Y+6	; 0x06
     9b0:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     9b4:	dc 01       	movw	r26, r24
     9b6:	cb 01       	movw	r24, r22
     9b8:	bc 01       	movw	r22, r24
     9ba:	cd 01       	movw	r24, r26
     9bc:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
     9c0:	dc 01       	movw	r26, r24
     9c2:	cb 01       	movw	r24, r22
     9c4:	8d ab       	std	Y+53, r24	; 0x35
     9c6:	9e ab       	std	Y+54, r25	; 0x36
     9c8:	0f c0       	rjmp	.+30     	; 0x9e8 <main+0x3e2>
     9ca:	8d e7       	ldi	r24, 0x7D	; 125
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	8f ab       	std	Y+55, r24	; 0x37
     9d0:	98 af       	std	Y+56, r25	; 0x38
     9d2:	8f a9       	ldd	r24, Y+55	; 0x37
     9d4:	98 ad       	ldd	r25, Y+56	; 0x38
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	f1 f7       	brne	.-4      	; 0x9d6 <main+0x3d0>
     9da:	8f ab       	std	Y+55, r24	; 0x37
     9dc:	98 af       	std	Y+56, r25	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9de:	8d a9       	ldd	r24, Y+53	; 0x35
     9e0:	9e a9       	ldd	r25, Y+54	; 0x36
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	8d ab       	std	Y+53, r24	; 0x35
     9e6:	9e ab       	std	Y+54, r25	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9e8:	8d a9       	ldd	r24, Y+53	; 0x35
     9ea:	9e a9       	ldd	r25, Y+54	; 0x36
     9ec:	89 2b       	or	r24, r25
     9ee:	69 f7       	brne	.-38     	; 0x9ca <main+0x3c4>
     9f0:	14 c0       	rjmp	.+40     	; 0xa1a <main+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9f2:	69 a9       	ldd	r22, Y+49	; 0x31
     9f4:	7a a9       	ldd	r23, Y+50	; 0x32
     9f6:	8b a9       	ldd	r24, Y+51	; 0x33
     9f8:	9c a9       	ldd	r25, Y+52	; 0x34
     9fa:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
     9fe:	dc 01       	movw	r26, r24
     a00:	cb 01       	movw	r24, r22
     a02:	8d ab       	std	Y+53, r24	; 0x35
     a04:	9e ab       	std	Y+54, r25	; 0x36
     a06:	8d a9       	ldd	r24, Y+53	; 0x35
     a08:	9e a9       	ldd	r25, Y+54	; 0x36
     a0a:	89 af       	std	Y+57, r24	; 0x39
     a0c:	9a af       	std	Y+58, r25	; 0x3a
     a0e:	89 ad       	ldd	r24, Y+57	; 0x39
     a10:	9a ad       	ldd	r25, Y+58	; 0x3a
     a12:	01 97       	sbiw	r24, 0x01	; 1
     a14:	f1 f7       	brne	.-4      	; 0xa12 <main+0x40c>
     a16:	89 af       	std	Y+57, r24	; 0x39
     a18:	9a af       	std	Y+58, r25	; 0x3a
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	9a 81       	ldd	r25, Y+2	; 0x02
     a1e:	01 96       	adiw	r24, 0x01	; 1
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	9a 83       	std	Y+2, r25	; 0x02
     a24:	89 81       	ldd	r24, Y+1	; 0x01
     a26:	9a 81       	ldd	r25, Y+2	; 0x02
     a28:	0a 97       	sbiw	r24, 0x0a	; 10
     a2a:	08 f4       	brcc	.+2      	; 0xa2e <main+0x428>
     a2c:	84 cf       	rjmp	.-248    	; 0x936 <main+0x330>
			_delay_ms(1000);
			
		
		
		sensor_data[0] = reply[0];
     a2e:	80 91 e4 29 	lds	r24, 0x29E4	; 0x8029e4 <reply>
     a32:	88 2f       	mov	r24, r24
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	80 93 bc 29 	sts	0x29BC, r24	; 0x8029bc <sensor_data>
     a3a:	90 93 bd 29 	sts	0x29BD, r25	; 0x8029bd <sensor_data+0x1>
		sensor_data[1] = reply[1];
     a3e:	80 91 e5 29 	lds	r24, 0x29E5	; 0x8029e5 <reply+0x1>
     a42:	88 2f       	mov	r24, r24
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	80 93 be 29 	sts	0x29BE, r24	; 0x8029be <sensor_data+0x2>
     a4a:	90 93 bf 29 	sts	0x29BF, r25	; 0x8029bf <sensor_data+0x3>
		sensor_data[2] = reply[3];
     a4e:	80 91 e7 29 	lds	r24, 0x29E7	; 0x8029e7 <reply+0x3>
     a52:	88 2f       	mov	r24, r24
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	80 93 c0 29 	sts	0x29C0, r24	; 0x8029c0 <sensor_data+0x4>
     a5a:	90 93 c1 29 	sts	0x29C1, r25	; 0x8029c1 <sensor_data+0x5>
		sensor_data[3] = reply[4];
     a5e:	80 91 e8 29 	lds	r24, 0x29E8	; 0x8029e8 <reply+0x4>
     a62:	88 2f       	mov	r24, r24
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	80 93 c2 29 	sts	0x29C2, r24	; 0x8029c2 <sensor_data+0x6>
     a6a:	90 93 c3 29 	sts	0x29C3, r25	; 0x8029c3 <sensor_data+0x7>
		
		strcpy(sensor_data, SENSORS_HANDLING_readSensors());
     a6e:	0e 94 43 05 	call	0xa86	; 0xa86 <SENSORS_HANDLING_readSensors>
     a72:	bc 01       	movw	r22, r24
     a74:	8c eb       	ldi	r24, 0xBC	; 188
     a76:	99 e2       	ldi	r25, 0x29	; 41
     a78:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <strcpy>
		LORA_HANDLING_transmit(sensor_data);
     a7c:	8c eb       	ldi	r24, 0xBC	; 188
     a7e:	99 e2       	ldi	r25, 0x29	; 41
     a80:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LORA_HANDLING_transmit>

    }
     a84:	55 cf       	rjmp	.-342    	; 0x930 <main+0x32a>

00000a86 <SENSORS_HANDLING_readSensors>:

    return 0;
}

char* SENSORS_HANDLING_readSensors(void)
{
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	60 97       	sbiw	r28, 0x10	; 16
     a90:	cd bf       	out	0x3d, r28	; 61
     a92:	de bf       	out	0x3e, r29	; 62
    uint16_t humidity_reading;
    static char transmission_command[15];
	
	//command[0]=0x24;	// no clock stretching
	//command[1]=0x16;	// low repeatability
	command[0]=0x2C;	// clock stretching
     a94:	8c e2       	ldi	r24, 0x2C	; 44
     a96:	8d 83       	std	Y+5, r24	; 0x05
	command[1]=0x06;	// low repeatability
     a98:	86 e0       	ldi	r24, 0x06	; 6
     a9a:	8e 83       	std	Y+6, r24	; 0x06
		
		
	I2C_MASTER_writeNBytes(SHT3X_ADDR, &command, COMMAND_LENGTH);
     a9c:	ce 01       	movw	r24, r28
     a9e:	05 96       	adiw	r24, 0x05	; 5
     aa0:	42 e0       	ldi	r20, 0x02	; 2
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	bc 01       	movw	r22, r24
     aa6:	84 e4       	ldi	r24, 0x44	; 68
     aa8:	0e 94 63 10 	call	0x20c6	; 0x20c6 <I2C_MASTER_writeNBytes>
	//_delay_ms(5); //  delay for SHT3x sensor
	I2C_MASTER_readNBytes(SHT3X_ADDR, &reply,6);
     aac:	ce 01       	movw	r24, r28
     aae:	07 96       	adiw	r24, 0x07	; 7
     ab0:	46 e0       	ldi	r20, 0x06	; 6
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	bc 01       	movw	r22, r24
     ab6:	84 e4       	ldi	r24, 0x44	; 68
     ab8:	0e 94 90 10 	call	0x2120	; 0x2120 <I2C_MASTER_readNBytes>
		
	temperature_reading = (reply[0] << 8) + reply[1];
     abc:	8f 81       	ldd	r24, Y+7	; 0x07
     abe:	88 2f       	mov	r24, r24
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	38 2f       	mov	r19, r24
     ac4:	22 27       	eor	r18, r18
     ac6:	88 85       	ldd	r24, Y+8	; 0x08
     ac8:	88 2f       	mov	r24, r24
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	82 0f       	add	r24, r18
     ace:	93 1f       	adc	r25, r19
     ad0:	89 83       	std	Y+1, r24	; 0x01
     ad2:	9a 83       	std	Y+2, r25	; 0x02
	humidity_reading = (reply[3] << 8) + reply[4];
     ad4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ad6:	88 2f       	mov	r24, r24
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	38 2f       	mov	r19, r24
     adc:	22 27       	eor	r18, r18
     ade:	8b 85       	ldd	r24, Y+11	; 0x0b
     ae0:	88 2f       	mov	r24, r24
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	82 0f       	add	r24, r18
     ae6:	93 1f       	adc	r25, r19
     ae8:	8b 83       	std	Y+3, r24	; 0x03
     aea:	9c 83       	std	Y+4, r25	; 0x04
		
	temperature = ((175.0 * temperature_reading)/(float)(65535.0)) - 45.0;
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	9a 81       	ldd	r25, Y+2	; 0x02
     af0:	cc 01       	movw	r24, r24
     af2:	a0 e0       	ldi	r26, 0x00	; 0
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	bc 01       	movw	r22, r24
     af8:	cd 01       	movw	r24, r26
     afa:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__floatunsisf>
     afe:	dc 01       	movw	r26, r24
     b00:	cb 01       	movw	r24, r22
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	4f e2       	ldi	r20, 0x2F	; 47
     b08:	53 e4       	ldi	r21, 0x43	; 67
     b0a:	bc 01       	movw	r22, r24
     b0c:	cd 01       	movw	r24, r26
     b0e:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     b12:	dc 01       	movw	r26, r24
     b14:	cb 01       	movw	r24, r22
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	3f ef       	ldi	r19, 0xFF	; 255
     b1a:	4f e7       	ldi	r20, 0x7F	; 127
     b1c:	57 e4       	ldi	r21, 0x47	; 71
     b1e:	bc 01       	movw	r22, r24
     b20:	cd 01       	movw	r24, r26
     b22:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__divsf3>
     b26:	dc 01       	movw	r26, r24
     b28:	cb 01       	movw	r24, r22
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	44 e3       	ldi	r20, 0x34	; 52
     b30:	52 e4       	ldi	r21, 0x42	; 66
     b32:	bc 01       	movw	r22, r24
     b34:	cd 01       	movw	r24, r26
     b36:	0e 94 8d 14 	call	0x291a	; 0x291a <__subsf3>
     b3a:	dc 01       	movw	r26, r24
     b3c:	cb 01       	movw	r24, r22
     b3e:	80 93 dc 29 	sts	0x29DC, r24	; 0x8029dc <temperature>
     b42:	90 93 dd 29 	sts	0x29DD, r25	; 0x8029dd <temperature+0x1>
     b46:	a0 93 de 29 	sts	0x29DE, r26	; 0x8029de <temperature+0x2>
     b4a:	b0 93 df 29 	sts	0x29DF, r27	; 0x8029df <temperature+0x3>
	humidity = (100.0 * humidity_reading)/65535.0;
     b4e:	8b 81       	ldd	r24, Y+3	; 0x03
     b50:	9c 81       	ldd	r25, Y+4	; 0x04
     b52:	cc 01       	movw	r24, r24
     b54:	a0 e0       	ldi	r26, 0x00	; 0
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	bc 01       	movw	r22, r24
     b5a:	cd 01       	movw	r24, r26
     b5c:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__floatunsisf>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	48 ec       	ldi	r20, 0xC8	; 200
     b6a:	52 e4       	ldi	r21, 0x42	; 66
     b6c:	bc 01       	movw	r22, r24
     b6e:	cd 01       	movw	r24, r26
     b70:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
     b74:	dc 01       	movw	r26, r24
     b76:	cb 01       	movw	r24, r22
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	3f ef       	ldi	r19, 0xFF	; 255
     b7c:	4f e7       	ldi	r20, 0x7F	; 127
     b7e:	57 e4       	ldi	r21, 0x47	; 71
     b80:	bc 01       	movw	r22, r24
     b82:	cd 01       	movw	r24, r26
     b84:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__divsf3>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	80 93 e0 29 	sts	0x29E0, r24	; 0x8029e0 <humidity>
     b90:	90 93 e1 29 	sts	0x29E1, r25	; 0x8029e1 <humidity+0x1>
     b94:	a0 93 e2 29 	sts	0x29E2, r26	; 0x8029e2 <humidity+0x2>
     b98:	b0 93 e3 29 	sts	0x29E3, r27	; 0x8029e3 <humidity+0x3>
		
	printf("T: %.2f degC, RH: %.2f\r\n", temperature, humidity);
     b9c:	20 91 e0 29 	lds	r18, 0x29E0	; 0x8029e0 <humidity>
     ba0:	30 91 e1 29 	lds	r19, 0x29E1	; 0x8029e1 <humidity+0x1>
     ba4:	40 91 e2 29 	lds	r20, 0x29E2	; 0x8029e2 <humidity+0x2>
     ba8:	50 91 e3 29 	lds	r21, 0x29E3	; 0x8029e3 <humidity+0x3>
     bac:	80 91 dc 29 	lds	r24, 0x29DC	; 0x8029dc <temperature>
     bb0:	90 91 dd 29 	lds	r25, 0x29DD	; 0x8029dd <temperature+0x1>
     bb4:	a0 91 de 29 	lds	r26, 0x29DE	; 0x8029de <temperature+0x2>
     bb8:	b0 91 df 29 	lds	r27, 0x29DF	; 0x8029df <temperature+0x3>
     bbc:	65 2f       	mov	r22, r21
     bbe:	6f 93       	push	r22
     bc0:	64 2f       	mov	r22, r20
     bc2:	6f 93       	push	r22
     bc4:	63 2f       	mov	r22, r19
     bc6:	6f 93       	push	r22
     bc8:	2f 93       	push	r18
     bca:	2b 2f       	mov	r18, r27
     bcc:	2f 93       	push	r18
     bce:	2a 2f       	mov	r18, r26
     bd0:	2f 93       	push	r18
     bd2:	29 2f       	mov	r18, r25
     bd4:	2f 93       	push	r18
     bd6:	8f 93       	push	r24
     bd8:	85 e0       	ldi	r24, 0x05	; 5
     bda:	94 e7       	ldi	r25, 0x74	; 116
     bdc:	89 2f       	mov	r24, r25
     bde:	8f 93       	push	r24
     be0:	85 e0       	ldi	r24, 0x05	; 5
     be2:	94 e7       	ldi	r25, 0x74	; 116
     be4:	8f 93       	push	r24
     be6:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <printf>
     bea:	8d b7       	in	r24, 0x3d	; 61
     bec:	9e b7       	in	r25, 0x3e	; 62
     bee:	0a 96       	adiw	r24, 0x0a	; 10
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	de bf       	out	0x3e, r29	; 62
	
	snprintf(transmission_command, sizeof transmission_command, "%x%x", temperature_reading, humidity_reading);
     bf4:	8c 81       	ldd	r24, Y+4	; 0x04
     bf6:	8f 93       	push	r24
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	8f 93       	push	r24
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	8f 93       	push	r24
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	8f 93       	push	r24
     c04:	8e e1       	ldi	r24, 0x1E	; 30
     c06:	94 e7       	ldi	r25, 0x74	; 116
     c08:	89 2f       	mov	r24, r25
     c0a:	8f 93       	push	r24
     c0c:	8e e1       	ldi	r24, 0x1E	; 30
     c0e:	94 e7       	ldi	r25, 0x74	; 116
     c10:	8f 93       	push	r24
     c12:	1f 92       	push	r1
     c14:	8f e0       	ldi	r24, 0x0F	; 15
     c16:	8f 93       	push	r24
     c18:	89 e4       	ldi	r24, 0x49	; 73
     c1a:	98 e2       	ldi	r25, 0x28	; 40
     c1c:	89 2f       	mov	r24, r25
     c1e:	8f 93       	push	r24
     c20:	89 e4       	ldi	r24, 0x49	; 73
     c22:	98 e2       	ldi	r25, 0x28	; 40
     c24:	8f 93       	push	r24
     c26:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <snprintf>
     c2a:	8d b7       	in	r24, 0x3d	; 61
     c2c:	9e b7       	in	r25, 0x3e	; 62
     c2e:	0a 96       	adiw	r24, 0x0a	; 10
     c30:	cd bf       	out	0x3d, r28	; 61
     c32:	de bf       	out	0x3e, r29	; 62
    
    return transmission_command;
     c34:	89 e4       	ldi	r24, 0x49	; 73
     c36:	98 e2       	ldi	r25, 0x28	; 40
}
     c38:	60 96       	adiw	r28, 0x10	; 16
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	08 95       	ret

00000c44 <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
     c4c:	80 e0       	ldi	r24, 0x00	; 0
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	00 d0       	rcall	.+0      	; 0xc5a <ccp_write_io+0x6>
     c5a:	1f 92       	push	r1
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	89 83       	std	Y+1, r24	; 0x01
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	9a 81       	ldd	r25, Y+2	; 0x02
     c6a:	4b 81       	ldd	r20, Y+3	; 0x03
     c6c:	68 ed       	ldi	r22, 0xD8	; 216
     c6e:	0e 94 a8 11 	call	0x2350	; 0x2350 <protected_write_io>
}
     c72:	00 00       	nop
     c74:	23 96       	adiw	r28, 0x03	; 3
     c76:	cd bf       	out	0x3d, r28	; 61
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	08 95       	ret

00000c80 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62

	ccp_write_io((void *)&(CLKCTRL.OSC32KCTRLA), 1 << CLKCTRL_RUNSTDBY_bp /* Run standby: enabled */);
     c88:	62 e0       	ldi	r22, 0x02	; 2
     c8a:	88 e7       	ldi	r24, 0x78	; 120
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 2a 06 	call	0xc54	; 0xc54 <ccp_write_io>
	//		 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */
	//		 | 0 << CLKCTRL_SEL_bp /* Select: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.OSC20MCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLB),
     c92:	63 e0       	ldi	r22, 0x03	; 3
     c94:	81 e6       	ldi	r24, 0x61	; 97
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 2a 06 	call	0xc54	; 0xc54 <ccp_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
     c9c:	80 e0       	ldi	r24, 0x00	; 0
}
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	08 95       	ret

00000ca4 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     cac:	78 94       	sei

	return 0;
     cae:	80 e0       	ldi	r24, 0x00	; 0
}
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	08 95       	ret

00000cb6 <PORTA_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	00 d0       	rcall	.+0      	; 0xcbc <PORTA_set_pin_pull_mode+0x6>
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <PORTA_set_pin_pull_mode+0x8>
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
     cc2:	8b 83       	std	Y+3, r24	; 0x03
     cc4:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	88 2f       	mov	r24, r24
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	80 5f       	subi	r24, 0xF0	; 240
     cce:	9b 4f       	sbci	r25, 0xFB	; 251
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
     cd4:	8c 81       	ldd	r24, Y+4	; 0x04
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	59 f4       	brne	.+22     	; 0xcf0 <PORTA_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	9a 81       	ldd	r25, Y+2	; 0x02
     cde:	fc 01       	movw	r30, r24
     ce0:	80 81       	ld	r24, Z
     ce2:	28 2f       	mov	r18, r24
     ce4:	28 60       	ori	r18, 0x08	; 8
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	9a 81       	ldd	r25, Y+2	; 0x02
     cea:	fc 01       	movw	r30, r24
     cec:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
     cee:	0d c0       	rjmp	.+26     	; 0xd0a <PORTA_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
     cf0:	8c 81       	ldd	r24, Y+4	; 0x04
     cf2:	88 23       	and	r24, r24
     cf4:	51 f4       	brne	.+20     	; 0xd0a <PORTA_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	fc 01       	movw	r30, r24
     cfc:	80 81       	ld	r24, Z
     cfe:	28 2f       	mov	r18, r24
     d00:	27 7f       	andi	r18, 0xF7	; 247
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	9a 81       	ldd	r25, Y+2	; 0x02
     d06:	fc 01       	movw	r30, r24
     d08:	20 83       	st	Z, r18
	}
}
     d0a:	00 00       	nop
     d0c:	24 96       	adiw	r28, 0x04	; 4
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	08 95       	ret

00000d18 <PORTA_pin_set_inverted>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] inverted  Pin inverted mode
 */
static inline void PORTA_pin_set_inverted(const uint8_t pin, const bool inverted)
{
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <PORTA_pin_set_inverted+0x6>
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <PORTA_pin_set_inverted+0x8>
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	8b 83       	std	Y+3, r24	; 0x03
     d26:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	88 2f       	mov	r24, r24
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	80 5f       	subi	r24, 0xF0	; 240
     d30:	9b 4f       	sbci	r25, 0xFB	; 251
     d32:	89 83       	std	Y+1, r24	; 0x01
     d34:	9a 83       	std	Y+2, r25	; 0x02

	if (inverted) {
     d36:	8c 81       	ldd	r24, Y+4	; 0x04
     d38:	88 23       	and	r24, r24
     d3a:	59 f0       	breq	.+22     	; 0xd52 <PORTA_pin_set_inverted+0x3a>
		*port_pin_ctrl |= PORT_INVEN_bm;
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	fc 01       	movw	r30, r24
     d42:	80 81       	ld	r24, Z
     d44:	28 2f       	mov	r18, r24
     d46:	20 68       	ori	r18, 0x80	; 128
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	fc 01       	movw	r30, r24
     d4e:	20 83       	st	Z, r18
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
	}
}
     d50:	0a c0       	rjmp	.+20     	; 0xd66 <PORTA_pin_set_inverted+0x4e>
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	fc 01       	movw	r30, r24
     d58:	80 81       	ld	r24, Z
     d5a:	28 2f       	mov	r18, r24
     d5c:	2f 77       	andi	r18, 0x7F	; 127
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	9a 81       	ldd	r25, Y+2	; 0x02
     d62:	fc 01       	movw	r30, r24
     d64:	20 83       	st	Z, r18
	}
}
     d66:	00 00       	nop
     d68:	24 96       	adiw	r28, 0x04	; 4
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	08 95       	ret

00000d74 <PORTA_pin_set_isc>:
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 *
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	00 d0       	rcall	.+0      	; 0xd7a <PORTA_pin_set_isc+0x6>
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <PORTA_pin_set_isc+0x8>
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	8b 83       	std	Y+3, r24	; 0x03
     d82:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	88 2f       	mov	r24, r24
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	80 5f       	subi	r24, 0xF0	; 240
     d8c:	9b 4f       	sbci	r25, 0xFB	; 251
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	9a 83       	std	Y+2, r25	; 0x02

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	fc 01       	movw	r30, r24
     d98:	80 81       	ld	r24, Z
     d9a:	98 2f       	mov	r25, r24
     d9c:	98 7f       	andi	r25, 0xF8	; 248
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	89 2b       	or	r24, r25
     da2:	28 2f       	mov	r18, r24
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	fc 01       	movw	r30, r24
     daa:	20 83       	st	Z, r18
}
     dac:	00 00       	nop
     dae:	24 96       	adiw	r28, 0x04	; 4
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	08 95       	ret

00000dba <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <PORTA_set_pin_dir+0x6>
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	88 2f       	mov	r24, r24
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	91 05       	cpc	r25, r1
     dd2:	e1 f0       	breq	.+56     	; 0xe0c <PORTA_set_pin_dir+0x52>
     dd4:	82 30       	cpi	r24, 0x02	; 2
     dd6:	91 05       	cpc	r25, r1
     dd8:	71 f1       	breq	.+92     	; 0xe36 <PORTA_set_pin_dir+0x7c>
     dda:	89 2b       	or	r24, r25
     ddc:	09 f0       	breq	.+2      	; 0xde0 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
     dde:	3b c0       	rjmp	.+118    	; 0xe56 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	fc 01       	movw	r30, r24
     dea:	80 81       	ld	r24, Z
     dec:	68 2f       	mov	r22, r24
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	48 2f       	mov	r20, r24
     df2:	50 e0       	ldi	r21, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <PORTA_set_pin_dir+0x44>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	4a 95       	dec	r20
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <PORTA_set_pin_dir+0x40>
     e02:	80 95       	com	r24
     e04:	86 23       	and	r24, r22
     e06:	f9 01       	movw	r30, r18
     e08:	80 83       	st	Z, r24
		break;
     e0a:	25 c0       	rjmp	.+74     	; 0xe56 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	fc 01       	movw	r30, r24
     e16:	80 81       	ld	r24, Z
     e18:	68 2f       	mov	r22, r24
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	48 2f       	mov	r20, r24
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <PORTA_set_pin_dir+0x70>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	4a 95       	dec	r20
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <PORTA_set_pin_dir+0x6c>
     e2e:	86 2b       	or	r24, r22
     e30:	f9 01       	movw	r30, r18
     e32:	80 83       	st	Z, r24
		break;
     e34:	10 c0       	rjmp	.+32     	; 0xe56 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	80 5f       	subi	r24, 0xF0	; 240
     e3e:	9b 4f       	sbci	r25, 0xFB	; 251
     e40:	29 81       	ldd	r18, Y+1	; 0x01
     e42:	22 2f       	mov	r18, r18
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	20 5f       	subi	r18, 0xF0	; 240
     e48:	3b 4f       	sbci	r19, 0xFB	; 251
     e4a:	f9 01       	movw	r30, r18
     e4c:	20 81       	ld	r18, Z
     e4e:	28 60       	ori	r18, 0x08	; 8
     e50:	fc 01       	movw	r30, r24
     e52:	20 83       	st	Z, r18
		break;
     e54:	00 00       	nop
	default:
		break;
	}
}
     e56:	00 00       	nop
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	00 d0       	rcall	.+0      	; 0xe68 <PORTA_set_pin_level+0x6>
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	88 23       	and	r24, r24
     e74:	a9 f0       	breq	.+42     	; 0xea0 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	fc 01       	movw	r30, r24
     e80:	81 81       	ldd	r24, Z+1	; 0x01
     e82:	68 2f       	mov	r22, r24
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	48 2f       	mov	r20, r24
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <PORTA_set_pin_level+0x32>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	4a 95       	dec	r20
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <PORTA_set_pin_level+0x2e>
     e98:	86 2b       	or	r24, r22
     e9a:	f9 01       	movw	r30, r18
     e9c:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
     e9e:	15 c0       	rjmp	.+42     	; 0xeca <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	fc 01       	movw	r30, r24
     eaa:	81 81       	ldd	r24, Z+1	; 0x01
     eac:	68 2f       	mov	r22, r24
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	48 2f       	mov	r20, r24
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <PORTA_set_pin_level+0x5c>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	4a 95       	dec	r20
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <PORTA_set_pin_level+0x58>
     ec2:	80 95       	com	r24
     ec4:	86 23       	and	r24, r22
     ec6:	f9 01       	movw	r30, r18
     ec8:	81 83       	std	Z+1, r24	; 0x01
	}
}
     eca:	00 00       	nop
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	08 95       	ret

00000ed6 <PORTB_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	00 d0       	rcall	.+0      	; 0xedc <PORTB_set_pin_pull_mode+0x6>
     edc:	00 d0       	rcall	.+0      	; 0xede <PORTB_set_pin_pull_mode+0x8>
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	8b 83       	std	Y+3, r24	; 0x03
     ee4:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	80 5d       	subi	r24, 0xD0	; 208
     eee:	9b 4f       	sbci	r25, 0xFB	; 251
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	59 f4       	brne	.+22     	; 0xf10 <PORTB_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	fc 01       	movw	r30, r24
     f00:	80 81       	ld	r24, Z
     f02:	28 2f       	mov	r18, r24
     f04:	28 60       	ori	r18, 0x08	; 8
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	fc 01       	movw	r30, r24
     f0c:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
     f0e:	0d c0       	rjmp	.+26     	; 0xf2a <PORTB_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
     f10:	8c 81       	ldd	r24, Y+4	; 0x04
     f12:	88 23       	and	r24, r24
     f14:	51 f4       	brne	.+20     	; 0xf2a <PORTB_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	fc 01       	movw	r30, r24
     f1c:	80 81       	ld	r24, Z
     f1e:	28 2f       	mov	r18, r24
     f20:	27 7f       	andi	r18, 0xF7	; 247
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	9a 81       	ldd	r25, Y+2	; 0x02
     f26:	fc 01       	movw	r30, r24
     f28:	20 83       	st	Z, r18
	}
}
     f2a:	00 00       	nop
     f2c:	24 96       	adiw	r28, 0x04	; 4
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	08 95       	ret

00000f38 <PORTB_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <PORTB_set_pin_dir+0x6>
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	88 2f       	mov	r24, r24
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	91 05       	cpc	r25, r1
     f50:	e1 f0       	breq	.+56     	; 0xf8a <PORTB_set_pin_dir+0x52>
     f52:	82 30       	cpi	r24, 0x02	; 2
     f54:	91 05       	cpc	r25, r1
     f56:	71 f1       	breq	.+92     	; 0xfb4 <PORTB_set_pin_dir+0x7c>
     f58:	89 2b       	or	r24, r25
     f5a:	09 f0       	breq	.+2      	; 0xf5e <PORTB_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTB + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
     f5c:	3b c0       	rjmp	.+118    	; 0xfd4 <PORTB_set_pin_dir+0x9c>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     f5e:	84 e0       	ldi	r24, 0x04	; 4
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	24 e0       	ldi	r18, 0x04	; 4
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	f9 01       	movw	r30, r18
     f68:	20 81       	ld	r18, Z
     f6a:	62 2f       	mov	r22, r18
     f6c:	29 81       	ldd	r18, Y+1	; 0x01
     f6e:	42 2f       	mov	r20, r18
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	21 e0       	ldi	r18, 0x01	; 1
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <PORTB_set_pin_dir+0x44>
     f78:	22 0f       	add	r18, r18
     f7a:	33 1f       	adc	r19, r19
     f7c:	4a 95       	dec	r20
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <PORTB_set_pin_dir+0x40>
     f80:	20 95       	com	r18
     f82:	26 23       	and	r18, r22
     f84:	fc 01       	movw	r30, r24
     f86:	20 83       	st	Z, r18
		break;
     f88:	25 c0       	rjmp	.+74     	; 0xfd4 <PORTB_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     f8a:	84 e0       	ldi	r24, 0x04	; 4
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	24 e0       	ldi	r18, 0x04	; 4
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	f9 01       	movw	r30, r18
     f94:	20 81       	ld	r18, Z
     f96:	62 2f       	mov	r22, r18
     f98:	29 81       	ldd	r18, Y+1	; 0x01
     f9a:	42 2f       	mov	r20, r18
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	21 e0       	ldi	r18, 0x01	; 1
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <PORTB_set_pin_dir+0x70>
     fa4:	22 0f       	add	r18, r18
     fa6:	33 1f       	adc	r19, r19
     fa8:	4a 95       	dec	r20
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <PORTB_set_pin_dir+0x6c>
     fac:	26 2b       	or	r18, r22
     fae:	fc 01       	movw	r30, r24
     fb0:	20 83       	st	Z, r18
		break;
     fb2:	10 c0       	rjmp	.+32     	; 0xfd4 <PORTB_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTB + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	88 2f       	mov	r24, r24
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	80 5d       	subi	r24, 0xD0	; 208
     fbc:	9b 4f       	sbci	r25, 0xFB	; 251
     fbe:	29 81       	ldd	r18, Y+1	; 0x01
     fc0:	22 2f       	mov	r18, r18
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	20 5d       	subi	r18, 0xD0	; 208
     fc6:	3b 4f       	sbci	r19, 0xFB	; 251
     fc8:	f9 01       	movw	r30, r18
     fca:	20 81       	ld	r18, Z
     fcc:	28 60       	ori	r18, 0x08	; 8
     fce:	fc 01       	movw	r30, r24
     fd0:	20 83       	st	Z, r18
		break;
     fd2:	00 00       	nop
	default:
		break;
	}
}
     fd4:	00 00       	nop
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <PORTB_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <PORTB_set_pin_level+0x6>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	88 23       	and	r24, r24
     ff2:	a9 f0       	breq	.+42     	; 0x101e <PORTB_set_pin_level+0x3e>
		VPORTB.OUT |= (1 << pin);
     ff4:	84 e0       	ldi	r24, 0x04	; 4
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	24 e0       	ldi	r18, 0x04	; 4
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	f9 01       	movw	r30, r18
     ffe:	21 81       	ldd	r18, Z+1	; 0x01
    1000:	62 2f       	mov	r22, r18
    1002:	29 81       	ldd	r18, Y+1	; 0x01
    1004:	42 2f       	mov	r20, r18
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <PORTB_set_pin_level+0x32>
    100e:	22 0f       	add	r18, r18
    1010:	33 1f       	adc	r19, r19
    1012:	4a 95       	dec	r20
    1014:	e2 f7       	brpl	.-8      	; 0x100e <PORTB_set_pin_level+0x2e>
    1016:	26 2b       	or	r18, r22
    1018:	fc 01       	movw	r30, r24
    101a:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTB.OUT &= ~(1 << pin);
	}
}
    101c:	15 c0       	rjmp	.+42     	; 0x1048 <PORTB_set_pin_level+0x68>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    101e:	84 e0       	ldi	r24, 0x04	; 4
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	24 e0       	ldi	r18, 0x04	; 4
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	f9 01       	movw	r30, r18
    1028:	21 81       	ldd	r18, Z+1	; 0x01
    102a:	62 2f       	mov	r22, r18
    102c:	29 81       	ldd	r18, Y+1	; 0x01
    102e:	42 2f       	mov	r20, r18
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	21 e0       	ldi	r18, 0x01	; 1
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	02 c0       	rjmp	.+4      	; 0x103c <PORTB_set_pin_level+0x5c>
    1038:	22 0f       	add	r18, r18
    103a:	33 1f       	adc	r19, r19
    103c:	4a 95       	dec	r20
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <PORTB_set_pin_level+0x58>
    1040:	20 95       	com	r18
    1042:	26 23       	and	r18, r22
    1044:	fc 01       	movw	r30, r24
    1046:	21 83       	std	Z+1, r18	; 0x01
	}
}
    1048:	00 00       	nop
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	00 d0       	rcall	.+0      	; 0x105a <PORTD_set_pin_dir+0x6>
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	91 05       	cpc	r25, r1
    106c:	e1 f0       	breq	.+56     	; 0x10a6 <PORTD_set_pin_dir+0x52>
    106e:	82 30       	cpi	r24, 0x02	; 2
    1070:	91 05       	cpc	r25, r1
    1072:	71 f1       	breq	.+92     	; 0x10d0 <PORTD_set_pin_dir+0x7c>
    1074:	89 2b       	or	r24, r25
    1076:	09 f0       	breq	.+2      	; 0x107a <PORTD_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    1078:	3b c0       	rjmp	.+118    	; 0x10f0 <PORTD_set_pin_dir+0x9c>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
    107a:	8c e0       	ldi	r24, 0x0C	; 12
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	2c e0       	ldi	r18, 0x0C	; 12
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	f9 01       	movw	r30, r18
    1084:	20 81       	ld	r18, Z
    1086:	62 2f       	mov	r22, r18
    1088:	29 81       	ldd	r18, Y+1	; 0x01
    108a:	42 2f       	mov	r20, r18
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	21 e0       	ldi	r18, 0x01	; 1
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <PORTD_set_pin_dir+0x44>
    1094:	22 0f       	add	r18, r18
    1096:	33 1f       	adc	r19, r19
    1098:	4a 95       	dec	r20
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <PORTD_set_pin_dir+0x40>
    109c:	20 95       	com	r18
    109e:	26 23       	and	r18, r22
    10a0:	fc 01       	movw	r30, r24
    10a2:	20 83       	st	Z, r18
		break;
    10a4:	25 c0       	rjmp	.+74     	; 0x10f0 <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
    10a6:	8c e0       	ldi	r24, 0x0C	; 12
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	2c e0       	ldi	r18, 0x0C	; 12
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	f9 01       	movw	r30, r18
    10b0:	20 81       	ld	r18, Z
    10b2:	62 2f       	mov	r22, r18
    10b4:	29 81       	ldd	r18, Y+1	; 0x01
    10b6:	42 2f       	mov	r20, r18
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	21 e0       	ldi	r18, 0x01	; 1
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <PORTD_set_pin_dir+0x70>
    10c0:	22 0f       	add	r18, r18
    10c2:	33 1f       	adc	r19, r19
    10c4:	4a 95       	dec	r20
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <PORTD_set_pin_dir+0x6c>
    10c8:	26 2b       	or	r18, r22
    10ca:	fc 01       	movw	r30, r24
    10cc:	20 83       	st	Z, r18
		break;
    10ce:	10 c0       	rjmp	.+32     	; 0x10f0 <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	80 59       	subi	r24, 0x90	; 144
    10d8:	9b 4f       	sbci	r25, 0xFB	; 251
    10da:	29 81       	ldd	r18, Y+1	; 0x01
    10dc:	22 2f       	mov	r18, r18
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	20 59       	subi	r18, 0x90	; 144
    10e2:	3b 4f       	sbci	r19, 0xFB	; 251
    10e4:	f9 01       	movw	r30, r18
    10e6:	20 81       	ld	r18, Z
    10e8:	28 60       	ori	r18, 0x08	; 8
    10ea:	fc 01       	movw	r30, r24
    10ec:	20 83       	st	Z, r18
		break;
    10ee:	00 00       	nop
	default:
		break;
	}
}
    10f0:	00 00       	nop
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	08 95       	ret

000010fc <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	00 d0       	rcall	.+0      	; 0x1102 <PORTD_set_pin_level+0x6>
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	88 23       	and	r24, r24
    110e:	a9 f0       	breq	.+42     	; 0x113a <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
    1110:	8c e0       	ldi	r24, 0x0C	; 12
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	2c e0       	ldi	r18, 0x0C	; 12
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	f9 01       	movw	r30, r18
    111a:	21 81       	ldd	r18, Z+1	; 0x01
    111c:	62 2f       	mov	r22, r18
    111e:	29 81       	ldd	r18, Y+1	; 0x01
    1120:	42 2f       	mov	r20, r18
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	21 e0       	ldi	r18, 0x01	; 1
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	02 c0       	rjmp	.+4      	; 0x112e <PORTD_set_pin_level+0x32>
    112a:	22 0f       	add	r18, r18
    112c:	33 1f       	adc	r19, r19
    112e:	4a 95       	dec	r20
    1130:	e2 f7       	brpl	.-8      	; 0x112a <PORTD_set_pin_level+0x2e>
    1132:	26 2b       	or	r18, r22
    1134:	fc 01       	movw	r30, r24
    1136:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
    1138:	15 c0       	rjmp	.+42     	; 0x1164 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
    113a:	8c e0       	ldi	r24, 0x0C	; 12
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	2c e0       	ldi	r18, 0x0C	; 12
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	f9 01       	movw	r30, r18
    1144:	21 81       	ldd	r18, Z+1	; 0x01
    1146:	62 2f       	mov	r22, r18
    1148:	29 81       	ldd	r18, Y+1	; 0x01
    114a:	42 2f       	mov	r20, r18
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	21 e0       	ldi	r18, 0x01	; 1
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <PORTD_set_pin_level+0x5c>
    1154:	22 0f       	add	r18, r18
    1156:	33 1f       	adc	r19, r19
    1158:	4a 95       	dec	r20
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <PORTD_set_pin_level+0x58>
    115c:	20 95       	com	r18
    115e:	26 23       	and	r18, r22
    1160:	fc 01       	movw	r30, r24
    1162:	21 83       	std	Z+1, r18	; 0x01
	}
}
    1164:	00 00       	nop
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	08 95       	ret

00001170 <PA0_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA0_set_dir(const enum port_dir dir)
{
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	1f 92       	push	r1
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(0, dir);
    117c:	69 81       	ldd	r22, Y+1	; 0x01
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	0e 94 dd 06 	call	0xdba	; 0xdba <PORTA_set_pin_dir>
}
    1184:	00 00       	nop
    1186:	0f 90       	pop	r0
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <PA0_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PA0_set_level(const bool level)
{
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	1f 92       	push	r1
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(0, level);
    119a:	69 81       	ldd	r22, Y+1	; 0x01
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	0e 94 31 07 	call	0xe62	; 0xe62 <PORTA_set_pin_level>
}
    11a2:	00 00       	nop
    11a4:	0f 90       	pop	r0
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	08 95       	ret

000011ac <PA1_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PA1_set_pull_mode(const enum port_pull_mode pull_mode)
{
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	1f 92       	push	r1
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_pull_mode(1, pull_mode);
    11b8:	69 81       	ldd	r22, Y+1	; 0x01
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <PORTA_set_pin_pull_mode>
}
    11c0:	00 00       	nop
    11c2:	0f 90       	pop	r0
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	08 95       	ret

000011ca <PA1_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA1_set_dir(const enum port_dir dir)
{
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	1f 92       	push	r1
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(1, dir);
    11d6:	69 81       	ldd	r22, Y+1	; 0x01
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	0e 94 dd 06 	call	0xdba	; 0xdba <PORTA_set_pin_dir>
}
    11de:	00 00       	nop
    11e0:	0f 90       	pop	r0
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	08 95       	ret

000011e8 <PA2_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PA2_set_pull_mode(const enum port_pull_mode pull_mode)
{
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	1f 92       	push	r1
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_pull_mode(2, pull_mode);
    11f4:	69 81       	ldd	r22, Y+1	; 0x01
    11f6:	82 e0       	ldi	r24, 0x02	; 2
    11f8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <PORTA_set_pin_pull_mode>
}
    11fc:	00 00       	nop
    11fe:	0f 90       	pop	r0
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	08 95       	ret

00001206 <PA2_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA2_set_dir(const enum port_dir dir)
{
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	1f 92       	push	r1
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(2, dir);
    1212:	69 81       	ldd	r22, Y+1	; 0x01
    1214:	82 e0       	ldi	r24, 0x02	; 2
    1216:	0e 94 dd 06 	call	0xdba	; 0xdba <PORTA_set_pin_dir>
}
    121a:	00 00       	nop
    121c:	0f 90       	pop	r0
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <PA2_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void PA2_set_isc(const PORT_ISC_t isc)
{
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	1f 92       	push	r1
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	89 83       	std	Y+1, r24	; 0x01
	PORTA_pin_set_isc(2, isc);
    1230:	69 81       	ldd	r22, Y+1	; 0x01
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	0e 94 ba 06 	call	0xd74	; 0xd74 <PORTA_pin_set_isc>
}
    1238:	00 00       	nop
    123a:	0f 90       	pop	r0
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <PA2_set_inverted>:
 *
 * \param[in] inverted true  = I/O on PA2 is inverted
 *                     false = I/O on PA2 is not inverted
 */
static inline void PA2_set_inverted(const bool inverted)
{
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	1f 92       	push	r1
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	89 83       	std	Y+1, r24	; 0x01
	PORTA_pin_set_inverted(2, inverted);
    124e:	69 81       	ldd	r22, Y+1	; 0x01
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	0e 94 8c 06 	call	0xd18	; 0xd18 <PORTA_pin_set_inverted>
}
    1256:	00 00       	nop
    1258:	0f 90       	pop	r0
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	08 95       	ret

00001260 <PA2_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PA2_set_level(const bool level)
{
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	1f 92       	push	r1
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(2, level);
    126c:	69 81       	ldd	r22, Y+1	; 0x01
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	0e 94 31 07 	call	0xe62	; 0xe62 <PORTA_set_pin_level>
}
    1274:	00 00       	nop
    1276:	0f 90       	pop	r0
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	08 95       	ret

0000127e <PA3_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PA3_set_pull_mode(const enum port_pull_mode pull_mode)
{
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	1f 92       	push	r1
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_pull_mode(3, pull_mode);
    128a:	69 81       	ldd	r22, Y+1	; 0x01
    128c:	83 e0       	ldi	r24, 0x03	; 3
    128e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <PORTA_set_pin_pull_mode>
}
    1292:	00 00       	nop
    1294:	0f 90       	pop	r0
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	08 95       	ret

0000129c <PA3_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA3_set_dir(const enum port_dir dir)
{
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	1f 92       	push	r1
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(3, dir);
    12a8:	69 81       	ldd	r22, Y+1	; 0x01
    12aa:	83 e0       	ldi	r24, 0x03	; 3
    12ac:	0e 94 dd 06 	call	0xdba	; 0xdba <PORTA_set_pin_dir>
}
    12b0:	00 00       	nop
    12b2:	0f 90       	pop	r0
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	08 95       	ret

000012ba <PA3_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void PA3_set_isc(const PORT_ISC_t isc)
{
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	1f 92       	push	r1
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	89 83       	std	Y+1, r24	; 0x01
	PORTA_pin_set_isc(3, isc);
    12c6:	69 81       	ldd	r22, Y+1	; 0x01
    12c8:	83 e0       	ldi	r24, 0x03	; 3
    12ca:	0e 94 ba 06 	call	0xd74	; 0xd74 <PORTA_pin_set_isc>
}
    12ce:	00 00       	nop
    12d0:	0f 90       	pop	r0
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	08 95       	ret

000012d8 <PA3_set_inverted>:
 *
 * \param[in] inverted true  = I/O on PA3 is inverted
 *                     false = I/O on PA3 is not inverted
 */
static inline void PA3_set_inverted(const bool inverted)
{
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	1f 92       	push	r1
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	89 83       	std	Y+1, r24	; 0x01
	PORTA_pin_set_inverted(3, inverted);
    12e4:	69 81       	ldd	r22, Y+1	; 0x01
    12e6:	83 e0       	ldi	r24, 0x03	; 3
    12e8:	0e 94 8c 06 	call	0xd18	; 0xd18 <PORTA_pin_set_inverted>
}
    12ec:	00 00       	nop
    12ee:	0f 90       	pop	r0
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	08 95       	ret

000012f6 <PA3_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PA3_set_level(const bool level)
{
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	1f 92       	push	r1
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
    1302:	69 81       	ldd	r22, Y+1	; 0x01
    1304:	83 e0       	ldi	r24, 0x03	; 3
    1306:	0e 94 31 07 	call	0xe62	; 0xe62 <PORTA_set_pin_level>
}
    130a:	00 00       	nop
    130c:	0f 90       	pop	r0
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	08 95       	ret

00001314 <RTS_PIN_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void RTS_PIN_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	1f 92       	push	r1
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_pull_mode(7, pull_mode);
    1320:	69 81       	ldd	r22, Y+1	; 0x01
    1322:	87 e0       	ldi	r24, 0x07	; 7
    1324:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <PORTA_set_pin_pull_mode>
}
    1328:	00 00       	nop
    132a:	0f 90       	pop	r0
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	08 95       	ret

00001332 <RTS_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void RTS_PIN_set_dir(const enum port_dir dir)
{
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	1f 92       	push	r1
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(7, dir);
    133e:	69 81       	ldd	r22, Y+1	; 0x01
    1340:	87 e0       	ldi	r24, 0x07	; 7
    1342:	0e 94 dd 06 	call	0xdba	; 0xdba <PORTA_set_pin_dir>
}
    1346:	00 00       	nop
    1348:	0f 90       	pop	r0
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	08 95       	ret

00001350 <PB0_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PB0_set_dir(const enum port_dir dir)
{
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	1f 92       	push	r1
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(0, dir);
    135c:	69 81       	ldd	r22, Y+1	; 0x01
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	0e 94 9c 07 	call	0xf38	; 0xf38 <PORTB_set_pin_dir>
}
    1364:	00 00       	nop
    1366:	0f 90       	pop	r0
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	08 95       	ret

0000136e <PB0_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PB0_set_level(const bool level)
{
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	1f 92       	push	r1
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(0, level);
    137a:	69 81       	ldd	r22, Y+1	; 0x01
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <PORTB_set_pin_level>
}
    1382:	00 00       	nop
    1384:	0f 90       	pop	r0
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	08 95       	ret

0000138c <PB1_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PB1_set_pull_mode(const enum port_pull_mode pull_mode)
{
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	1f 92       	push	r1
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_pull_mode(1, pull_mode);
    1398:	69 81       	ldd	r22, Y+1	; 0x01
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	0e 94 6b 07 	call	0xed6	; 0xed6 <PORTB_set_pin_pull_mode>
}
    13a0:	00 00       	nop
    13a2:	0f 90       	pop	r0
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	08 95       	ret

000013aa <PB1_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PB1_set_dir(const enum port_dir dir)
{
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	1f 92       	push	r1
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(1, dir);
    13b6:	69 81       	ldd	r22, Y+1	; 0x01
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	0e 94 9c 07 	call	0xf38	; 0xf38 <PORTB_set_pin_dir>
}
    13be:	00 00       	nop
    13c0:	0f 90       	pop	r0
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	08 95       	ret

000013c8 <CTS_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void CTS_PIN_set_dir(const enum port_dir dir)
{
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	1f 92       	push	r1
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(6, dir);
    13d4:	69 81       	ldd	r22, Y+1	; 0x01
    13d6:	86 e0       	ldi	r24, 0x06	; 6
    13d8:	0e 94 2a 08 	call	0x1054	; 0x1054 <PORTD_set_pin_dir>
}
    13dc:	00 00       	nop
    13de:	0f 90       	pop	r0
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	08 95       	ret

000013e6 <CTS_PIN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void CTS_PIN_set_level(const bool level)
{
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	1f 92       	push	r1
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(6, level);
    13f2:	69 81       	ldd	r22, Y+1	; 0x01
    13f4:	86 e0       	ldi	r24, 0x06	; 6
    13f6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <PORTD_set_pin_level>
}
    13fa:	00 00       	nop
    13fc:	0f 90       	pop	r0
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	08 95       	ret

00001404 <HWRESET_PIN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void HWRESET_PIN_set_dir(const enum port_dir dir)
{
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	1f 92       	push	r1
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(7, dir);
    1410:	69 81       	ldd	r22, Y+1	; 0x01
    1412:	87 e0       	ldi	r24, 0x07	; 7
    1414:	0e 94 2a 08 	call	0x1054	; 0x1054 <PORTD_set_pin_dir>
}
    1418:	00 00       	nop
    141a:	0f 90       	pop	r0
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <HWRESET_PIN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void HWRESET_PIN_set_level(const bool level)
{
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	1f 92       	push	r1
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(7, level);
    142e:	69 81       	ldd	r22, Y+1	; 0x01
    1430:	87 e0       	ldi	r24, 0x07	; 7
    1432:	0e 94 7e 08 	call	0x10fc	; 0x10fc <PORTD_set_pin_level>
}
    1436:	00 00       	nop
    1438:	0f 90       	pop	r0
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	08 95       	ret

00001440 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	26 97       	sbiw	r28, 0x06	; 6
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    144e:	19 82       	std	Y+1, r1	; 0x01
    1450:	12 c0       	rjmp	.+36     	; 0x1476 <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	80 5f       	subi	r24, 0xF0	; 240
    145a:	9b 4f       	sbci	r25, 0xFB	; 251
    145c:	29 81       	ldd	r18, Y+1	; 0x01
    145e:	22 2f       	mov	r18, r18
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	20 5f       	subi	r18, 0xF0	; 240
    1464:	3b 4f       	sbci	r19, 0xFB	; 251
    1466:	f9 01       	movw	r30, r18
    1468:	20 81       	ld	r18, Z
    146a:	28 60       	ori	r18, 0x08	; 8
    146c:	fc 01       	movw	r30, r24
    146e:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	8f 5f       	subi	r24, 0xFF	; 255
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	88 30       	cpi	r24, 0x08	; 8
    147a:	58 f3       	brcs	.-42     	; 0x1452 <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    147c:	1a 82       	std	Y+2, r1	; 0x02
    147e:	12 c0       	rjmp	.+36     	; 0x14a4 <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	80 5d       	subi	r24, 0xD0	; 208
    1488:	9b 4f       	sbci	r25, 0xFB	; 251
    148a:	2a 81       	ldd	r18, Y+2	; 0x02
    148c:	22 2f       	mov	r18, r18
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	20 5d       	subi	r18, 0xD0	; 208
    1492:	3b 4f       	sbci	r19, 0xFB	; 251
    1494:	f9 01       	movw	r30, r18
    1496:	20 81       	ld	r18, Z
    1498:	28 60       	ori	r18, 0x08	; 8
    149a:	fc 01       	movw	r30, r24
    149c:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	8f 5f       	subi	r24, 0xFF	; 255
    14a2:	8a 83       	std	Y+2, r24	; 0x02
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	88 30       	cpi	r24, 0x08	; 8
    14a8:	58 f3       	brcs	.-42     	; 0x1480 <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    14aa:	1b 82       	std	Y+3, r1	; 0x03
    14ac:	12 c0       	rjmp	.+36     	; 0x14d2 <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	88 2f       	mov	r24, r24
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	80 5b       	subi	r24, 0xB0	; 176
    14b6:	9b 4f       	sbci	r25, 0xFB	; 251
    14b8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ba:	22 2f       	mov	r18, r18
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	20 5b       	subi	r18, 0xB0	; 176
    14c0:	3b 4f       	sbci	r19, 0xFB	; 251
    14c2:	f9 01       	movw	r30, r18
    14c4:	20 81       	ld	r18, Z
    14c6:	28 60       	ori	r18, 0x08	; 8
    14c8:	fc 01       	movw	r30, r24
    14ca:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	8f 5f       	subi	r24, 0xFF	; 255
    14d0:	8b 83       	std	Y+3, r24	; 0x03
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	88 30       	cpi	r24, 0x08	; 8
    14d6:	58 f3       	brcs	.-42     	; 0x14ae <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    14d8:	1c 82       	std	Y+4, r1	; 0x04
    14da:	12 c0       	rjmp	.+36     	; 0x1500 <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	88 2f       	mov	r24, r24
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	80 59       	subi	r24, 0x90	; 144
    14e4:	9b 4f       	sbci	r25, 0xFB	; 251
    14e6:	2c 81       	ldd	r18, Y+4	; 0x04
    14e8:	22 2f       	mov	r18, r18
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	20 59       	subi	r18, 0x90	; 144
    14ee:	3b 4f       	sbci	r19, 0xFB	; 251
    14f0:	f9 01       	movw	r30, r18
    14f2:	20 81       	ld	r18, Z
    14f4:	28 60       	ori	r18, 0x08	; 8
    14f6:	fc 01       	movw	r30, r24
    14f8:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    14fa:	8c 81       	ldd	r24, Y+4	; 0x04
    14fc:	8f 5f       	subi	r24, 0xFF	; 255
    14fe:	8c 83       	std	Y+4, r24	; 0x04
    1500:	8c 81       	ldd	r24, Y+4	; 0x04
    1502:	88 30       	cpi	r24, 0x08	; 8
    1504:	58 f3       	brcs	.-42     	; 0x14dc <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1506:	1d 82       	std	Y+5, r1	; 0x05
    1508:	12 c0       	rjmp	.+36     	; 0x152e <mcu_init+0xee>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	88 2f       	mov	r24, r24
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	80 57       	subi	r24, 0x70	; 112
    1512:	9b 4f       	sbci	r25, 0xFB	; 251
    1514:	2d 81       	ldd	r18, Y+5	; 0x05
    1516:	22 2f       	mov	r18, r18
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	20 57       	subi	r18, 0x70	; 112
    151c:	3b 4f       	sbci	r19, 0xFB	; 251
    151e:	f9 01       	movw	r30, r18
    1520:	20 81       	ld	r18, Z
    1522:	28 60       	ori	r18, 0x08	; 8
    1524:	fc 01       	movw	r30, r24
    1526:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1528:	8d 81       	ldd	r24, Y+5	; 0x05
    152a:	8f 5f       	subi	r24, 0xFF	; 255
    152c:	8d 83       	std	Y+5, r24	; 0x05
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	88 30       	cpi	r24, 0x08	; 8
    1532:	58 f3       	brcs	.-42     	; 0x150a <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1534:	1e 82       	std	Y+6, r1	; 0x06
    1536:	12 c0       	rjmp	.+36     	; 0x155c <mcu_init+0x11c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1538:	8e 81       	ldd	r24, Y+6	; 0x06
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	80 55       	subi	r24, 0x50	; 80
    1540:	9b 4f       	sbci	r25, 0xFB	; 251
    1542:	2e 81       	ldd	r18, Y+6	; 0x06
    1544:	22 2f       	mov	r18, r18
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	20 55       	subi	r18, 0x50	; 80
    154a:	3b 4f       	sbci	r19, 0xFB	; 251
    154c:	f9 01       	movw	r30, r18
    154e:	20 81       	ld	r18, Z
    1550:	28 60       	ori	r18, 0x08	; 8
    1552:	fc 01       	movw	r30, r24
    1554:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1556:	8e 81       	ldd	r24, Y+6	; 0x06
    1558:	8f 5f       	subi	r24, 0xFF	; 255
    155a:	8e 83       	std	Y+6, r24	; 0x06
    155c:	8e 81       	ldd	r24, Y+6	; 0x06
    155e:	88 30       	cpi	r24, 0x08	; 8
    1560:	58 f3       	brcs	.-42     	; 0x1538 <mcu_init+0xf8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    1562:	00 00       	nop
    1564:	26 96       	adiw	r28, 0x06	; 6
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	08 95       	ret

00001570 <LoRa_initialization>:
#include "driver_init.h"
#include <system.h>

/* configure the pins and initialize the registers */
void LoRa_initialization(void)
{
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to input
	PA1_set_dir(PORT_DIR_IN);
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <PA1_set_dir>

	PA1_set_pull_mode(
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	0e 94 d6 08 	call	0x11ac	; 0x11ac <PA1_set_pull_mode>
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	// Set pin direction to output
	PA0_set_dir(PORT_DIR_OUT);
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	0e 94 b8 08 	call	0x1170	; 0x1170 <PA0_set_dir>

	PA0_set_level(
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	0e 94 c7 08 	call	0x118e	; 0x118e <PA0_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LoRa_init();
    1590:	0e 94 07 13 	call	0x260e	; 0x260e <LoRa_init>
}
    1594:	00 00       	nop
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	08 95       	ret

0000159c <Terminal_initialization>:

/* configure the pins and initialize the registers */
void Terminal_initialization(void)
{
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to input
	PB1_set_dir(PORT_DIR_IN);
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	0e 94 d5 09 	call	0x13aa	; 0x13aa <PB1_set_dir>

	PB1_set_pull_mode(
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	0e 94 c6 09 	call	0x138c	; 0x138c <PB1_set_pull_mode>
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	// Set pin direction to output
	PB0_set_dir(PORT_DIR_OUT);
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	0e 94 a8 09 	call	0x1350	; 0x1350 <PB0_set_dir>

	PB0_set_level(
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	0e 94 b7 09 	call	0x136e	; 0x136e <PB0_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	Terminal_init();
    15bc:	0e 94 59 14 	call	0x28b2	; 0x28b2 <Terminal_init>
}
    15c0:	00 00       	nop
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	08 95       	ret

000015c8 <TIMER_0_initialization>:

void TIMER_0_initialization(void)
{
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62

	TIMER_0_init();
    15d0:	0e 94 b4 11 	call	0x2368	; 0x2368 <TIMER_0_init>
}
    15d4:	00 00       	nop
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <I2C_MASTER_initialization>:

/* configure pins and initialize registers */
void I2C_MASTER_initialization(void)
{
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62

	PA3_set_dir(
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	0e 94 4e 09 	call	0x129c	; 0x129c <PA3_set_dir>
	    // <PORT_DIR_OFF"> Off
	    // <PORT_DIR_IN"> In
	    // <PORT_DIR_OUT"> Out
	    PORT_DIR_OUT);

	PA3_set_level(
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <PA3_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PA3_set_pull_mode(
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	0e 94 3f 09 	call	0x127e	; 0x127e <PA3_set_pull_mode>
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	PA3_set_inverted(
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <PA3_set_inverted>
	    // <id> pad_invert
	    // <false"> Not inverted
	    // <true"> Inverted
	    false);

	PA3_set_isc(
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	0e 94 5d 09 	call	0x12ba	; 0x12ba <PA3_set_isc>
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	PA2_set_dir(
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	0e 94 03 09 	call	0x1206	; 0x1206 <PA2_set_dir>
	    // <PORT_DIR_OFF"> Off
	    // <PORT_DIR_IN"> In
	    // <PORT_DIR_OUT"> Out
	    PORT_DIR_OUT);

	PA2_set_level(
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	0e 94 30 09 	call	0x1260	; 0x1260 <PA2_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PA2_set_pull_mode(
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <PA2_set_pull_mode>
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	PA2_set_inverted(
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	0e 94 21 09 	call	0x1242	; 0x1242 <PA2_set_inverted>
	    // <id> pad_invert
	    // <false"> Not inverted
	    // <true"> Inverted
	    false);

	PA2_set_isc(
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	0e 94 12 09 	call	0x1224	; 0x1224 <PA2_set_isc>
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	I2C_MASTER_init();
    1620:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <I2C_MASTER_init>
}
    1624:	00 00       	nop
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	08 95       	ret

0000162c <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
    1634:	0e 94 20 0a 	call	0x1440	; 0x1440 <mcu_init>

	/* PORT setting on PA7 */

	// Set pin direction to input
	RTS_PIN_set_dir(PORT_DIR_IN);
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	0e 94 99 09 	call	0x1332	; 0x1332 <RTS_PIN_set_dir>

	RTS_PIN_set_pull_mode(
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	0e 94 8a 09 	call	0x1314	; 0x1314 <RTS_PIN_set_pull_mode>
	    PORT_PULL_OFF);

	/* PORT setting on PD6 */

	// Set pin direction to output
	CTS_PIN_set_dir(PORT_DIR_OUT);
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <CTS_PIN_set_dir>

	CTS_PIN_set_level(
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <CTS_PIN_set_level>
	    false);

	/* PORT setting on PD7 */

	// Set pin direction to output
	HWRESET_PIN_set_dir(PORT_DIR_OUT);
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	0e 94 02 0a 	call	0x1404	; 0x1404 <HWRESET_PIN_set_dir>

	HWRESET_PIN_set_level(
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	0e 94 11 0a 	call	0x1422	; 0x1422 <HWRESET_PIN_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CLKCTRL_init();
    165c:	0e 94 40 06 	call	0xc80	; 0xc80 <CLKCTRL_init>

	LoRa_initialization();
    1660:	0e 94 b8 0a 	call	0x1570	; 0x1570 <LoRa_initialization>

	Terminal_initialization();
    1664:	0e 94 ce 0a 	call	0x159c	; 0x159c <Terminal_initialization>

	TIMER_0_initialization();
    1668:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <TIMER_0_initialization>

	CPUINT_init();
    166c:	0e 94 52 06 	call	0xca4	; 0xca4 <CPUINT_init>

	SLPCTRL_init();
    1670:	0e 94 ac 11 	call	0x2358	; 0x2358 <SLPCTRL_init>

	I2C_MASTER_initialization();
    1674:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <I2C_MASTER_initialization>

	BOD_init();
    1678:	0e 94 22 06 	call	0xc44	; 0xc44 <BOD_init>
}
    167c:	00 00       	nop
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	08 95       	ret

00001684 <PORTD_set_pin_level>:
}

void rn2903_SetCTS(bool state)
{
	CTS_PIN_set_level(state);
}
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	00 d0       	rcall	.+0      	; 0x168a <PORTD_set_pin_level+0x6>
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	6a 83       	std	Y+2, r22	; 0x02
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	88 23       	and	r24, r24
    1696:	a9 f0       	breq	.+42     	; 0x16c2 <PORTD_set_pin_level+0x3e>
    1698:	8c e0       	ldi	r24, 0x0C	; 12
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	2c e0       	ldi	r18, 0x0C	; 12
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	f9 01       	movw	r30, r18
    16a2:	21 81       	ldd	r18, Z+1	; 0x01
    16a4:	62 2f       	mov	r22, r18
    16a6:	29 81       	ldd	r18, Y+1	; 0x01
    16a8:	42 2f       	mov	r20, r18
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	21 e0       	ldi	r18, 0x01	; 1
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <PORTD_set_pin_level+0x32>
    16b2:	22 0f       	add	r18, r18
    16b4:	33 1f       	adc	r19, r19
    16b6:	4a 95       	dec	r20
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <PORTD_set_pin_level+0x2e>
    16ba:	26 2b       	or	r18, r22
    16bc:	fc 01       	movw	r30, r24
    16be:	21 83       	std	Z+1, r18	; 0x01
    16c0:	15 c0       	rjmp	.+42     	; 0x16ec <PORTD_set_pin_level+0x68>
    16c2:	8c e0       	ldi	r24, 0x0C	; 12
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	2c e0       	ldi	r18, 0x0C	; 12
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	f9 01       	movw	r30, r18
    16cc:	21 81       	ldd	r18, Z+1	; 0x01
    16ce:	62 2f       	mov	r22, r18
    16d0:	29 81       	ldd	r18, Y+1	; 0x01
    16d2:	42 2f       	mov	r20, r18
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	21 e0       	ldi	r18, 0x01	; 1
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <PORTD_set_pin_level+0x5c>
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	4a 95       	dec	r20
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <PORTD_set_pin_level+0x58>
    16e4:	20 95       	com	r18
    16e6:	26 23       	and	r18, r22
    16e8:	fc 01       	movw	r30, r24
    16ea:	21 83       	std	Z+1, r18	; 0x01
    16ec:	00 00       	nop
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	08 95       	ret

000016f8 <HWRESET_PIN_set_level>:
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	1f 92       	push	r1
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	69 81       	ldd	r22, Y+1	; 0x01
    1706:	87 e0       	ldi	r24, 0x07	; 7
    1708:	0e 94 42 0b 	call	0x1684	; 0x1684 <PORTD_set_pin_level>
    170c:	00 00       	nop
    170e:	0f 90       	pop	r0
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	08 95       	ret

00001716 <rn2903_SetHardwareReset>:
    1716:	cf 93       	push	r28
    1718:	df 93       	push	r29
    171a:	1f 92       	push	r1
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <HWRESET_PIN_set_level>
    1728:	00 00       	nop
    172a:	0f 90       	pop	r0
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	08 95       	ret

00001732 <rn2903_SendString>:

void rn2903_SendString(const char *command)
{
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	00 d0       	rcall	.+0      	; 0x1738 <rn2903_SendString+0x6>
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	9a 83       	std	Y+2, r25	; 0x02
	while (*command != '\0')
    1740:	0b c0       	rjmp	.+22     	; 0x1758 <rn2903_SendString+0x26>
		LoRa_write(*command++);
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	9a 81       	ldd	r25, Y+2	; 0x02
    1746:	9c 01       	movw	r18, r24
    1748:	2f 5f       	subi	r18, 0xFF	; 255
    174a:	3f 4f       	sbci	r19, 0xFF	; 255
    174c:	29 83       	std	Y+1, r18	; 0x01
    174e:	3a 83       	std	Y+2, r19	; 0x02
    1750:	fc 01       	movw	r30, r24
    1752:	80 81       	ld	r24, Z
    1754:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <LoRa_write>
	CTS_PIN_set_level(state);
}

void rn2903_SendString(const char *command)
{
	while (*command != '\0')
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	9a 81       	ldd	r25, Y+2	; 0x02
    175c:	fc 01       	movw	r30, r24
    175e:	80 81       	ld	r24, Z
    1760:	88 23       	and	r24, r24
    1762:	79 f7       	brne	.-34     	; 0x1742 <rn2903_SendString+0x10>
		LoRa_write(*command++);
	LoRa_write('\r');
    1764:	8d e0       	ldi	r24, 0x0D	; 13
    1766:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <LoRa_write>
	LoRa_write('\n');
    176a:	8a e0       	ldi	r24, 0x0A	; 10
    176c:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <LoRa_write>
}
    1770:	00 00       	nop
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	08 95       	ret

0000177c <I2C_MASTER_set_address_nack_callback>:
 * \return Nothing
 */
void I2C_MASTER_set_baud_rate(uint32_t baud)
{
	TWI0.MBAUD = (uint8_t)TWI0_BAUD(baud, 0); /* set MBAUD register */
}
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	00 d0       	rcall	.+0      	; 0x1782 <I2C_MASTER_set_address_nack_callback+0x6>
    1782:	00 d0       	rcall	.+0      	; 0x1784 <I2C_MASTER_set_address_nack_callback+0x8>
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	89 83       	std	Y+1, r24	; 0x01
    178a:	9a 83       	std	Y+2, r25	; 0x02
    178c:	6b 83       	std	Y+3, r22	; 0x03
    178e:	7c 83       	std	Y+4, r23	; 0x04
    1790:	2b 81       	ldd	r18, Y+3	; 0x03
    1792:	3c 81       	ldd	r19, Y+4	; 0x04
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	a9 01       	movw	r20, r18
    179a:	bc 01       	movw	r22, r24
    179c:	82 e0       	ldi	r24, 0x02	; 2
    179e:	0e 94 19 10 	call	0x2032	; 0x2032 <I2C_MASTER_set_callback>
    17a2:	00 00       	nop
    17a4:	24 96       	adiw	r28, 0x04	; 4
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	08 95       	ret

000017b0 <I2C_MASTER_init>:
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	80 ea       	ldi	r24, 0xA0	; 160
    17ba:	98 e0       	ldi	r25, 0x08	; 8
    17bc:	24 e1       	ldi	r18, 0x14	; 20
    17be:	fc 01       	movw	r30, r24
    17c0:	26 83       	std	Z+6, r18	; 0x06
    17c2:	80 ea       	ldi	r24, 0xA0	; 160
    17c4:	98 e0       	ldi	r25, 0x08	; 8
    17c6:	21 ec       	ldi	r18, 0xC1	; 193
    17c8:	fc 01       	movw	r30, r24
    17ca:	23 83       	std	Z+3, r18	; 0x03
    17cc:	00 00       	nop
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	08 95       	ret

000017d4 <I2C_MASTER_open>:
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	00 d0       	rcall	.+0      	; 0x17da <I2C_MASTER_open+0x6>
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	8a 83       	std	Y+2, r24	; 0x02
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    17e8:	82 70       	andi	r24, 0x02	; 2
    17ea:	88 23       	and	r24, r24
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <I2C_MASTER_open+0x1c>
    17ee:	77 c0       	rjmp	.+238    	; 0x18de <I2C_MASTER_open+0x10a>
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	80 93 59 28 	sts	0x2859, r24	; 0x802859 <I2C_MASTER_status+0x1>
    17f6:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    17fa:	8e 7f       	andi	r24, 0xFE	; 254
    17fc:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>
    1800:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    1804:	82 60       	ori	r24, 0x02	; 2
    1806:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>
    180a:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    180e:	87 7f       	andi	r24, 0xF7	; 247
    1810:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>
    1814:	8e e0       	ldi	r24, 0x0E	; 14
    1816:	80 93 62 28 	sts	0x2862, r24	; 0x802862 <I2C_MASTER_status+0xa>
    181a:	84 ef       	ldi	r24, 0xF4	; 244
    181c:	91 e0       	ldi	r25, 0x01	; 1
    181e:	80 93 60 28 	sts	0x2860, r24	; 0x802860 <I2C_MASTER_status+0x8>
    1822:	90 93 61 28 	sts	0x2861, r25	; 0x802861 <I2C_MASTER_status+0x9>
    1826:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    182a:	84 60       	ori	r24, 0x04	; 4
    182c:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>
    1830:	8f ef       	ldi	r24, 0xFF	; 255
    1832:	9f e0       	ldi	r25, 0x0F	; 15
    1834:	80 93 64 28 	sts	0x2864, r24	; 0x802864 <I2C_MASTER_status+0xc>
    1838:	90 93 65 28 	sts	0x2865, r25	; 0x802865 <I2C_MASTER_status+0xd>
    183c:	10 92 70 28 	sts	0x2870, r1	; 0x802870 <I2C_MASTER_status+0x18>
    1840:	10 92 71 28 	sts	0x2871, r1	; 0x802871 <I2C_MASTER_status+0x19>
    1844:	8f ef       	ldi	r24, 0xFF	; 255
    1846:	9f e0       	ldi	r25, 0x0F	; 15
    1848:	80 93 66 28 	sts	0x2866, r24	; 0x802866 <I2C_MASTER_status+0xe>
    184c:	90 93 67 28 	sts	0x2867, r25	; 0x802867 <I2C_MASTER_status+0xf>
    1850:	10 92 72 28 	sts	0x2872, r1	; 0x802872 <I2C_MASTER_status+0x1a>
    1854:	10 92 73 28 	sts	0x2873, r1	; 0x802873 <I2C_MASTER_status+0x1b>
    1858:	8f ef       	ldi	r24, 0xFF	; 255
    185a:	9f e0       	ldi	r25, 0x0F	; 15
    185c:	80 93 68 28 	sts	0x2868, r24	; 0x802868 <I2C_MASTER_status+0x10>
    1860:	90 93 69 28 	sts	0x2869, r25	; 0x802869 <I2C_MASTER_status+0x11>
    1864:	10 92 74 28 	sts	0x2874, r1	; 0x802874 <I2C_MASTER_status+0x1c>
    1868:	10 92 75 28 	sts	0x2875, r1	; 0x802875 <I2C_MASTER_status+0x1d>
    186c:	8f ef       	ldi	r24, 0xFF	; 255
    186e:	9f e0       	ldi	r25, 0x0F	; 15
    1870:	80 93 6a 28 	sts	0x286A, r24	; 0x80286a <I2C_MASTER_status+0x12>
    1874:	90 93 6b 28 	sts	0x286B, r25	; 0x80286b <I2C_MASTER_status+0x13>
    1878:	10 92 76 28 	sts	0x2876, r1	; 0x802876 <I2C_MASTER_status+0x1e>
    187c:	10 92 77 28 	sts	0x2877, r1	; 0x802877 <I2C_MASTER_status+0x1f>
    1880:	8c e0       	ldi	r24, 0x0C	; 12
    1882:	90 e1       	ldi	r25, 0x10	; 16
    1884:	80 93 6c 28 	sts	0x286C, r24	; 0x80286c <I2C_MASTER_status+0x14>
    1888:	90 93 6d 28 	sts	0x286D, r25	; 0x80286d <I2C_MASTER_status+0x15>
    188c:	10 92 78 28 	sts	0x2878, r1	; 0x802878 <I2C_MASTER_status+0x20>
    1890:	10 92 79 28 	sts	0x2879, r1	; 0x802879 <I2C_MASTER_status+0x21>
    1894:	80 ea       	ldi	r24, 0xA0	; 160
    1896:	98 e0       	ldi	r25, 0x08	; 8
    1898:	20 ea       	ldi	r18, 0xA0	; 160
    189a:	38 e0       	ldi	r19, 0x08	; 8
    189c:	f9 01       	movw	r30, r18
    189e:	24 81       	ldd	r18, Z+4	; 0x04
    18a0:	28 60       	ori	r18, 0x08	; 8
    18a2:	fc 01       	movw	r30, r24
    18a4:	24 83       	std	Z+4, r18	; 0x04
    18a6:	80 ea       	ldi	r24, 0xA0	; 160
    18a8:	98 e0       	ldi	r25, 0x08	; 8
    18aa:	20 ea       	ldi	r18, 0xA0	; 160
    18ac:	38 e0       	ldi	r19, 0x08	; 8
    18ae:	f9 01       	movw	r30, r18
    18b0:	25 81       	ldd	r18, Z+5	; 0x05
    18b2:	21 60       	ori	r18, 0x01	; 1
    18b4:	fc 01       	movw	r30, r24
    18b6:	25 83       	std	Z+5, r18	; 0x05
    18b8:	80 ea       	ldi	r24, 0xA0	; 160
    18ba:	98 e0       	ldi	r25, 0x08	; 8
    18bc:	20 ea       	ldi	r18, 0xA0	; 160
    18be:	38 e0       	ldi	r19, 0x08	; 8
    18c0:	f9 01       	movw	r30, r18
    18c2:	25 81       	ldd	r18, Z+5	; 0x05
    18c4:	20 6c       	ori	r18, 0xC0	; 192
    18c6:	fc 01       	movw	r30, r24
    18c8:	25 83       	std	Z+5, r18	; 0x05
    18ca:	80 ea       	ldi	r24, 0xA0	; 160
    18cc:	98 e0       	ldi	r25, 0x08	; 8
    18ce:	20 ea       	ldi	r18, 0xA0	; 160
    18d0:	38 e0       	ldi	r19, 0x08	; 8
    18d2:	f9 01       	movw	r30, r18
    18d4:	23 81       	ldd	r18, Z+3	; 0x03
    18d6:	20 6c       	ori	r18, 0xC0	; 192
    18d8:	fc 01       	movw	r30, r24
    18da:	23 83       	std	Z+3, r18	; 0x03
    18dc:	19 82       	std	Y+1, r1	; 0x01
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	08 95       	ret

000018ea <I2C_MASTER_close>:
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	1f 92       	push	r1
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	80 ea       	ldi	r24, 0xA0	; 160
    18fa:	98 e0       	ldi	r25, 0x08	; 8
    18fc:	fc 01       	movw	r30, r24
    18fe:	85 81       	ldd	r24, Z+5	; 0x05
    1900:	88 2f       	mov	r24, r24
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	84 70       	andi	r24, 0x04	; 4
    1906:	99 27       	eor	r25, r25
    1908:	89 2b       	or	r24, r25
    190a:	41 f0       	breq	.+16     	; 0x191c <I2C_MASTER_close+0x32>
    190c:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    1910:	8e 7f       	andi	r24, 0xFE	; 254
    1912:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	80 93 63 28 	sts	0x2863, r24	; 0x802863 <I2C_MASTER_status+0xb>
    191c:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    1920:	81 70       	andi	r24, 0x01	; 1
    1922:	88 23       	and	r24, r24
    1924:	e9 f4       	brne	.+58     	; 0x1960 <I2C_MASTER_close+0x76>
    1926:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    192a:	8d 7f       	andi	r24, 0xFD	; 253
    192c:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	80 93 59 28 	sts	0x2859, r24	; 0x802859 <I2C_MASTER_status+0x1>
    1936:	80 ea       	ldi	r24, 0xA0	; 160
    1938:	98 e0       	ldi	r25, 0x08	; 8
    193a:	20 ea       	ldi	r18, 0xA0	; 160
    193c:	38 e0       	ldi	r19, 0x08	; 8
    193e:	f9 01       	movw	r30, r18
    1940:	25 81       	ldd	r18, Z+5	; 0x05
    1942:	20 6c       	ori	r18, 0xC0	; 192
    1944:	fc 01       	movw	r30, r24
    1946:	25 83       	std	Z+5, r18	; 0x05
    1948:	80 ea       	ldi	r24, 0xA0	; 160
    194a:	98 e0       	ldi	r25, 0x08	; 8
    194c:	20 ea       	ldi	r18, 0xA0	; 160
    194e:	38 e0       	ldi	r19, 0x08	; 8
    1950:	f9 01       	movw	r30, r18
    1952:	23 81       	ldd	r18, Z+3	; 0x03
    1954:	2f 73       	andi	r18, 0x3F	; 63
    1956:	fc 01       	movw	r30, r24
    1958:	23 83       	std	Z+3, r18	; 0x03
    195a:	80 91 63 28 	lds	r24, 0x2863	; 0x802863 <I2C_MASTER_status+0xb>
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	0f 90       	pop	r0
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	08 95       	ret

0000196a <I2C_MASTER_set_buffer>:
 * \param[in] bufferSize Number of bytes to read or write from slave
 *
 * \return Nothing
 */
void I2C_MASTER_set_buffer(void *buffer, size_t bufferSize)
{
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	00 d0       	rcall	.+0      	; 0x1970 <I2C_MASTER_set_buffer+0x6>
    1970:	00 d0       	rcall	.+0      	; 0x1972 <I2C_MASTER_set_buffer+0x8>
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	9a 83       	std	Y+2, r25	; 0x02
    197a:	6b 83       	std	Y+3, r22	; 0x03
    197c:	7c 83       	std	Y+4, r23	; 0x04
	if (I2C_MASTER_status.bufferFree) {
    197e:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    1982:	84 70       	andi	r24, 0x04	; 4
    1984:	88 23       	and	r24, r24
    1986:	89 f0       	breq	.+34     	; 0x19aa <I2C_MASTER_set_buffer+0x40>
		I2C_MASTER_status.data_ptr    = buffer;
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	9a 81       	ldd	r25, Y+2	; 0x02
    198c:	80 93 5a 28 	sts	0x285A, r24	; 0x80285a <I2C_MASTER_status+0x2>
    1990:	90 93 5b 28 	sts	0x285B, r25	; 0x80285b <I2C_MASTER_status+0x3>
		I2C_MASTER_status.data_length = bufferSize;
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	9c 81       	ldd	r25, Y+4	; 0x04
    1998:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <I2C_MASTER_status+0x4>
    199c:	90 93 5d 28 	sts	0x285D, r25	; 0x80285d <I2C_MASTER_status+0x5>
		I2C_MASTER_status.bufferFree  = false;
    19a0:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    19a4:	8b 7f       	andi	r24, 0xFB	; 251
    19a6:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>
	}
}
    19aa:	00 00       	nop
    19ac:	24 96       	adiw	r28, 0x04	; 4
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	08 95       	ret

000019b8 <I2C_MASTER_master_operation>:
 * \retval I2C_NOERR The I2C open was successful
 * \retval I2C_BUSY  The I2C open failed because the interface is busy
 * \retval I2C_FAIL  The I2C open failed with an error
 */
i2c_error_t I2C_MASTER_master_operation(bool read)
{
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	00 d0       	rcall	.+0      	; 0x19be <I2C_MASTER_master_operation+0x6>
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	8a 83       	std	Y+2, r24	; 0x02
	i2c_error_t ret = I2C_BUSY;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	89 83       	std	Y+1, r24	; 0x01
	if (!I2C_MASTER_status.busy) {
    19c8:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    19cc:	81 70       	andi	r24, 0x01	; 1
    19ce:	88 23       	and	r24, r24
    19d0:	91 f4       	brne	.+36     	; 0x19f6 <I2C_MASTER_master_operation+0x3e>
		I2C_MASTER_status.busy = true;
    19d2:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    19d6:	81 60       	ori	r24, 0x01	; 1
    19d8:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>
		ret                    = I2C_NOERR;
    19dc:	19 82       	std	Y+1, r1	; 0x01

		if (read) {
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	88 23       	and	r24, r24
    19e2:	21 f0       	breq	.+8      	; 0x19ec <I2C_MASTER_master_operation+0x34>
			I2C_MASTER_status.state = I2C_SEND_ADR_READ;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	80 93 62 28 	sts	0x2862, r24	; 0x802862 <I2C_MASTER_status+0xa>
    19ea:	03 c0       	rjmp	.+6      	; 0x19f2 <I2C_MASTER_master_operation+0x3a>
		} else {
			I2C_MASTER_status.state = I2C_SEND_ADR_WRITE;
    19ec:	82 e0       	ldi	r24, 0x02	; 2
    19ee:	80 93 62 28 	sts	0x2862, r24	; 0x802862 <I2C_MASTER_status+0xa>
		}
		I2C_MASTER_master_isr();
    19f2:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <I2C_MASTER_master_isr>
	}
	return ret;
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <I2C_MASTER_master_read>:

/**
 * \brief Identical to I2C_MASTER_master_operation(true);
 */
i2c_error_t I2C_MASTER_master_read(void)
{
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
	return I2C_MASTER_master_operation(true);
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <I2C_MASTER_master_operation>
}
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	08 95       	ret

00001a16 <I2C_MASTER_master_write>:

/**
 * \brief Identical to I2C_MASTER_master_operation(false);
 */
i2c_error_t I2C_MASTER_master_write(void)
{
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
	return I2C_MASTER_master_operation(false);
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <I2C_MASTER_master_operation>
}
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	08 95       	ret

00001a2a <I2C_MASTER_do_I2C_RESET>:
/************************************************************************/
/* Helper Functions                                                     */
/************************************************************************/

static i2c_fsm_states_t I2C_MASTER_do_I2C_RESET(void)
{
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
	TWI0.MCTRLB |= TWI_FLUSH_bm;
    1a32:	80 ea       	ldi	r24, 0xA0	; 160
    1a34:	98 e0       	ldi	r25, 0x08	; 8
    1a36:	20 ea       	ldi	r18, 0xA0	; 160
    1a38:	38 e0       	ldi	r19, 0x08	; 8
    1a3a:	f9 01       	movw	r30, r18
    1a3c:	24 81       	ldd	r18, Z+4	; 0x04
    1a3e:	28 60       	ori	r18, 0x08	; 8
    1a40:	fc 01       	movw	r30, r24
    1a42:	24 83       	std	Z+4, r18	; 0x04
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;
    1a44:	80 ea       	ldi	r24, 0xA0	; 160
    1a46:	98 e0       	ldi	r25, 0x08	; 8
    1a48:	20 ea       	ldi	r18, 0xA0	; 160
    1a4a:	38 e0       	ldi	r19, 0x08	; 8
    1a4c:	f9 01       	movw	r30, r18
    1a4e:	25 81       	ldd	r18, Z+5	; 0x05
    1a50:	21 60       	ori	r18, 0x01	; 1
    1a52:	fc 01       	movw	r30, r24
    1a54:	25 83       	std	Z+5, r18	; 0x05
	I2C_MASTER_status.busy  = false; // Bus Free
    1a56:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    1a5a:	8e 7f       	andi	r24, 0xFE	; 254
    1a5c:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>
	I2C_MASTER_status.error = I2C_NOERR;
    1a60:	10 92 63 28 	sts	0x2863, r1	; 0x802863 <I2C_MASTER_status+0xb>
	return I2C_RESET; // park the FSM on reset
    1a64:	8e e0       	ldi	r24, 0x0E	; 14
}
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	08 95       	ret

00001a6c <I2C_MASTER_do_I2C_IDLE>:

static i2c_fsm_states_t I2C_MASTER_do_I2C_IDLE(void)
{
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
	I2C_MASTER_status.busy  = false; // Bus Free
    1a74:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    1a78:	8e 7f       	andi	r24, 0xFE	; 254
    1a7a:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>
	I2C_MASTER_status.error = I2C_NOERR;
    1a7e:	10 92 63 28 	sts	0x2863, r1	; 0x802863 <I2C_MASTER_status+0xb>
	return I2C_IDLE; // park the FSM on IDLE
    1a82:	80 e0       	ldi	r24, 0x00	; 0
}
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	08 95       	ret

00001a8a <I2C_MASTER_do_I2C_SEND_RESTART_READ>:

static i2c_fsm_states_t I2C_MASTER_do_I2C_SEND_RESTART_READ(void)
{
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
	return I2C_MASTER_do_I2C_SEND_ADR_READ();
    1a92:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <I2C_MASTER_do_I2C_SEND_ADR_READ>
}
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	08 95       	ret

00001a9c <I2C_MASTER_do_I2C_SEND_RESTART_WRITE>:

static i2c_fsm_states_t I2C_MASTER_do_I2C_SEND_RESTART_WRITE(void)
{
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
	return I2C_MASTER_do_I2C_SEND_ADR_WRITE();
    1aa4:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <I2C_MASTER_do_I2C_SEND_ADR_WRITE>
}
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	08 95       	ret

00001aae <I2C_MASTER_do_I2C_SEND_RESTART>:

static i2c_fsm_states_t I2C_MASTER_do_I2C_SEND_RESTART(void)
{
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
	return I2C_MASTER_do_I2C_SEND_ADR_READ();
    1ab6:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <I2C_MASTER_do_I2C_SEND_ADR_READ>
}
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	08 95       	ret

00001ac0 <I2C_MASTER_do_I2C_SEND_STOP>:

static i2c_fsm_states_t I2C_MASTER_do_I2C_SEND_STOP(void)
{
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
    1ac8:	80 ea       	ldi	r24, 0xA0	; 160
    1aca:	98 e0       	ldi	r25, 0x08	; 8
    1acc:	20 ea       	ldi	r18, 0xA0	; 160
    1ace:	38 e0       	ldi	r19, 0x08	; 8
    1ad0:	f9 01       	movw	r30, r18
    1ad2:	24 81       	ldd	r18, Z+4	; 0x04
    1ad4:	23 60       	ori	r18, 0x03	; 3
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	24 83       	std	Z+4, r18	; 0x04
	return I2C_MASTER_do_I2C_IDLE();
    1ada:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <I2C_MASTER_do_I2C_IDLE>
}
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <I2C_MASTER_do_I2C_DO_ADDRESS_NACK>:

// TODO: probably need 2 addressNACK's one from read and one from write.
//       the do NACK before RESTART or STOP is a special case that a new state simplifies.
static i2c_fsm_states_t I2C_MASTER_do_I2C_DO_ADDRESS_NACK(void)
{
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
	I2C_MASTER_status.addressNACKCheck = 0;
    1aec:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    1af0:	87 7f       	andi	r24, 0xF7	; 247
    1af2:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>
	I2C_MASTER_status.error            = I2C_FAIL;
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	80 93 63 28 	sts	0x2863, r24	; 0x802863 <I2C_MASTER_status+0xb>
	switch (I2C_MASTER_status.callbackTable[i2c_addressNACK](I2C_MASTER_status.callbackPayload[i2c_addressNACK])) {
    1afc:	20 91 68 28 	lds	r18, 0x2868	; 0x802868 <I2C_MASTER_status+0x10>
    1b00:	30 91 69 28 	lds	r19, 0x2869	; 0x802869 <I2C_MASTER_status+0x11>
    1b04:	80 91 74 28 	lds	r24, 0x2874	; 0x802874 <I2C_MASTER_status+0x1c>
    1b08:	90 91 75 28 	lds	r25, 0x2875	; 0x802875 <I2C_MASTER_status+0x1d>
    1b0c:	f9 01       	movw	r30, r18
    1b0e:	09 95       	icall
    1b10:	88 2f       	mov	r24, r24
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	82 30       	cpi	r24, 0x02	; 2
    1b16:	91 05       	cpc	r25, r1
    1b18:	19 f0       	breq	.+6      	; 0x1b20 <I2C_MASTER_do_I2C_DO_ADDRESS_NACK+0x3c>
    1b1a:	03 97       	sbiw	r24, 0x03	; 3
    1b1c:	21 f0       	breq	.+8      	; 0x1b26 <I2C_MASTER_do_I2C_DO_ADDRESS_NACK+0x42>
    1b1e:	06 c0       	rjmp	.+12     	; 0x1b2c <I2C_MASTER_do_I2C_DO_ADDRESS_NACK+0x48>
	case i2c_restart_read:
		return I2C_MASTER_do_I2C_SEND_RESTART_READ();
    1b20:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <I2C_MASTER_do_I2C_SEND_RESTART_READ>
    1b24:	05 c0       	rjmp	.+10     	; 0x1b30 <I2C_MASTER_do_I2C_DO_ADDRESS_NACK+0x4c>
	case i2c_restart_write:
		return I2C_MASTER_do_I2C_SEND_RESTART_WRITE();
    1b26:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <I2C_MASTER_do_I2C_SEND_RESTART_WRITE>
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <I2C_MASTER_do_I2C_DO_ADDRESS_NACK+0x4c>
	default:
		return I2C_MASTER_do_I2C_SEND_STOP();
    1b2c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <I2C_MASTER_do_I2C_SEND_STOP>
	}
}
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	08 95       	ret

00001b36 <I2C_MASTER_do_I2C_SEND_ADR_READ>:

static i2c_fsm_states_t I2C_MASTER_do_I2C_SEND_ADR_READ(void)
{
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62

	I2C_MASTER_status.addressNACKCheck = 1;
    1b3e:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    1b42:	88 60       	ori	r24, 0x08	; 8
    1b44:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>
	TWI0.MADDR                         = I2C_MASTER_status.address << 1 | 1;
    1b48:	80 ea       	ldi	r24, 0xA0	; 160
    1b4a:	98 e0       	ldi	r25, 0x08	; 8
    1b4c:	20 91 59 28 	lds	r18, 0x2859	; 0x802859 <I2C_MASTER_status+0x1>
    1b50:	22 2f       	mov	r18, r18
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	22 0f       	add	r18, r18
    1b56:	33 1f       	adc	r19, r19
    1b58:	21 60       	ori	r18, 0x01	; 1
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	27 83       	std	Z+7, r18	; 0x07
	return I2C_RX;
    1b5e:	84 e0       	ldi	r24, 0x04	; 4
}
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	08 95       	ret

00001b66 <I2C_MASTER_do_I2C_SEND_ADR_WRITE>:

static i2c_fsm_states_t I2C_MASTER_do_I2C_SEND_ADR_WRITE(void)
{
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62

	I2C_MASTER_status.addressNACKCheck = 1;
    1b6e:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    1b72:	88 60       	ori	r24, 0x08	; 8
    1b74:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>
	TWI0.MADDR                         = I2C_MASTER_status.address << 1;
    1b78:	80 ea       	ldi	r24, 0xA0	; 160
    1b7a:	98 e0       	ldi	r25, 0x08	; 8
    1b7c:	20 91 59 28 	lds	r18, 0x2859	; 0x802859 <I2C_MASTER_status+0x1>
    1b80:	22 0f       	add	r18, r18
    1b82:	fc 01       	movw	r30, r24
    1b84:	27 83       	std	Z+7, r18	; 0x07
	return I2C_TX;
    1b86:	83 e0       	ldi	r24, 0x03	; 3
}
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	08 95       	ret

00001b8e <I2C_MASTER_do_I2C_RX_DO_ACK>:

static i2c_fsm_states_t I2C_MASTER_do_I2C_RX_DO_ACK(void)
{
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
	TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);
    1b96:	80 ea       	ldi	r24, 0xA0	; 160
    1b98:	98 e0       	ldi	r25, 0x08	; 8
    1b9a:	20 ea       	ldi	r18, 0xA0	; 160
    1b9c:	38 e0       	ldi	r19, 0x08	; 8
    1b9e:	f9 01       	movw	r30, r18
    1ba0:	24 81       	ldd	r18, Z+4	; 0x04
    1ba2:	2b 7f       	andi	r18, 0xFB	; 251
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	24 83       	std	Z+4, r18	; 0x04
	return I2C_RX;
    1ba8:	84 e0       	ldi	r24, 0x04	; 4
}
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	08 95       	ret

00001bb0 <I2C_MASTER_do_I2C_TX_DO_ACK>:

static i2c_fsm_states_t I2C_MASTER_do_I2C_TX_DO_ACK(void)
{
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
	TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);
    1bb8:	80 ea       	ldi	r24, 0xA0	; 160
    1bba:	98 e0       	ldi	r25, 0x08	; 8
    1bbc:	20 ea       	ldi	r18, 0xA0	; 160
    1bbe:	38 e0       	ldi	r19, 0x08	; 8
    1bc0:	f9 01       	movw	r30, r18
    1bc2:	24 81       	ldd	r18, Z+4	; 0x04
    1bc4:	2b 7f       	andi	r18, 0xFB	; 251
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	24 83       	std	Z+4, r18	; 0x04
	return I2C_TX;
    1bca:	83 e0       	ldi	r24, 0x03	; 3
}
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	08 95       	ret

00001bd2 <I2C_MASTER_do_I2C_DO_NACK_STOP>:

static i2c_fsm_states_t I2C_MASTER_do_I2C_DO_NACK_STOP(void)
{
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    1bda:	80 ea       	ldi	r24, 0xA0	; 160
    1bdc:	98 e0       	ldi	r25, 0x08	; 8
    1bde:	20 ea       	ldi	r18, 0xA0	; 160
    1be0:	38 e0       	ldi	r19, 0x08	; 8
    1be2:	f9 01       	movw	r30, r18
    1be4:	24 81       	ldd	r18, Z+4	; 0x04
    1be6:	24 60       	ori	r18, 0x04	; 4
    1be8:	fc 01       	movw	r30, r24
    1bea:	24 83       	std	Z+4, r18	; 0x04
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
    1bec:	80 ea       	ldi	r24, 0xA0	; 160
    1bee:	98 e0       	ldi	r25, 0x08	; 8
    1bf0:	20 ea       	ldi	r18, 0xA0	; 160
    1bf2:	38 e0       	ldi	r19, 0x08	; 8
    1bf4:	f9 01       	movw	r30, r18
    1bf6:	24 81       	ldd	r18, Z+4	; 0x04
    1bf8:	23 60       	ori	r18, 0x03	; 3
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	24 83       	std	Z+4, r18	; 0x04
	return I2C_MASTER_do_I2C_IDLE();
    1bfe:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <I2C_MASTER_do_I2C_IDLE>
}
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	08 95       	ret

00001c08 <I2C_MASTER_do_I2C_DO_NACK_RESTART>:

static i2c_fsm_states_t I2C_MASTER_do_I2C_DO_NACK_RESTART(void)
{
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    1c10:	80 ea       	ldi	r24, 0xA0	; 160
    1c12:	98 e0       	ldi	r25, 0x08	; 8
    1c14:	20 ea       	ldi	r18, 0xA0	; 160
    1c16:	38 e0       	ldi	r19, 0x08	; 8
    1c18:	f9 01       	movw	r30, r18
    1c1a:	24 81       	ldd	r18, Z+4	; 0x04
    1c1c:	24 60       	ori	r18, 0x04	; 4
    1c1e:	fc 01       	movw	r30, r24
    1c20:	24 83       	std	Z+4, r18	; 0x04
	return I2C_SEND_RESTART;
    1c22:	88 e0       	ldi	r24, 0x08	; 8
}
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	08 95       	ret

00001c2a <I2C_MASTER_do_I2C_TX>:

static i2c_fsm_states_t I2C_MASTER_do_I2C_TX(void)
{
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
	if ((TWI0.MSTATUS & TWI_RXACK_bm)) // Slave replied with NACK
    1c32:	80 ea       	ldi	r24, 0xA0	; 160
    1c34:	98 e0       	ldi	r25, 0x08	; 8
    1c36:	fc 01       	movw	r30, r24
    1c38:	85 81       	ldd	r24, Z+5	; 0x05
    1c3a:	88 2f       	mov	r24, r24
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	80 71       	andi	r24, 0x10	; 16
    1c40:	99 27       	eor	r25, r25
    1c42:	89 2b       	or	r24, r25
    1c44:	d9 f0       	breq	.+54     	; 0x1c7c <I2C_MASTER_do_I2C_TX+0x52>
	{
		switch (I2C_MASTER_status.callbackTable[i2c_dataNACK](I2C_MASTER_status.callbackPayload[i2c_dataNACK])) {
    1c46:	20 91 6a 28 	lds	r18, 0x286A	; 0x80286a <I2C_MASTER_status+0x12>
    1c4a:	30 91 6b 28 	lds	r19, 0x286B	; 0x80286b <I2C_MASTER_status+0x13>
    1c4e:	80 91 76 28 	lds	r24, 0x2876	; 0x802876 <I2C_MASTER_status+0x1e>
    1c52:	90 91 77 28 	lds	r25, 0x2877	; 0x802877 <I2C_MASTER_status+0x1f>
    1c56:	f9 01       	movw	r30, r18
    1c58:	09 95       	icall
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	82 30       	cpi	r24, 0x02	; 2
    1c60:	91 05       	cpc	r25, r1
    1c62:	19 f0       	breq	.+6      	; 0x1c6a <I2C_MASTER_do_I2C_TX+0x40>
    1c64:	03 97       	sbiw	r24, 0x03	; 3
    1c66:	21 f0       	breq	.+8      	; 0x1c70 <I2C_MASTER_do_I2C_TX+0x46>
    1c68:	06 c0       	rjmp	.+12     	; 0x1c76 <I2C_MASTER_do_I2C_TX+0x4c>
		case i2c_restart_read:
			return I2C_MASTER_do_I2C_SEND_RESTART_READ();
    1c6a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <I2C_MASTER_do_I2C_SEND_RESTART_READ>
    1c6e:	2e c0       	rjmp	.+92     	; 0x1ccc <I2C_MASTER_do_I2C_TX+0xa2>
		case i2c_restart_write:
			return I2C_MASTER_do_I2C_SEND_RESTART_WRITE();
    1c70:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <I2C_MASTER_do_I2C_SEND_RESTART_WRITE>
    1c74:	2b c0       	rjmp	.+86     	; 0x1ccc <I2C_MASTER_do_I2C_TX+0xa2>
		default:
		case i2c_continue:
		case i2c_stop:
			return I2C_MASTER_do_I2C_SEND_STOP();
    1c76:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <I2C_MASTER_do_I2C_SEND_STOP>
    1c7a:	28 c0       	rjmp	.+80     	; 0x1ccc <I2C_MASTER_do_I2C_TX+0xa2>
		}
	} else {
		I2C_MASTER_status.addressNACKCheck = 0;
    1c7c:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    1c80:	87 7f       	andi	r24, 0xF7	; 247
    1c82:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>
		TWI0.MDATA                         = *I2C_MASTER_status.data_ptr++;
    1c86:	20 ea       	ldi	r18, 0xA0	; 160
    1c88:	38 e0       	ldi	r19, 0x08	; 8
    1c8a:	80 91 5a 28 	lds	r24, 0x285A	; 0x80285a <I2C_MASTER_status+0x2>
    1c8e:	90 91 5b 28 	lds	r25, 0x285B	; 0x80285b <I2C_MASTER_status+0x3>
    1c92:	ac 01       	movw	r20, r24
    1c94:	4f 5f       	subi	r20, 0xFF	; 255
    1c96:	5f 4f       	sbci	r21, 0xFF	; 255
    1c98:	40 93 5a 28 	sts	0x285A, r20	; 0x80285a <I2C_MASTER_status+0x2>
    1c9c:	50 93 5b 28 	sts	0x285B, r21	; 0x80285b <I2C_MASTER_status+0x3>
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	80 81       	ld	r24, Z
    1ca4:	f9 01       	movw	r30, r18
    1ca6:	80 87       	std	Z+8, r24	; 0x08
		return (--I2C_MASTER_status.data_length) ? I2C_TX : I2C_TX_EMPTY;
    1ca8:	80 91 5c 28 	lds	r24, 0x285C	; 0x80285c <I2C_MASTER_status+0x4>
    1cac:	90 91 5d 28 	lds	r25, 0x285D	; 0x80285d <I2C_MASTER_status+0x5>
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <I2C_MASTER_status+0x4>
    1cb6:	90 93 5d 28 	sts	0x285D, r25	; 0x80285d <I2C_MASTER_status+0x5>
    1cba:	80 91 5c 28 	lds	r24, 0x285C	; 0x80285c <I2C_MASTER_status+0x4>
    1cbe:	90 91 5d 28 	lds	r25, 0x285D	; 0x80285d <I2C_MASTER_status+0x5>
    1cc2:	89 2b       	or	r24, r25
    1cc4:	11 f0       	breq	.+4      	; 0x1cca <I2C_MASTER_do_I2C_TX+0xa0>
    1cc6:	83 e0       	ldi	r24, 0x03	; 3
    1cc8:	01 c0       	rjmp	.+2      	; 0x1ccc <I2C_MASTER_do_I2C_TX+0xa2>
    1cca:	85 e0       	ldi	r24, 0x05	; 5
	}
}
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	08 95       	ret

00001cd2 <I2C_MASTER_do_I2C_RX>:

static i2c_fsm_states_t I2C_MASTER_do_I2C_RX(void)
{
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
	I2C_MASTER_status.addressNACKCheck = 0;
    1cda:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    1cde:	87 7f       	andi	r24, 0xF7	; 247
    1ce0:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>

	if (I2C_MASTER_status.data_length == 1)
    1ce4:	80 91 5c 28 	lds	r24, 0x285C	; 0x80285c <I2C_MASTER_status+0x4>
    1ce8:	90 91 5d 28 	lds	r25, 0x285D	; 0x80285d <I2C_MASTER_status+0x5>
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	51 f4       	brne	.+20     	; 0x1d04 <I2C_MASTER_do_I2C_RX+0x32>
		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc; // Next byte will be last to be received, setup NACK
    1cf0:	80 ea       	ldi	r24, 0xA0	; 160
    1cf2:	98 e0       	ldi	r25, 0x08	; 8
    1cf4:	20 ea       	ldi	r18, 0xA0	; 160
    1cf6:	38 e0       	ldi	r19, 0x08	; 8
    1cf8:	f9 01       	movw	r30, r18
    1cfa:	24 81       	ldd	r18, Z+4	; 0x04
    1cfc:	24 60       	ori	r18, 0x04	; 4
    1cfe:	fc 01       	movw	r30, r24
    1d00:	24 83       	std	Z+4, r18	; 0x04
    1d02:	09 c0       	rjmp	.+18     	; 0x1d16 <I2C_MASTER_do_I2C_RX+0x44>
	else
		TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp); // More bytes to receive, setup ACK
    1d04:	80 ea       	ldi	r24, 0xA0	; 160
    1d06:	98 e0       	ldi	r25, 0x08	; 8
    1d08:	20 ea       	ldi	r18, 0xA0	; 160
    1d0a:	38 e0       	ldi	r19, 0x08	; 8
    1d0c:	f9 01       	movw	r30, r18
    1d0e:	24 81       	ldd	r18, Z+4	; 0x04
    1d10:	2b 7f       	andi	r18, 0xFB	; 251
    1d12:	fc 01       	movw	r30, r24
    1d14:	24 83       	std	Z+4, r18	; 0x04

	if (--I2C_MASTER_status.data_length) {
    1d16:	80 91 5c 28 	lds	r24, 0x285C	; 0x80285c <I2C_MASTER_status+0x4>
    1d1a:	90 91 5d 28 	lds	r25, 0x285D	; 0x80285d <I2C_MASTER_status+0x5>
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <I2C_MASTER_status+0x4>
    1d24:	90 93 5d 28 	sts	0x285D, r25	; 0x80285d <I2C_MASTER_status+0x5>
    1d28:	80 91 5c 28 	lds	r24, 0x285C	; 0x80285c <I2C_MASTER_status+0x4>
    1d2c:	90 91 5d 28 	lds	r25, 0x285D	; 0x80285d <I2C_MASTER_status+0x5>
    1d30:	89 2b       	or	r24, r25
    1d32:	f1 f0       	breq	.+60     	; 0x1d70 <I2C_MASTER_do_I2C_RX+0x9e>
		*I2C_MASTER_status.data_ptr = TWI0.MDATA;
    1d34:	80 91 5a 28 	lds	r24, 0x285A	; 0x80285a <I2C_MASTER_status+0x2>
    1d38:	90 91 5b 28 	lds	r25, 0x285B	; 0x80285b <I2C_MASTER_status+0x3>
    1d3c:	20 ea       	ldi	r18, 0xA0	; 160
    1d3e:	38 e0       	ldi	r19, 0x08	; 8
    1d40:	f9 01       	movw	r30, r18
    1d42:	20 85       	ldd	r18, Z+8	; 0x08
    1d44:	fc 01       	movw	r30, r24
    1d46:	20 83       	st	Z, r18
		I2C_MASTER_status.data_ptr++;
    1d48:	80 91 5a 28 	lds	r24, 0x285A	; 0x80285a <I2C_MASTER_status+0x2>
    1d4c:	90 91 5b 28 	lds	r25, 0x285B	; 0x80285b <I2C_MASTER_status+0x3>
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	80 93 5a 28 	sts	0x285A, r24	; 0x80285a <I2C_MASTER_status+0x2>
    1d56:	90 93 5b 28 	sts	0x285B, r25	; 0x80285b <I2C_MASTER_status+0x3>
		TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;
    1d5a:	80 ea       	ldi	r24, 0xA0	; 160
    1d5c:	98 e0       	ldi	r25, 0x08	; 8
    1d5e:	20 ea       	ldi	r18, 0xA0	; 160
    1d60:	38 e0       	ldi	r19, 0x08	; 8
    1d62:	f9 01       	movw	r30, r18
    1d64:	24 81       	ldd	r18, Z+4	; 0x04
    1d66:	22 60       	ori	r18, 0x02	; 2
    1d68:	fc 01       	movw	r30, r24
    1d6a:	24 83       	std	Z+4, r18	; 0x04
		return I2C_RX;
    1d6c:	84 e0       	ldi	r24, 0x04	; 4
    1d6e:	2c c0       	rjmp	.+88     	; 0x1dc8 <I2C_MASTER_do_I2C_RX+0xf6>
	} else {
		*I2C_MASTER_status.data_ptr = TWI0.MDATA;
    1d70:	80 91 5a 28 	lds	r24, 0x285A	; 0x80285a <I2C_MASTER_status+0x2>
    1d74:	90 91 5b 28 	lds	r25, 0x285B	; 0x80285b <I2C_MASTER_status+0x3>
    1d78:	20 ea       	ldi	r18, 0xA0	; 160
    1d7a:	38 e0       	ldi	r19, 0x08	; 8
    1d7c:	f9 01       	movw	r30, r18
    1d7e:	20 85       	ldd	r18, Z+8	; 0x08
    1d80:	fc 01       	movw	r30, r24
    1d82:	20 83       	st	Z, r18
		I2C_MASTER_status.data_ptr++;
    1d84:	80 91 5a 28 	lds	r24, 0x285A	; 0x80285a <I2C_MASTER_status+0x2>
    1d88:	90 91 5b 28 	lds	r25, 0x285B	; 0x80285b <I2C_MASTER_status+0x3>
    1d8c:	01 96       	adiw	r24, 0x01	; 1
    1d8e:	80 93 5a 28 	sts	0x285A, r24	; 0x80285a <I2C_MASTER_status+0x2>
    1d92:	90 93 5b 28 	sts	0x285B, r25	; 0x80285b <I2C_MASTER_status+0x3>
		I2C_MASTER_status.bufferFree = true;
    1d96:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    1d9a:	84 60       	ori	r24, 0x04	; 4
    1d9c:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>
		switch (
		    I2C_MASTER_status.callbackTable[i2c_dataComplete](I2C_MASTER_status.callbackPayload[i2c_dataComplete])) {
    1da0:	20 91 64 28 	lds	r18, 0x2864	; 0x802864 <I2C_MASTER_status+0xc>
    1da4:	30 91 65 28 	lds	r19, 0x2865	; 0x802865 <I2C_MASTER_status+0xd>
    1da8:	80 91 70 28 	lds	r24, 0x2870	; 0x802870 <I2C_MASTER_status+0x18>
    1dac:	90 91 71 28 	lds	r25, 0x2871	; 0x802871 <I2C_MASTER_status+0x19>
    1db0:	f9 01       	movw	r30, r18
    1db2:	09 95       	icall
		return I2C_RX;
	} else {
		*I2C_MASTER_status.data_ptr = TWI0.MDATA;
		I2C_MASTER_status.data_ptr++;
		I2C_MASTER_status.bufferFree = true;
		switch (
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	02 97       	sbiw	r24, 0x02	; 2
    1dba:	02 97       	sbiw	r24, 0x02	; 2
    1dbc:	18 f4       	brcc	.+6      	; 0x1dc4 <I2C_MASTER_do_I2C_RX+0xf2>
		    I2C_MASTER_status.callbackTable[i2c_dataComplete](I2C_MASTER_status.callbackPayload[i2c_dataComplete])) {
		case i2c_restart_write:
		case i2c_restart_read:
			return I2C_MASTER_do_I2C_DO_NACK_RESTART();
    1dbe:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <I2C_MASTER_do_I2C_DO_NACK_RESTART>
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <I2C_MASTER_do_I2C_RX+0xf6>
		default:
		case i2c_continue:
		case i2c_stop:
			return I2C_MASTER_do_I2C_DO_NACK_STOP();
    1dc4:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <I2C_MASTER_do_I2C_DO_NACK_STOP>
		}
	}
}
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	08 95       	ret

00001dce <I2C_MASTER_do_I2C_TX_EMPTY>:

static i2c_fsm_states_t I2C_MASTER_do_I2C_TX_EMPTY(void)
{
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
	if ((TWI0.MSTATUS & TWI_RXACK_bm)) // Slave replied with NACK
    1dd6:	80 ea       	ldi	r24, 0xA0	; 160
    1dd8:	98 e0       	ldi	r25, 0x08	; 8
    1dda:	fc 01       	movw	r30, r24
    1ddc:	85 81       	ldd	r24, Z+5	; 0x05
    1dde:	88 2f       	mov	r24, r24
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	80 71       	andi	r24, 0x10	; 16
    1de4:	99 27       	eor	r25, r25
    1de6:	89 2b       	or	r24, r25
    1de8:	d9 f0       	breq	.+54     	; 0x1e20 <I2C_MASTER_do_I2C_TX_EMPTY+0x52>
	{
		switch (I2C_MASTER_status.callbackTable[i2c_dataNACK](I2C_MASTER_status.callbackPayload[i2c_dataNACK])) {
    1dea:	20 91 6a 28 	lds	r18, 0x286A	; 0x80286a <I2C_MASTER_status+0x12>
    1dee:	30 91 6b 28 	lds	r19, 0x286B	; 0x80286b <I2C_MASTER_status+0x13>
    1df2:	80 91 76 28 	lds	r24, 0x2876	; 0x802876 <I2C_MASTER_status+0x1e>
    1df6:	90 91 77 28 	lds	r25, 0x2877	; 0x802877 <I2C_MASTER_status+0x1f>
    1dfa:	f9 01       	movw	r30, r18
    1dfc:	09 95       	icall
    1dfe:	88 2f       	mov	r24, r24
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	82 30       	cpi	r24, 0x02	; 2
    1e04:	91 05       	cpc	r25, r1
    1e06:	19 f0       	breq	.+6      	; 0x1e0e <I2C_MASTER_do_I2C_TX_EMPTY+0x40>
    1e08:	03 97       	sbiw	r24, 0x03	; 3
    1e0a:	21 f0       	breq	.+8      	; 0x1e14 <I2C_MASTER_do_I2C_TX_EMPTY+0x46>
    1e0c:	06 c0       	rjmp	.+12     	; 0x1e1a <I2C_MASTER_do_I2C_TX_EMPTY+0x4c>
		case i2c_restart_read:
			return I2C_MASTER_do_I2C_SEND_RESTART_READ();
    1e0e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <I2C_MASTER_do_I2C_SEND_RESTART_READ>
    1e12:	2a c0       	rjmp	.+84     	; 0x1e68 <I2C_MASTER_do_I2C_TX_EMPTY+0x9a>
		case i2c_restart_write:
			return I2C_MASTER_do_I2C_SEND_RESTART_WRITE();
    1e14:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <I2C_MASTER_do_I2C_SEND_RESTART_WRITE>
    1e18:	27 c0       	rjmp	.+78     	; 0x1e68 <I2C_MASTER_do_I2C_TX_EMPTY+0x9a>
		default:
		case i2c_continue:
		case i2c_stop:
			return I2C_MASTER_do_I2C_SEND_STOP();
    1e1a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <I2C_MASTER_do_I2C_SEND_STOP>
    1e1e:	24 c0       	rjmp	.+72     	; 0x1e68 <I2C_MASTER_do_I2C_TX_EMPTY+0x9a>
		}
	} else {
		I2C_MASTER_status.bufferFree = true;
    1e20:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    1e24:	84 60       	ori	r24, 0x04	; 4
    1e26:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>
		switch (
		    I2C_MASTER_status.callbackTable[i2c_dataComplete](I2C_MASTER_status.callbackPayload[i2c_dataComplete])) {
    1e2a:	20 91 64 28 	lds	r18, 0x2864	; 0x802864 <I2C_MASTER_status+0xc>
    1e2e:	30 91 65 28 	lds	r19, 0x2865	; 0x802865 <I2C_MASTER_status+0xd>
    1e32:	80 91 70 28 	lds	r24, 0x2870	; 0x802870 <I2C_MASTER_status+0x18>
    1e36:	90 91 71 28 	lds	r25, 0x2871	; 0x802871 <I2C_MASTER_status+0x19>
    1e3a:	f9 01       	movw	r30, r18
    1e3c:	09 95       	icall
		case i2c_stop:
			return I2C_MASTER_do_I2C_SEND_STOP();
		}
	} else {
		I2C_MASTER_status.bufferFree = true;
		switch (
    1e3e:	88 2f       	mov	r24, r24
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	83 30       	cpi	r24, 0x03	; 3
    1e44:	91 05       	cpc	r25, r1
    1e46:	41 f0       	breq	.+16     	; 0x1e58 <I2C_MASTER_do_I2C_TX_EMPTY+0x8a>
    1e48:	84 30       	cpi	r24, 0x04	; 4
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	41 f0       	breq	.+16     	; 0x1e5e <I2C_MASTER_do_I2C_TX_EMPTY+0x90>
    1e4e:	02 97       	sbiw	r24, 0x02	; 2
    1e50:	49 f4       	brne	.+18     	; 0x1e64 <I2C_MASTER_do_I2C_TX_EMPTY+0x96>
		    I2C_MASTER_status.callbackTable[i2c_dataComplete](I2C_MASTER_status.callbackPayload[i2c_dataComplete])) {
		case i2c_restart_read:
			return I2C_MASTER_do_I2C_SEND_RESTART_READ();
    1e52:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <I2C_MASTER_do_I2C_SEND_RESTART_READ>
    1e56:	08 c0       	rjmp	.+16     	; 0x1e68 <I2C_MASTER_do_I2C_TX_EMPTY+0x9a>
		case i2c_restart_write:
			return I2C_MASTER_do_I2C_SEND_RESTART_WRITE();
    1e58:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <I2C_MASTER_do_I2C_SEND_RESTART_WRITE>
    1e5c:	05 c0       	rjmp	.+10     	; 0x1e68 <I2C_MASTER_do_I2C_TX_EMPTY+0x9a>
		case i2c_continue:
			return I2C_MASTER_do_I2C_TX();
    1e5e:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <I2C_MASTER_do_I2C_TX>
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <I2C_MASTER_do_I2C_TX_EMPTY+0x9a>
		default:
		case i2c_stop:
			return I2C_MASTER_do_I2C_SEND_STOP();
    1e64:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <I2C_MASTER_do_I2C_SEND_STOP>
		}
	}
}
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	08 95       	ret

00001e6e <I2C_MASTER_do_I2C_BUS_COLLISION>:

static i2c_fsm_states_t I2C_MASTER_do_I2C_BUS_COLLISION(void)
{
    1e6e:	cf 93       	push	r28
    1e70:	df 93       	push	r29
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
	// Clear bus collision status flag
	TWI0.MSTATUS |= TWI_ARBLOST_bm;
    1e76:	80 ea       	ldi	r24, 0xA0	; 160
    1e78:	98 e0       	ldi	r25, 0x08	; 8
    1e7a:	20 ea       	ldi	r18, 0xA0	; 160
    1e7c:	38 e0       	ldi	r19, 0x08	; 8
    1e7e:	f9 01       	movw	r30, r18
    1e80:	25 81       	ldd	r18, Z+5	; 0x05
    1e82:	28 60       	ori	r18, 0x08	; 8
    1e84:	fc 01       	movw	r30, r24
    1e86:	25 83       	std	Z+5, r18	; 0x05
	;
	I2C_MASTER_status.error = I2C_FAIL;
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	80 93 63 28 	sts	0x2863, r24	; 0x802863 <I2C_MASTER_status+0xb>
	switch (
	    I2C_MASTER_status.callbackTable[i2c_writeCollision](I2C_MASTER_status.callbackPayload[i2c_writeCollision])) {
    1e8e:	20 91 66 28 	lds	r18, 0x2866	; 0x802866 <I2C_MASTER_status+0xe>
    1e92:	30 91 67 28 	lds	r19, 0x2867	; 0x802867 <I2C_MASTER_status+0xf>
    1e96:	80 91 72 28 	lds	r24, 0x2872	; 0x802872 <I2C_MASTER_status+0x1a>
    1e9a:	90 91 73 28 	lds	r25, 0x2873	; 0x802873 <I2C_MASTER_status+0x1b>
    1e9e:	f9 01       	movw	r30, r18
    1ea0:	09 95       	icall
{
	// Clear bus collision status flag
	TWI0.MSTATUS |= TWI_ARBLOST_bm;
	;
	I2C_MASTER_status.error = I2C_FAIL;
	switch (
    1ea2:	88 2f       	mov	r24, r24
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	82 30       	cpi	r24, 0x02	; 2
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	19 f0       	breq	.+6      	; 0x1eb2 <I2C_MASTER_do_I2C_BUS_COLLISION+0x44>
    1eac:	03 97       	sbiw	r24, 0x03	; 3
    1eae:	21 f0       	breq	.+8      	; 0x1eb8 <I2C_MASTER_do_I2C_BUS_COLLISION+0x4a>
    1eb0:	06 c0       	rjmp	.+12     	; 0x1ebe <I2C_MASTER_do_I2C_BUS_COLLISION+0x50>
	    I2C_MASTER_status.callbackTable[i2c_writeCollision](I2C_MASTER_status.callbackPayload[i2c_writeCollision])) {
	case i2c_restart_read:
		return I2C_MASTER_do_I2C_SEND_RESTART_READ();
    1eb2:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <I2C_MASTER_do_I2C_SEND_RESTART_READ>
    1eb6:	05 c0       	rjmp	.+10     	; 0x1ec2 <I2C_MASTER_do_I2C_BUS_COLLISION+0x54>
	case i2c_restart_write:
		return I2C_MASTER_do_I2C_SEND_RESTART_WRITE();
    1eb8:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <I2C_MASTER_do_I2C_SEND_RESTART_WRITE>
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <I2C_MASTER_do_I2C_BUS_COLLISION+0x54>
	default:
		return I2C_MASTER_do_I2C_RESET();
    1ebe:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <I2C_MASTER_do_I2C_RESET>
	}
}
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	08 95       	ret

00001ec8 <I2C_MASTER_do_I2C_BUS_ERROR>:

static i2c_fsm_states_t I2C_MASTER_do_I2C_BUS_ERROR(void)
{
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
	TWI0.MCTRLB |= TWI_FLUSH_bm;
    1ed0:	80 ea       	ldi	r24, 0xA0	; 160
    1ed2:	98 e0       	ldi	r25, 0x08	; 8
    1ed4:	20 ea       	ldi	r18, 0xA0	; 160
    1ed6:	38 e0       	ldi	r19, 0x08	; 8
    1ed8:	f9 01       	movw	r30, r18
    1eda:	24 81       	ldd	r18, Z+4	; 0x04
    1edc:	28 60       	ori	r18, 0x08	; 8
    1ede:	fc 01       	movw	r30, r24
    1ee0:	24 83       	std	Z+4, r18	; 0x04
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;
    1ee2:	80 ea       	ldi	r24, 0xA0	; 160
    1ee4:	98 e0       	ldi	r25, 0x08	; 8
    1ee6:	20 ea       	ldi	r18, 0xA0	; 160
    1ee8:	38 e0       	ldi	r19, 0x08	; 8
    1eea:	f9 01       	movw	r30, r18
    1eec:	25 81       	ldd	r18, Z+5	; 0x05
    1eee:	21 60       	ori	r18, 0x01	; 1
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	25 83       	std	Z+5, r18	; 0x05
	I2C_MASTER_status.busy  = false;
    1ef4:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    1ef8:	8e 7f       	andi	r24, 0xFE	; 254
    1efa:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <I2C_MASTER_status>
	I2C_MASTER_status.error = I2C_FAIL;
    1efe:	82 e0       	ldi	r24, 0x02	; 2
    1f00:	80 93 63 28 	sts	0x2863, r24	; 0x802863 <I2C_MASTER_status+0xb>
	return I2C_RESET; // park the FSM on reset
    1f04:	8e e0       	ldi	r24, 0x0E	; 14
}
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	08 95       	ret

00001f0c <__vector_15>:
    I2C_MASTER_do_I2C_BUS_COLLISION,      // I2C_BUS_COLLISION
    I2C_MASTER_do_I2C_BUS_ERROR           // I2C_BUS_ERROR
};

ISR(TWI0_TWIM_vect)
{
    1f0c:	1f 92       	push	r1
    1f0e:	0f 92       	push	r0
    1f10:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1f14:	0f 92       	push	r0
    1f16:	11 24       	eor	r1, r1
    1f18:	2f 93       	push	r18
    1f1a:	3f 93       	push	r19
    1f1c:	4f 93       	push	r20
    1f1e:	5f 93       	push	r21
    1f20:	6f 93       	push	r22
    1f22:	7f 93       	push	r23
    1f24:	8f 93       	push	r24
    1f26:	9f 93       	push	r25
    1f28:	af 93       	push	r26
    1f2a:	bf 93       	push	r27
    1f2c:	ef 93       	push	r30
    1f2e:	ff 93       	push	r31
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
	I2C_MASTER_master_isr();
    1f38:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <I2C_MASTER_master_isr>
}
    1f3c:	00 00       	nop
    1f3e:	df 91       	pop	r29
    1f40:	cf 91       	pop	r28
    1f42:	ff 91       	pop	r31
    1f44:	ef 91       	pop	r30
    1f46:	bf 91       	pop	r27
    1f48:	af 91       	pop	r26
    1f4a:	9f 91       	pop	r25
    1f4c:	8f 91       	pop	r24
    1f4e:	7f 91       	pop	r23
    1f50:	6f 91       	pop	r22
    1f52:	5f 91       	pop	r21
    1f54:	4f 91       	pop	r20
    1f56:	3f 91       	pop	r19
    1f58:	2f 91       	pop	r18
    1f5a:	0f 90       	pop	r0
    1f5c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    1f60:	0f 90       	pop	r0
    1f62:	1f 90       	pop	r1
    1f64:	18 95       	reti

00001f66 <I2C_MASTER_master_isr>:

void I2C_MASTER_master_isr(void)
{
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
	TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);
    1f6e:	80 ea       	ldi	r24, 0xA0	; 160
    1f70:	98 e0       	ldi	r25, 0x08	; 8
    1f72:	20 ea       	ldi	r18, 0xA0	; 160
    1f74:	38 e0       	ldi	r19, 0x08	; 8
    1f76:	f9 01       	movw	r30, r18
    1f78:	25 81       	ldd	r18, Z+5	; 0x05
    1f7a:	20 6c       	ori	r18, 0xC0	; 192
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	25 83       	std	Z+5, r18	; 0x05

	// NOTE: We are ignoring the Write Collision flag.

	// Address phase received NACK from slave, override next state
	if (I2C_MASTER_status.addressNACKCheck && (TWI0.MSTATUS & TWI_RXACK_bm)) {
    1f80:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <I2C_MASTER_status>
    1f84:	88 70       	andi	r24, 0x08	; 8
    1f86:	88 23       	and	r24, r24
    1f88:	69 f0       	breq	.+26     	; 0x1fa4 <I2C_MASTER_master_isr+0x3e>
    1f8a:	80 ea       	ldi	r24, 0xA0	; 160
    1f8c:	98 e0       	ldi	r25, 0x08	; 8
    1f8e:	fc 01       	movw	r30, r24
    1f90:	85 81       	ldd	r24, Z+5	; 0x05
    1f92:	88 2f       	mov	r24, r24
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	80 71       	andi	r24, 0x10	; 16
    1f98:	99 27       	eor	r25, r25
    1f9a:	89 2b       	or	r24, r25
    1f9c:	19 f0       	breq	.+6      	; 0x1fa4 <I2C_MASTER_master_isr+0x3e>
		I2C_MASTER_status.state = I2C_ADDRESS_NACK; // State Override
    1f9e:	8f e0       	ldi	r24, 0x0F	; 15
    1fa0:	80 93 62 28 	sts	0x2862, r24	; 0x802862 <I2C_MASTER_status+0xa>
	}

	// Bus arbitration lost to another master, override next state
	if (TWI0.MSTATUS & TWI_ARBLOST_bm) {
    1fa4:	80 ea       	ldi	r24, 0xA0	; 160
    1fa6:	98 e0       	ldi	r25, 0x08	; 8
    1fa8:	fc 01       	movw	r30, r24
    1faa:	85 81       	ldd	r24, Z+5	; 0x05
    1fac:	88 2f       	mov	r24, r24
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	88 70       	andi	r24, 0x08	; 8
    1fb2:	99 27       	eor	r25, r25
    1fb4:	89 2b       	or	r24, r25
    1fb6:	19 f0       	breq	.+6      	; 0x1fbe <I2C_MASTER_master_isr+0x58>
		I2C_MASTER_status.state = I2C_BUS_COLLISION; // State Override
    1fb8:	80 e1       	ldi	r24, 0x10	; 16
    1fba:	80 93 62 28 	sts	0x2862, r24	; 0x802862 <I2C_MASTER_status+0xa>
	}

	// Bus error, override next state
	if (TWI0.MSTATUS & TWI_BUSERR_bm) {
    1fbe:	80 ea       	ldi	r24, 0xA0	; 160
    1fc0:	98 e0       	ldi	r25, 0x08	; 8
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	85 81       	ldd	r24, Z+5	; 0x05
    1fc6:	88 2f       	mov	r24, r24
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	84 70       	andi	r24, 0x04	; 4
    1fcc:	99 27       	eor	r25, r25
    1fce:	89 2b       	or	r24, r25
    1fd0:	19 f0       	breq	.+6      	; 0x1fd8 <I2C_MASTER_master_isr+0x72>
		I2C_MASTER_status.state = I2C_BUS_ERROR; // State Override
    1fd2:	81 e1       	ldi	r24, 0x11	; 17
    1fd4:	80 93 62 28 	sts	0x2862, r24	; 0x802862 <I2C_MASTER_status+0xa>
	}

	I2C_MASTER_status.state = I2C_MASTER_fsmStateTable[I2C_MASTER_status.state]();
    1fd8:	80 91 62 28 	lds	r24, 0x2862	; 0x802862 <I2C_MASTER_status+0xa>
    1fdc:	88 2f       	mov	r24, r24
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	80 50       	subi	r24, 0x00	; 0
    1fe6:	98 4d       	sbci	r25, 0xD8	; 216
    1fe8:	fc 01       	movw	r30, r24
    1fea:	80 81       	ld	r24, Z
    1fec:	91 81       	ldd	r25, Z+1	; 0x01
    1fee:	fc 01       	movw	r30, r24
    1ff0:	09 95       	icall
    1ff2:	80 93 62 28 	sts	0x2862, r24	; 0x802862 <I2C_MASTER_status+0xa>
}
    1ff6:	00 00       	nop
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	08 95       	ret

00001ffe <I2C_MASTER_return_stop>:

/************************************************************************/
/* Helper Functions                                                     */
/************************************************************************/
static i2c_operations_t I2C_MASTER_return_stop(void *p)
{
    1ffe:	cf 93       	push	r28
    2000:	df 93       	push	r29
    2002:	00 d0       	rcall	.+0      	; 0x2004 <I2C_MASTER_return_stop+0x6>
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	9a 83       	std	Y+2, r25	; 0x02
	return i2c_stop;
    200c:	81 e0       	ldi	r24, 0x01	; 1
}
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	08 95       	ret

00002018 <I2C_MASTER_return_reset>:

static i2c_operations_t I2C_MASTER_return_reset(void *p)
{
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	00 d0       	rcall	.+0      	; 0x201e <I2C_MASTER_return_reset+0x6>
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	9a 83       	std	Y+2, r25	; 0x02
	return i2c_reset_link;
    2026:	85 e0       	ldi	r24, 0x05	; 5
}
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	08 95       	ret

00002032 <I2C_MASTER_set_callback>:

static void I2C_MASTER_set_callback(i2c_callback_index idx, i2c_callback cb, void *p)
{
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	25 97       	sbiw	r28, 0x05	; 5
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	6a 83       	std	Y+2, r22	; 0x02
    2044:	7b 83       	std	Y+3, r23	; 0x03
    2046:	4c 83       	std	Y+4, r20	; 0x04
    2048:	5d 83       	std	Y+5, r21	; 0x05
	if (cb) {
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	9b 81       	ldd	r25, Y+3	; 0x03
    204e:	89 2b       	or	r24, r25
    2050:	d9 f0       	breq	.+54     	; 0x2088 <I2C_MASTER_set_callback+0x56>
		I2C_MASTER_status.callbackTable[idx]   = cb;
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	88 2f       	mov	r24, r24
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	06 96       	adiw	r24, 0x06	; 6
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	88 5a       	subi	r24, 0xA8	; 168
    2060:	97 4d       	sbci	r25, 0xD7	; 215
    2062:	2a 81       	ldd	r18, Y+2	; 0x02
    2064:	3b 81       	ldd	r19, Y+3	; 0x03
    2066:	fc 01       	movw	r30, r24
    2068:	20 83       	st	Z, r18
    206a:	31 83       	std	Z+1, r19	; 0x01
		I2C_MASTER_status.callbackPayload[idx] = p;
    206c:	89 81       	ldd	r24, Y+1	; 0x01
    206e:	88 2f       	mov	r24, r24
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	0c 96       	adiw	r24, 0x0c	; 12
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	88 5a       	subi	r24, 0xA8	; 168
    207a:	97 4d       	sbci	r25, 0xD7	; 215
    207c:	2c 81       	ldd	r18, Y+4	; 0x04
    207e:	3d 81       	ldd	r19, Y+5	; 0x05
    2080:	fc 01       	movw	r30, r24
    2082:	20 83       	st	Z, r18
    2084:	31 83       	std	Z+1, r19	; 0x01
	} else {
		I2C_MASTER_status.callbackTable[idx]   = I2C_MASTER_return_stop;
		I2C_MASTER_status.callbackPayload[idx] = NULL;
	}
}
    2086:	18 c0       	rjmp	.+48     	; 0x20b8 <I2C_MASTER_set_callback+0x86>
{
	if (cb) {
		I2C_MASTER_status.callbackTable[idx]   = cb;
		I2C_MASTER_status.callbackPayload[idx] = p;
	} else {
		I2C_MASTER_status.callbackTable[idx]   = I2C_MASTER_return_stop;
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	06 96       	adiw	r24, 0x06	; 6
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	88 5a       	subi	r24, 0xA8	; 168
    2096:	97 4d       	sbci	r25, 0xD7	; 215
    2098:	2f ef       	ldi	r18, 0xFF	; 255
    209a:	3f e0       	ldi	r19, 0x0F	; 15
    209c:	fc 01       	movw	r30, r24
    209e:	20 83       	st	Z, r18
    20a0:	31 83       	std	Z+1, r19	; 0x01
		I2C_MASTER_status.callbackPayload[idx] = NULL;
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0c 96       	adiw	r24, 0x0c	; 12
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	88 5a       	subi	r24, 0xA8	; 168
    20b0:	97 4d       	sbci	r25, 0xD7	; 215
    20b2:	fc 01       	movw	r30, r24
    20b4:	10 82       	st	Z, r1
    20b6:	11 82       	std	Z+1, r1	; 0x01
	}
}
    20b8:	00 00       	nop
    20ba:	25 96       	adiw	r28, 0x05	; 5
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	08 95       	ret

000020c6 <I2C_MASTER_writeNBytes>:
	I2C_MASTER_set_buffer(&reg, 1);
	I2C_MASTER_set_address_nack_callback(i2c_cb_restart_write, NULL); // NACK polling?
	I2C_MASTER_master_write();
	while (I2C_BUSY == I2C_MASTER_close())
		; // sit here until finished.
}
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	25 97       	sbiw	r28, 0x05	; 5
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	6a 83       	std	Y+2, r22	; 0x02
    20d8:	7b 83       	std	Y+3, r23	; 0x03
    20da:	4c 83       	std	Y+4, r20	; 0x04
    20dc:	5d 83       	std	Y+5, r21	; 0x05
    20de:	00 00       	nop
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <I2C_MASTER_open>
    20e6:	88 23       	and	r24, r24
    20e8:	d9 f3       	breq	.-10     	; 0x20e0 <I2C_MASTER_writeNBytes+0x1a>
    20ea:	2c 81       	ldd	r18, Y+4	; 0x04
    20ec:	3d 81       	ldd	r19, Y+5	; 0x05
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	9b 81       	ldd	r25, Y+3	; 0x03
    20f2:	b9 01       	movw	r22, r18
    20f4:	0e 94 b5 0c 	call	0x196a	; 0x196a <I2C_MASTER_set_buffer>
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	70 e0       	ldi	r23, 0x00	; 0
    20fc:	87 eb       	ldi	r24, 0xB7	; 183
    20fe:	90 e1       	ldi	r25, 0x10	; 16
    2100:	0e 94 be 0b 	call	0x177c	; 0x177c <I2C_MASTER_set_address_nack_callback>
    2104:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <I2C_MASTER_master_write>
    2108:	00 00       	nop
    210a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <I2C_MASTER_close>
    210e:	81 30       	cpi	r24, 0x01	; 1
    2110:	e1 f3       	breq	.-8      	; 0x210a <I2C_MASTER_writeNBytes+0x44>
    2112:	00 00       	nop
    2114:	25 96       	adiw	r28, 0x05	; 5
    2116:	cd bf       	out	0x3d, r28	; 61
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	08 95       	ret

00002120 <I2C_MASTER_readNBytes>:

void I2C_MASTER_readNBytes(i2c_address_t address, void *data, size_t len)
{
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	25 97       	sbiw	r28, 0x05	; 5
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	6a 83       	std	Y+2, r22	; 0x02
    2132:	7b 83       	std	Y+3, r23	; 0x03
    2134:	4c 83       	std	Y+4, r20	; 0x04
    2136:	5d 83       	std	Y+5, r21	; 0x05
	while (!I2C_MASTER_open(address))
    2138:	00 00       	nop
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <I2C_MASTER_open>
    2140:	88 23       	and	r24, r24
    2142:	d9 f3       	breq	.-10     	; 0x213a <I2C_MASTER_readNBytes+0x1a>
		; // sit here until we get the bus..
	I2C_MASTER_set_buffer(data, len);
    2144:	2c 81       	ldd	r18, Y+4	; 0x04
    2146:	3d 81       	ldd	r19, Y+5	; 0x05
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	9b 81       	ldd	r25, Y+3	; 0x03
    214c:	b9 01       	movw	r22, r18
    214e:	0e 94 b5 0c 	call	0x196a	; 0x196a <I2C_MASTER_set_buffer>
	I2C_MASTER_master_read();
    2152:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <I2C_MASTER_master_read>
	while (I2C_BUSY == I2C_MASTER_close())
    2156:	00 00       	nop
    2158:	0e 94 75 0c 	call	0x18ea	; 0x18ea <I2C_MASTER_close>
    215c:	81 30       	cpi	r24, 0x01	; 1
    215e:	e1 f3       	breq	.-8      	; 0x2158 <I2C_MASTER_readNBytes+0x38>
		; // sit here until finished.
}
    2160:	00 00       	nop
    2162:	25 96       	adiw	r28, 0x05	; 5
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	08 95       	ret

0000216e <i2c_cb_restart_write>:
{
	return i2c_reset_link;
}

i2c_operations_t i2c_cb_restart_write(void *p)
{
    216e:	cf 93       	push	r28
    2170:	df 93       	push	r29
    2172:	00 d0       	rcall	.+0      	; 0x2174 <i2c_cb_restart_write+0x6>
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	9a 83       	std	Y+2, r25	; 0x02
	return i2c_restart_write;
    217c:	83 e0       	ldi	r24, 0x03	; 3
}
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	08 95       	ret

00002188 <LoRa2_CaptureReceivedMessage>:

//*********************************************************
//          ISR Call back Function
//*********************************************************
void LoRa2_CaptureReceivedMessage(void)
{
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	1f 92       	push	r1
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
	uint8_t readByte = LoRa_get_data();
    2192:	0e 94 3b 13 	call	0x2676	; 0x2676 <LoRa_get_data>
    2196:	89 83       	std	Y+1, r24	; 0x01
	if ((readByte != '\0') && (LoRa2ResponseIndex < responseBufferSize))
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	88 23       	and	r24, r24
    219c:	89 f0       	breq	.+34     	; 0x21c0 <LoRa2_CaptureReceivedMessage+0x38>
    219e:	80 91 7c 28 	lds	r24, 0x287C	; 0x80287c <LoRa2ResponseIndex>
    21a2:	83 32       	cpi	r24, 0x23	; 35
    21a4:	68 f4       	brcc	.+26     	; 0x21c0 <LoRa2_CaptureReceivedMessage+0x38>
		LoRa2ResponseBuffer[LoRa2ResponseIndex++] = readByte;
    21a6:	80 91 7c 28 	lds	r24, 0x287C	; 0x80287c <LoRa2ResponseIndex>
    21aa:	91 e0       	ldi	r25, 0x01	; 1
    21ac:	98 0f       	add	r25, r24
    21ae:	90 93 7c 28 	sts	0x287C, r25	; 0x80287c <LoRa2ResponseIndex>
    21b2:	88 2f       	mov	r24, r24
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	83 58       	subi	r24, 0x83	; 131
    21b8:	97 4d       	sbci	r25, 0xD7	; 215
    21ba:	29 81       	ldd	r18, Y+1	; 0x01
    21bc:	fc 01       	movw	r30, r24
    21be:	20 83       	st	Z, r18
}
    21c0:	00 00       	nop
    21c2:	0f 90       	pop	r0
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	08 95       	ret

000021ca <LoRa2_RegisterISRCallback>:
//*********************************************************
//          Other Functions
//*********************************************************

void LoRa2_RegisterISRCallback(void)
{
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
	LoRa_set_ISR_cb(&LoRa2_CaptureReceivedMessage, RX_CB);
    21d2:	61 e0       	ldi	r22, 0x01	; 1
    21d4:	84 ec       	ldi	r24, 0xC4	; 196
    21d6:	90 e1       	ldi	r25, 0x10	; 16
    21d8:	0e 94 3e 12 	call	0x247c	; 0x247c <LoRa_set_ISR_cb>
}
    21dc:	00 00       	nop
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	08 95       	ret

000021e4 <LoRa2_ReadyReceiveBuffer>:

void LoRa2_ReadyReceiveBuffer(void)
{
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	1f 92       	push	r1
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
	LoRa2ResponseIndex = 0;
    21ee:	10 92 7c 28 	sts	0x287C, r1	; 0x80287c <LoRa2ResponseIndex>
	for (uint8_t position = 0; position < responseBufferSize; position++)
    21f2:	19 82       	std	Y+1, r1	; 0x01
    21f4:	0a c0       	rjmp	.+20     	; 0x220a <LoRa2_ReadyReceiveBuffer+0x26>
		LoRa2ResponseBuffer[position] = 0;
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	88 2f       	mov	r24, r24
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	83 58       	subi	r24, 0x83	; 131
    21fe:	97 4d       	sbci	r25, 0xD7	; 215
    2200:	fc 01       	movw	r30, r24
    2202:	10 82       	st	Z, r1
}

void LoRa2_ReadyReceiveBuffer(void)
{
	LoRa2ResponseIndex = 0;
	for (uint8_t position = 0; position < responseBufferSize; position++)
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	8f 5f       	subi	r24, 0xFF	; 255
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	83 32       	cpi	r24, 0x23	; 35
    220e:	98 f3       	brcs	.-26     	; 0x21f6 <LoRa2_ReadyReceiveBuffer+0x12>
		LoRa2ResponseBuffer[position] = 0;
}
    2210:	00 00       	nop
    2212:	0f 90       	pop	r0
    2214:	df 91       	pop	r29
    2216:	cf 91       	pop	r28
    2218:	08 95       	ret

0000221a <LoRa2_GetResponse>:

char *LoRa2_GetResponse(void)
{
    221a:	cf 93       	push	r28
    221c:	df 93       	push	r29
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
	return LoRa2ResponseBuffer;
    2222:	8d e7       	ldi	r24, 0x7D	; 125
    2224:	98 e2       	ldi	r25, 0x28	; 40
}
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    222a:	08 95       	ret

0000222c <LoRa2_blockingWait>:

void LoRa2_blockingWait(uint16_t limit)
{
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	62 97       	sbiw	r28, 0x12	; 18
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	89 8b       	std	Y+17, r24	; 0x11
    223c:	9a 8b       	std	Y+18, r25	; 0x12
	for (uint16_t counter = 0; counter < limit; counter++)
    223e:	19 82       	std	Y+1, r1	; 0x01
    2240:	1a 82       	std	Y+2, r1	; 0x02
    2242:	77 c0       	rjmp	.+238    	; 0x2332 <LoRa2_blockingWait+0x106>
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	a0 e7       	ldi	r26, 0x70	; 112
    224a:	b1 e4       	ldi	r27, 0x41	; 65
    224c:	8b 83       	std	Y+3, r24	; 0x03
    224e:	9c 83       	std	Y+4, r25	; 0x04
    2250:	ad 83       	std	Y+5, r26	; 0x05
    2252:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e4       	ldi	r19, 0x40	; 64
    2258:	4c e9       	ldi	r20, 0x9C	; 156
    225a:	54 e4       	ldi	r21, 0x44	; 68
    225c:	6b 81       	ldd	r22, Y+3	; 0x03
    225e:	7c 81       	ldd	r23, Y+4	; 0x04
    2260:	8d 81       	ldd	r24, Y+5	; 0x05
    2262:	9e 81       	ldd	r25, Y+6	; 0x06
    2264:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	8f 83       	std	Y+7, r24	; 0x07
    226e:	98 87       	std	Y+8, r25	; 0x08
    2270:	a9 87       	std	Y+9, r26	; 0x09
    2272:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e8       	ldi	r20, 0x80	; 128
    227a:	5f e3       	ldi	r21, 0x3F	; 63
    227c:	6f 81       	ldd	r22, Y+7	; 0x07
    227e:	78 85       	ldd	r23, Y+8	; 0x08
    2280:	89 85       	ldd	r24, Y+9	; 0x09
    2282:	9a 85       	ldd	r25, Y+10	; 0x0a
    2284:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__cmpsf2>
    2288:	88 23       	and	r24, r24
    228a:	2c f4       	brge	.+10     	; 0x2296 <LoRa2_blockingWait+0x6a>
		__ticks = 1;
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	8b 87       	std	Y+11, r24	; 0x0b
    2292:	9c 87       	std	Y+12, r25	; 0x0c
    2294:	3f c0       	rjmp	.+126    	; 0x2314 <LoRa2_blockingWait+0xe8>
	else if (__tmp > 65535)
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	3f ef       	ldi	r19, 0xFF	; 255
    229a:	4f e7       	ldi	r20, 0x7F	; 127
    229c:	57 e4       	ldi	r21, 0x47	; 71
    229e:	6f 81       	ldd	r22, Y+7	; 0x07
    22a0:	78 85       	ldd	r23, Y+8	; 0x08
    22a2:	89 85       	ldd	r24, Y+9	; 0x09
    22a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a6:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <__gesf2>
    22aa:	18 16       	cp	r1, r24
    22ac:	4c f5       	brge	.+82     	; 0x2300 <LoRa2_blockingWait+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e2       	ldi	r20, 0x20	; 32
    22b4:	51 e4       	ldi	r21, 0x41	; 65
    22b6:	6b 81       	ldd	r22, Y+3	; 0x03
    22b8:	7c 81       	ldd	r23, Y+4	; 0x04
    22ba:	8d 81       	ldd	r24, Y+5	; 0x05
    22bc:	9e 81       	ldd	r25, Y+6	; 0x06
    22be:	0e 94 57 16 	call	0x2cae	; 0x2cae <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	bc 01       	movw	r22, r24
    22c8:	cd 01       	movw	r24, r26
    22ca:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	8b 87       	std	Y+11, r24	; 0x0b
    22d4:	9c 87       	std	Y+12, r25	; 0x0c
    22d6:	0f c0       	rjmp	.+30     	; 0x22f6 <LoRa2_blockingWait+0xca>
    22d8:	8d e7       	ldi	r24, 0x7D	; 125
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	8d 87       	std	Y+13, r24	; 0x0d
    22de:	9e 87       	std	Y+14, r25	; 0x0e
    22e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <LoRa2_blockingWait+0xb8>
    22e8:	8d 87       	std	Y+13, r24	; 0x0d
    22ea:	9e 87       	std	Y+14, r25	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    22ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	8b 87       	std	Y+11, r24	; 0x0b
    22f4:	9c 87       	std	Y+12, r25	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    22f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    22fa:	89 2b       	or	r24, r25
    22fc:	69 f7       	brne	.-38     	; 0x22d8 <LoRa2_blockingWait+0xac>
    22fe:	14 c0       	rjmp	.+40     	; 0x2328 <LoRa2_blockingWait+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2300:	6f 81       	ldd	r22, Y+7	; 0x07
    2302:	78 85       	ldd	r23, Y+8	; 0x08
    2304:	89 85       	ldd	r24, Y+9	; 0x09
    2306:	9a 85       	ldd	r25, Y+10	; 0x0a
    2308:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	8b 87       	std	Y+11, r24	; 0x0b
    2312:	9c 87       	std	Y+12, r25	; 0x0c
    2314:	8b 85       	ldd	r24, Y+11	; 0x0b
    2316:	9c 85       	ldd	r25, Y+12	; 0x0c
    2318:	8f 87       	std	Y+15, r24	; 0x0f
    231a:	98 8b       	std	Y+16, r25	; 0x10
    231c:	8f 85       	ldd	r24, Y+15	; 0x0f
    231e:	98 89       	ldd	r25, Y+16	; 0x10
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <LoRa2_blockingWait+0xf4>
    2324:	8f 87       	std	Y+15, r24	; 0x0f
    2326:	98 8b       	std	Y+16, r25	; 0x10
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	9a 81       	ldd	r25, Y+2	; 0x02
    232c:	01 96       	adiw	r24, 0x01	; 1
    232e:	89 83       	std	Y+1, r24	; 0x01
    2330:	9a 83       	std	Y+2, r25	; 0x02
    2332:	29 81       	ldd	r18, Y+1	; 0x01
    2334:	3a 81       	ldd	r19, Y+2	; 0x02
    2336:	89 89       	ldd	r24, Y+17	; 0x11
    2338:	9a 89       	ldd	r25, Y+18	; 0x12
    233a:	28 17       	cp	r18, r24
    233c:	39 07       	cpc	r19, r25
    233e:	08 f4       	brcc	.+2      	; 0x2342 <LoRa2_blockingWait+0x116>
    2340:	81 cf       	rjmp	.-254    	; 0x2244 <LoRa2_blockingWait+0x18>
		_delay_ms(15);
}
    2342:	00 00       	nop
    2344:	62 96       	adiw	r28, 0x12	; 18
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	08 95       	ret

00002350 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
    2350:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    2352:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    2354:	40 83       	st	Z, r20
	ret                             // Return to caller
    2356:	08 95       	ret

00002358 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
    2358:	cf 93       	push	r28
    235a:	df 93       	push	r29
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
    2360:	80 e0       	ldi	r24, 0x00	; 0
}
    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	08 95       	ret

00002368 <TIMER_0_init>:
 * \brief Initialize tcb interface
 *
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{
    2368:	cf 93       	push	r28
    236a:	df 93       	push	r29
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62

	TCB0.CCMP = 0x3c00; /* Compare or Capture: 0x3c00 */
    2370:	80 e8       	ldi	r24, 0x80	; 128
    2372:	9a e0       	ldi	r25, 0x0A	; 10
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	3c e3       	ldi	r19, 0x3C	; 60
    2378:	fc 01       	movw	r30, r24
    237a:	24 87       	std	Z+12, r18	; 0x0c
    237c:	35 87       	std	Z+13, r19	; 0x0d

	// TCB0.EVCTRL = 0 << TCB_CAPTEI_bp /* Event Input Enable: disabled */
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp; /* Capture or Timeout: enabled */
    237e:	80 e8       	ldi	r24, 0x80	; 128
    2380:	9a e0       	ldi	r25, 0x0A	; 10
    2382:	21 e0       	ldi	r18, 0x01	; 1
    2384:	fc 01       	movw	r30, r24
    2386:	25 83       	std	Z+5, r18	; 0x05

	TCB0.CTRLA = TCB_CLKSEL_CLKDIV2_gc  /* CLK_PER/2 (From Prescaler) */
    2388:	80 e8       	ldi	r24, 0x80	; 128
    238a:	9a e0       	ldi	r25, 0x0A	; 10
    238c:	23 e4       	ldi	r18, 0x43	; 67
    238e:	fc 01       	movw	r30, r24
    2390:	20 83       	st	Z, r18
	             | 1 << TCB_ENABLE_bp   /* Enable: enabled */
	             | 1 << TCB_RUNSTDBY_bp /* Run Standby: enabled */
	             | 0 << TCB_SYNCUPD_bp; /* Synchronize Update: disabled */

	return 0;
    2392:	80 e0       	ldi	r24, 0x00	; 0
}
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	08 95       	ret

0000239a <LoRa_printCHAR>:
	Terminal_rx_elements--;
	EXIT_CRITICAL(R);

	/* Return data */
	return Terminal_rxbuf[tmptail];
}
    239a:	cf 93       	push	r28
    239c:	df 93       	push	r29
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <LoRa_printCHAR+0x6>
    23a0:	1f 92       	push	r1
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	6a 83       	std	Y+2, r22	; 0x02
    23aa:	7b 83       	std	Y+3, r23	; 0x03
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <LoRa_write>
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	23 96       	adiw	r28, 0x03	; 3
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	08 95       	ret

000023c2 <LoRa_default_rx_isr_cb>:
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <LoRa_default_rx_isr_cb+0x6>
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	98 e0       	ldi	r25, 0x08	; 8
    23d0:	fc 01       	movw	r30, r24
    23d2:	80 81       	ld	r24, Z
    23d4:	89 83       	std	Y+1, r24	; 0x01
    23d6:	80 91 a8 28 	lds	r24, 0x28A8	; 0x8028a8 <LoRa_rx_head>
    23da:	8f 5f       	subi	r24, 0xFF	; 255
    23dc:	87 70       	andi	r24, 0x07	; 7
    23de:	8a 83       	std	Y+2, r24	; 0x02
    23e0:	80 91 a9 28 	lds	r24, 0x28A9	; 0x8028a9 <LoRa_rx_tail>
    23e4:	9a 81       	ldd	r25, Y+2	; 0x02
    23e6:	98 17       	cp	r25, r24
    23e8:	81 f0       	breq	.+32     	; 0x240a <LoRa_default_rx_isr_cb+0x48>
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
    23ec:	80 93 a8 28 	sts	0x28A8, r24	; 0x8028a8 <LoRa_rx_head>
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	88 2f       	mov	r24, r24
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	80 56       	subi	r24, 0x60	; 96
    23f8:	97 4d       	sbci	r25, 0xD7	; 215
    23fa:	29 81       	ldd	r18, Y+1	; 0x01
    23fc:	fc 01       	movw	r30, r24
    23fe:	20 83       	st	Z, r18
    2400:	80 91 aa 28 	lds	r24, 0x28AA	; 0x8028aa <LoRa_rx_elements>
    2404:	8f 5f       	subi	r24, 0xFF	; 255
    2406:	80 93 aa 28 	sts	0x28AA, r24	; 0x8028aa <LoRa_rx_elements>
    240a:	00 00       	nop
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	df 91       	pop	r29
    2412:	cf 91       	pop	r28
    2414:	08 95       	ret

00002416 <LoRa_default_udre_isr_cb>:
    2416:	cf 93       	push	r28
    2418:	df 93       	push	r29
    241a:	1f 92       	push	r1
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	80 91 b5 28 	lds	r24, 0x28B5	; 0x8028b5 <LoRa_tx_elements>
    2424:	88 23       	and	r24, r24
    2426:	c1 f0       	breq	.+48     	; 0x2458 <LoRa_default_udre_isr_cb+0x42>
    2428:	80 91 b4 28 	lds	r24, 0x28B4	; 0x8028b4 <LoRa_tx_tail>
    242c:	8f 5f       	subi	r24, 0xFF	; 255
    242e:	87 70       	andi	r24, 0x07	; 7
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <LoRa_tx_tail>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	98 e0       	ldi	r25, 0x08	; 8
    243c:	29 81       	ldd	r18, Y+1	; 0x01
    243e:	22 2f       	mov	r18, r18
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	25 55       	subi	r18, 0x55	; 85
    2444:	37 4d       	sbci	r19, 0xD7	; 215
    2446:	f9 01       	movw	r30, r18
    2448:	20 81       	ld	r18, Z
    244a:	fc 01       	movw	r30, r24
    244c:	22 83       	std	Z+2, r18	; 0x02
    244e:	80 91 b5 28 	lds	r24, 0x28B5	; 0x8028b5 <LoRa_tx_elements>
    2452:	81 50       	subi	r24, 0x01	; 1
    2454:	80 93 b5 28 	sts	0x28B5, r24	; 0x8028b5 <LoRa_tx_elements>
    2458:	80 91 b5 28 	lds	r24, 0x28B5	; 0x8028b5 <LoRa_tx_elements>
    245c:	88 23       	and	r24, r24
    245e:	49 f4       	brne	.+18     	; 0x2472 <LoRa_default_udre_isr_cb+0x5c>
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	98 e0       	ldi	r25, 0x08	; 8
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	38 e0       	ldi	r19, 0x08	; 8
    2468:	f9 01       	movw	r30, r18
    246a:	25 81       	ldd	r18, Z+5	; 0x05
    246c:	2f 7d       	andi	r18, 0xDF	; 223
    246e:	fc 01       	movw	r30, r24
    2470:	25 83       	std	Z+5, r18	; 0x05
    2472:	00 00       	nop
    2474:	0f 90       	pop	r0
    2476:	df 91       	pop	r29
    2478:	cf 91       	pop	r28
    247a:	08 95       	ret

0000247c <LoRa_set_ISR_cb>:
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
    2480:	00 d0       	rcall	.+0      	; 0x2482 <LoRa_set_ISR_cb+0x6>
    2482:	1f 92       	push	r1
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
    2488:	89 83       	std	Y+1, r24	; 0x01
    248a:	9a 83       	std	Y+2, r25	; 0x02
    248c:	6b 83       	std	Y+3, r22	; 0x03
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	88 2f       	mov	r24, r24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	81 30       	cpi	r24, 0x01	; 1
    2496:	91 05       	cpc	r25, r1
    2498:	19 f0       	breq	.+6      	; 0x24a0 <LoRa_set_ISR_cb+0x24>
    249a:	02 97       	sbiw	r24, 0x02	; 2
    249c:	41 f0       	breq	.+16     	; 0x24ae <LoRa_set_ISR_cb+0x32>
    249e:	0e c0       	rjmp	.+28     	; 0x24bc <LoRa_set_ISR_cb+0x40>
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	80 93 32 28 	sts	0x2832, r24	; 0x802832 <LoRa_rx_isr_cb>
    24a8:	90 93 33 28 	sts	0x2833, r25	; 0x802833 <LoRa_rx_isr_cb+0x1>
    24ac:	07 c0       	rjmp	.+14     	; 0x24bc <LoRa_set_ISR_cb+0x40>
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	9a 81       	ldd	r25, Y+2	; 0x02
    24b2:	80 93 34 28 	sts	0x2834, r24	; 0x802834 <LoRa_udre_isr_cb>
    24b6:	90 93 35 28 	sts	0x2835, r25	; 0x802835 <LoRa_udre_isr_cb+0x1>
    24ba:	00 00       	nop
    24bc:	00 00       	nop
    24be:	23 96       	adiw	r28, 0x03	; 3
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	df 91       	pop	r29
    24c6:	cf 91       	pop	r28
    24c8:	08 95       	ret

000024ca <__vector_17>:
    24ca:	1f 92       	push	r1
    24cc:	0f 92       	push	r0
    24ce:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    24d2:	0f 92       	push	r0
    24d4:	11 24       	eor	r1, r1
    24d6:	2f 93       	push	r18
    24d8:	3f 93       	push	r19
    24da:	4f 93       	push	r20
    24dc:	5f 93       	push	r21
    24de:	6f 93       	push	r22
    24e0:	7f 93       	push	r23
    24e2:	8f 93       	push	r24
    24e4:	9f 93       	push	r25
    24e6:	af 93       	push	r26
    24e8:	bf 93       	push	r27
    24ea:	ef 93       	push	r30
    24ec:	ff 93       	push	r31
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	80 91 32 28 	lds	r24, 0x2832	; 0x802832 <LoRa_rx_isr_cb>
    24fa:	90 91 33 28 	lds	r25, 0x2833	; 0x802833 <LoRa_rx_isr_cb+0x1>
    24fe:	89 2b       	or	r24, r25
    2500:	31 f0       	breq	.+12     	; 0x250e <__vector_17+0x44>
    2502:	80 91 32 28 	lds	r24, 0x2832	; 0x802832 <LoRa_rx_isr_cb>
    2506:	90 91 33 28 	lds	r25, 0x2833	; 0x802833 <LoRa_rx_isr_cb+0x1>
    250a:	fc 01       	movw	r30, r24
    250c:	09 95       	icall
    250e:	00 00       	nop
    2510:	df 91       	pop	r29
    2512:	cf 91       	pop	r28
    2514:	ff 91       	pop	r31
    2516:	ef 91       	pop	r30
    2518:	bf 91       	pop	r27
    251a:	af 91       	pop	r26
    251c:	9f 91       	pop	r25
    251e:	8f 91       	pop	r24
    2520:	7f 91       	pop	r23
    2522:	6f 91       	pop	r22
    2524:	5f 91       	pop	r21
    2526:	4f 91       	pop	r20
    2528:	3f 91       	pop	r19
    252a:	2f 91       	pop	r18
    252c:	0f 90       	pop	r0
    252e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2532:	0f 90       	pop	r0
    2534:	1f 90       	pop	r1
    2536:	18 95       	reti

00002538 <__vector_18>:
    2538:	1f 92       	push	r1
    253a:	0f 92       	push	r0
    253c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2540:	0f 92       	push	r0
    2542:	11 24       	eor	r1, r1
    2544:	2f 93       	push	r18
    2546:	3f 93       	push	r19
    2548:	4f 93       	push	r20
    254a:	5f 93       	push	r21
    254c:	6f 93       	push	r22
    254e:	7f 93       	push	r23
    2550:	8f 93       	push	r24
    2552:	9f 93       	push	r25
    2554:	af 93       	push	r26
    2556:	bf 93       	push	r27
    2558:	ef 93       	push	r30
    255a:	ff 93       	push	r31
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    2564:	80 91 34 28 	lds	r24, 0x2834	; 0x802834 <LoRa_udre_isr_cb>
    2568:	90 91 35 28 	lds	r25, 0x2835	; 0x802835 <LoRa_udre_isr_cb+0x1>
    256c:	89 2b       	or	r24, r25
    256e:	31 f0       	breq	.+12     	; 0x257c <__vector_18+0x44>
    2570:	80 91 34 28 	lds	r24, 0x2834	; 0x802834 <LoRa_udre_isr_cb>
    2574:	90 91 35 28 	lds	r25, 0x2835	; 0x802835 <LoRa_udre_isr_cb+0x1>
    2578:	fc 01       	movw	r30, r24
    257a:	09 95       	icall
    257c:	00 00       	nop
    257e:	df 91       	pop	r29
    2580:	cf 91       	pop	r28
    2582:	ff 91       	pop	r31
    2584:	ef 91       	pop	r30
    2586:	bf 91       	pop	r27
    2588:	af 91       	pop	r26
    258a:	9f 91       	pop	r25
    258c:	8f 91       	pop	r24
    258e:	7f 91       	pop	r23
    2590:	6f 91       	pop	r22
    2592:	5f 91       	pop	r21
    2594:	4f 91       	pop	r20
    2596:	3f 91       	pop	r19
    2598:	2f 91       	pop	r18
    259a:	0f 90       	pop	r0
    259c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    25a0:	0f 90       	pop	r0
    25a2:	1f 90       	pop	r1
    25a4:	18 95       	reti

000025a6 <LoRa_write>:
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <LoRa_write+0x6>
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	8a 83       	std	Y+2, r24	; 0x02
    25b2:	80 91 b3 28 	lds	r24, 0x28B3	; 0x8028b3 <LoRa_tx_head>
    25b6:	8f 5f       	subi	r24, 0xFF	; 255
    25b8:	87 70       	andi	r24, 0x07	; 7
    25ba:	89 83       	std	Y+1, r24	; 0x01
    25bc:	00 00       	nop
    25be:	80 91 b5 28 	lds	r24, 0x28B5	; 0x8028b5 <LoRa_tx_elements>
    25c2:	88 30       	cpi	r24, 0x08	; 8
    25c4:	e1 f3       	breq	.-8      	; 0x25be <LoRa_write+0x18>
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	88 2f       	mov	r24, r24
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	85 55       	subi	r24, 0x55	; 85
    25ce:	97 4d       	sbci	r25, 0xD7	; 215
    25d0:	2a 81       	ldd	r18, Y+2	; 0x02
    25d2:	fc 01       	movw	r30, r24
    25d4:	20 83       	st	Z, r18
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	80 93 b3 28 	sts	0x28B3, r24	; 0x8028b3 <LoRa_tx_head>
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	0f 92       	push	r0
    25e2:	80 91 b5 28 	lds	r24, 0x28B5	; 0x8028b5 <LoRa_tx_elements>
    25e6:	8f 5f       	subi	r24, 0xFF	; 255
    25e8:	80 93 b5 28 	sts	0x28B5, r24	; 0x8028b5 <LoRa_tx_elements>
    25ec:	0f 90       	pop	r0
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	98 e0       	ldi	r25, 0x08	; 8
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	38 e0       	ldi	r19, 0x08	; 8
    25f8:	f9 01       	movw	r30, r18
    25fa:	25 81       	ldd	r18, Z+5	; 0x05
    25fc:	20 62       	ori	r18, 0x20	; 32
    25fe:	fc 01       	movw	r30, r24
    2600:	25 83       	std	Z+5, r18	; 0x05
    2602:	00 00       	nop
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	df 91       	pop	r29
    260a:	cf 91       	pop	r28
    260c:	08 95       	ret

0000260e <LoRa_init>:
    260e:	cf 93       	push	r28
    2610:	df 93       	push	r29
    2612:	1f 92       	push	r1
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	98 e0       	ldi	r25, 0x08	; 8
    261c:	2b e5       	ldi	r18, 0x5B	; 91
    261e:	31 e0       	ldi	r19, 0x01	; 1
    2620:	fc 01       	movw	r30, r24
    2622:	20 87       	std	Z+8, r18	; 0x08
    2624:	31 87       	std	Z+9, r19	; 0x09
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	98 e0       	ldi	r25, 0x08	; 8
    262a:	20 e8       	ldi	r18, 0x80	; 128
    262c:	fc 01       	movw	r30, r24
    262e:	25 83       	std	Z+5, r18	; 0x05
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	98 e0       	ldi	r25, 0x08	; 8
    2634:	20 ec       	ldi	r18, 0xC0	; 192
    2636:	fc 01       	movw	r30, r24
    2638:	26 83       	std	Z+6, r18	; 0x06
    263a:	19 82       	std	Y+1, r1	; 0x01
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	80 93 a9 28 	sts	0x28A9, r24	; 0x8028a9 <LoRa_rx_tail>
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	80 93 a8 28 	sts	0x28A8, r24	; 0x8028a8 <LoRa_rx_head>
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	80 93 aa 28 	sts	0x28AA, r24	; 0x8028aa <LoRa_rx_elements>
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	80 93 b4 28 	sts	0x28B4, r24	; 0x8028b4 <LoRa_tx_tail>
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	80 93 b3 28 	sts	0x28B3, r24	; 0x8028b3 <LoRa_tx_head>
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	80 93 b5 28 	sts	0x28B5, r24	; 0x8028b5 <LoRa_tx_elements>
    2660:	84 e2       	ldi	r24, 0x24	; 36
    2662:	98 e2       	ldi	r25, 0x28	; 40
    2664:	80 93 f0 29 	sts	0x29F0, r24	; 0x8029f0 <__iob+0x2>
    2668:	90 93 f1 29 	sts	0x29F1, r25	; 0x8029f1 <__iob+0x3>
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	0f 90       	pop	r0
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	08 95       	ret

00002676 <LoRa_get_data>:
    2676:	cf 93       	push	r28
    2678:	df 93       	push	r29
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	98 e0       	ldi	r25, 0x08	; 8
    2682:	fc 01       	movw	r30, r24
    2684:	80 81       	ld	r24, Z
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	08 95       	ret

0000268c <Terminal_printCHAR>:
    268c:	cf 93       	push	r28
    268e:	df 93       	push	r29
    2690:	00 d0       	rcall	.+0      	; 0x2692 <Terminal_printCHAR+0x6>
    2692:	1f 92       	push	r1
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62
    2698:	89 83       	std	Y+1, r24	; 0x01
    269a:	6a 83       	std	Y+2, r22	; 0x02
    269c:	7b 83       	std	Y+3, r23	; 0x03
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	0e 94 25 14 	call	0x284a	; 0x284a <Terminal_write>
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	23 96       	adiw	r28, 0x03	; 3
    26aa:	cd bf       	out	0x3d, r28	; 61
    26ac:	de bf       	out	0x3e, r29	; 62
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	08 95       	ret

000026b4 <Terminal_default_rx_isr_cb>:
    26b4:	cf 93       	push	r28
    26b6:	df 93       	push	r29
    26b8:	00 d0       	rcall	.+0      	; 0x26ba <Terminal_default_rx_isr_cb+0x6>
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	80 e6       	ldi	r24, 0x60	; 96
    26c0:	98 e0       	ldi	r25, 0x08	; 8
    26c2:	fc 01       	movw	r30, r24
    26c4:	80 81       	ld	r24, Z
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	80 91 be 28 	lds	r24, 0x28BE	; 0x8028be <Terminal_rx_head>
    26cc:	8f 5f       	subi	r24, 0xFF	; 255
    26ce:	87 70       	andi	r24, 0x07	; 7
    26d0:	8a 83       	std	Y+2, r24	; 0x02
    26d2:	80 91 bf 28 	lds	r24, 0x28BF	; 0x8028bf <Terminal_rx_tail>
    26d6:	9a 81       	ldd	r25, Y+2	; 0x02
    26d8:	98 17       	cp	r25, r24
    26da:	81 f0       	breq	.+32     	; 0x26fc <Terminal_default_rx_isr_cb+0x48>
    26dc:	8a 81       	ldd	r24, Y+2	; 0x02
    26de:	80 93 be 28 	sts	0x28BE, r24	; 0x8028be <Terminal_rx_head>
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	88 2f       	mov	r24, r24
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	8a 54       	subi	r24, 0x4A	; 74
    26ea:	97 4d       	sbci	r25, 0xD7	; 215
    26ec:	29 81       	ldd	r18, Y+1	; 0x01
    26ee:	fc 01       	movw	r30, r24
    26f0:	20 83       	st	Z, r18
    26f2:	80 91 c0 28 	lds	r24, 0x28C0	; 0x8028c0 <Terminal_rx_elements>
    26f6:	8f 5f       	subi	r24, 0xFF	; 255
    26f8:	80 93 c0 28 	sts	0x28C0, r24	; 0x8028c0 <Terminal_rx_elements>
    26fc:	00 00       	nop
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	df 91       	pop	r29
    2704:	cf 91       	pop	r28
    2706:	08 95       	ret

00002708 <Terminal_default_udre_isr_cb>:
    2708:	cf 93       	push	r28
    270a:	df 93       	push	r29
    270c:	1f 92       	push	r1
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <Terminal_tx_elements>
    2716:	88 23       	and	r24, r24
    2718:	c1 f0       	breq	.+48     	; 0x274a <Terminal_default_udre_isr_cb+0x42>
    271a:	80 91 ca 28 	lds	r24, 0x28CA	; 0x8028ca <Terminal_tx_tail>
    271e:	8f 5f       	subi	r24, 0xFF	; 255
    2720:	87 70       	andi	r24, 0x07	; 7
    2722:	89 83       	std	Y+1, r24	; 0x01
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	80 93 ca 28 	sts	0x28CA, r24	; 0x8028ca <Terminal_tx_tail>
    272a:	80 e6       	ldi	r24, 0x60	; 96
    272c:	98 e0       	ldi	r25, 0x08	; 8
    272e:	29 81       	ldd	r18, Y+1	; 0x01
    2730:	22 2f       	mov	r18, r18
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	2f 53       	subi	r18, 0x3F	; 63
    2736:	37 4d       	sbci	r19, 0xD7	; 215
    2738:	f9 01       	movw	r30, r18
    273a:	20 81       	ld	r18, Z
    273c:	fc 01       	movw	r30, r24
    273e:	22 83       	std	Z+2, r18	; 0x02
    2740:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <Terminal_tx_elements>
    2744:	81 50       	subi	r24, 0x01	; 1
    2746:	80 93 cb 28 	sts	0x28CB, r24	; 0x8028cb <Terminal_tx_elements>
    274a:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <Terminal_tx_elements>
    274e:	88 23       	and	r24, r24
    2750:	49 f4       	brne	.+18     	; 0x2764 <Terminal_default_udre_isr_cb+0x5c>
    2752:	80 e6       	ldi	r24, 0x60	; 96
    2754:	98 e0       	ldi	r25, 0x08	; 8
    2756:	20 e6       	ldi	r18, 0x60	; 96
    2758:	38 e0       	ldi	r19, 0x08	; 8
    275a:	f9 01       	movw	r30, r18
    275c:	25 81       	ldd	r18, Z+5	; 0x05
    275e:	2f 7d       	andi	r18, 0xDF	; 223
    2760:	fc 01       	movw	r30, r24
    2762:	25 83       	std	Z+5, r18	; 0x05
    2764:	00 00       	nop
    2766:	0f 90       	pop	r0
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	08 95       	ret

0000276e <__vector_37>:
    276e:	1f 92       	push	r1
    2770:	0f 92       	push	r0
    2772:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2776:	0f 92       	push	r0
    2778:	11 24       	eor	r1, r1
    277a:	2f 93       	push	r18
    277c:	3f 93       	push	r19
    277e:	4f 93       	push	r20
    2780:	5f 93       	push	r21
    2782:	6f 93       	push	r22
    2784:	7f 93       	push	r23
    2786:	8f 93       	push	r24
    2788:	9f 93       	push	r25
    278a:	af 93       	push	r26
    278c:	bf 93       	push	r27
    278e:	ef 93       	push	r30
    2790:	ff 93       	push	r31
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	80 91 44 28 	lds	r24, 0x2844	; 0x802844 <Terminal_rx_isr_cb>
    279e:	90 91 45 28 	lds	r25, 0x2845	; 0x802845 <Terminal_rx_isr_cb+0x1>
    27a2:	89 2b       	or	r24, r25
    27a4:	31 f0       	breq	.+12     	; 0x27b2 <__vector_37+0x44>
    27a6:	80 91 44 28 	lds	r24, 0x2844	; 0x802844 <Terminal_rx_isr_cb>
    27aa:	90 91 45 28 	lds	r25, 0x2845	; 0x802845 <Terminal_rx_isr_cb+0x1>
    27ae:	fc 01       	movw	r30, r24
    27b0:	09 95       	icall
    27b2:	00 00       	nop
    27b4:	df 91       	pop	r29
    27b6:	cf 91       	pop	r28
    27b8:	ff 91       	pop	r31
    27ba:	ef 91       	pop	r30
    27bc:	bf 91       	pop	r27
    27be:	af 91       	pop	r26
    27c0:	9f 91       	pop	r25
    27c2:	8f 91       	pop	r24
    27c4:	7f 91       	pop	r23
    27c6:	6f 91       	pop	r22
    27c8:	5f 91       	pop	r21
    27ca:	4f 91       	pop	r20
    27cc:	3f 91       	pop	r19
    27ce:	2f 91       	pop	r18
    27d0:	0f 90       	pop	r0
    27d2:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    27d6:	0f 90       	pop	r0
    27d8:	1f 90       	pop	r1
    27da:	18 95       	reti

000027dc <__vector_38>:
    27dc:	1f 92       	push	r1
    27de:	0f 92       	push	r0
    27e0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    27e4:	0f 92       	push	r0
    27e6:	11 24       	eor	r1, r1
    27e8:	2f 93       	push	r18
    27ea:	3f 93       	push	r19
    27ec:	4f 93       	push	r20
    27ee:	5f 93       	push	r21
    27f0:	6f 93       	push	r22
    27f2:	7f 93       	push	r23
    27f4:	8f 93       	push	r24
    27f6:	9f 93       	push	r25
    27f8:	af 93       	push	r26
    27fa:	bf 93       	push	r27
    27fc:	ef 93       	push	r30
    27fe:	ff 93       	push	r31
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	80 91 46 28 	lds	r24, 0x2846	; 0x802846 <Terminal_udre_isr_cb>
    280c:	90 91 47 28 	lds	r25, 0x2847	; 0x802847 <Terminal_udre_isr_cb+0x1>
    2810:	89 2b       	or	r24, r25
    2812:	31 f0       	breq	.+12     	; 0x2820 <__vector_38+0x44>
    2814:	80 91 46 28 	lds	r24, 0x2846	; 0x802846 <Terminal_udre_isr_cb>
    2818:	90 91 47 28 	lds	r25, 0x2847	; 0x802847 <Terminal_udre_isr_cb+0x1>
    281c:	fc 01       	movw	r30, r24
    281e:	09 95       	icall
    2820:	00 00       	nop
    2822:	df 91       	pop	r29
    2824:	cf 91       	pop	r28
    2826:	ff 91       	pop	r31
    2828:	ef 91       	pop	r30
    282a:	bf 91       	pop	r27
    282c:	af 91       	pop	r26
    282e:	9f 91       	pop	r25
    2830:	8f 91       	pop	r24
    2832:	7f 91       	pop	r23
    2834:	6f 91       	pop	r22
    2836:	5f 91       	pop	r21
    2838:	4f 91       	pop	r20
    283a:	3f 91       	pop	r19
    283c:	2f 91       	pop	r18
    283e:	0f 90       	pop	r0
    2840:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    2844:	0f 90       	pop	r0
    2846:	1f 90       	pop	r1
    2848:	18 95       	reti

0000284a <Terminal_write>:
 * \param[in] data The character to write to the USART
 *
 * \return Nothing
 */
void Terminal_write(const uint8_t data)
{
    284a:	cf 93       	push	r28
    284c:	df 93       	push	r29
    284e:	00 d0       	rcall	.+0      	; 0x2850 <Terminal_write+0x6>
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (Terminal_tx_head + 1) & Terminal_TX_BUFFER_MASK;
    2856:	80 91 c9 28 	lds	r24, 0x28C9	; 0x8028c9 <Terminal_tx_head>
    285a:	8f 5f       	subi	r24, 0xFF	; 255
    285c:	87 70       	andi	r24, 0x07	; 7
    285e:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for free space in buffer */
	while (Terminal_tx_elements == Terminal_TX_BUFFER_SIZE)
    2860:	00 00       	nop
    2862:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <Terminal_tx_elements>
    2866:	88 30       	cpi	r24, 0x08	; 8
    2868:	e1 f3       	breq	.-8      	; 0x2862 <Terminal_write+0x18>
		;
	/* Store data in buffer */
	Terminal_txbuf[tmphead] = data;
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	88 2f       	mov	r24, r24
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	8f 53       	subi	r24, 0x3F	; 63
    2872:	97 4d       	sbci	r25, 0xD7	; 215
    2874:	2a 81       	ldd	r18, Y+2	; 0x02
    2876:	fc 01       	movw	r30, r24
    2878:	20 83       	st	Z, r18
	/* Store new index */
	Terminal_tx_head = tmphead;
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	80 93 c9 28 	sts	0x28C9, r24	; 0x8028c9 <Terminal_tx_head>
	ENTER_CRITICAL(W);
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	f8 94       	cli
    2884:	0f 92       	push	r0
	Terminal_tx_elements++;
    2886:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <Terminal_tx_elements>
    288a:	8f 5f       	subi	r24, 0xFF	; 255
    288c:	80 93 cb 28 	sts	0x28CB, r24	; 0x8028cb <Terminal_tx_elements>
	EXIT_CRITICAL(W);
    2890:	0f 90       	pop	r0
    2892:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	USART3.CTRLA |= (1 << USART_DREIE_bp);
    2894:	80 e6       	ldi	r24, 0x60	; 96
    2896:	98 e0       	ldi	r25, 0x08	; 8
    2898:	20 e6       	ldi	r18, 0x60	; 96
    289a:	38 e0       	ldi	r19, 0x08	; 8
    289c:	f9 01       	movw	r30, r18
    289e:	25 81       	ldd	r18, Z+5	; 0x05
    28a0:	20 62       	ori	r18, 0x20	; 32
    28a2:	fc 01       	movw	r30, r24
    28a4:	25 83       	std	Z+5, r18	; 0x05
}
    28a6:	00 00       	nop
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	df 91       	pop	r29
    28ae:	cf 91       	pop	r28
    28b0:	08 95       	ret

000028b2 <Terminal_init>:
 * \return Initialization status.
 * \retval 0 the USART init was successful
 * \retval 1 the USART init was not successful
 */
int8_t Terminal_init()
{
    28b2:	cf 93       	push	r28
    28b4:	df 93       	push	r29
    28b6:	1f 92       	push	r1
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62

	USART3.BAUD = (uint16_t)USART3_BAUD_RATE(9600); /* set baud rate register */
    28bc:	80 e6       	ldi	r24, 0x60	; 96
    28be:	98 e0       	ldi	r25, 0x08	; 8
    28c0:	23 e2       	ldi	r18, 0x23	; 35
    28c2:	38 e0       	ldi	r19, 0x08	; 8
    28c4:	fc 01       	movw	r30, r24
    28c6:	20 87       	std	Z+8, r18	; 0x08
    28c8:	31 87       	std	Z+9, r19	; 0x09

	USART3.CTRLA = 0 << USART_ABEIE_bp    /* Auto-baud Error Interrupt Enable: disabled */
    28ca:	80 e6       	ldi	r24, 0x60	; 96
    28cc:	98 e0       	ldi	r25, 0x08	; 8
    28ce:	20 e8       	ldi	r18, 0x80	; 128
    28d0:	fc 01       	movw	r30, r24
    28d2:	25 83       	std	Z+5, r18	; 0x05
	               | USART_RS485_OFF_gc   /* RS485 Mode disabled */
	               | 1 << USART_RXCIE_bp  /* Receive Complete Interrupt Enable: enabled */
	               | 0 << USART_RXSIE_bp  /* Receiver Start Frame Interrupt Enable: disabled */
	               | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART3.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
    28d4:	80 e6       	ldi	r24, 0x60	; 96
    28d6:	98 e0       	ldi	r25, 0x08	; 8
    28d8:	20 ec       	ldi	r18, 0xC0	; 192
    28da:	fc 01       	movw	r30, r24
    28dc:	26 83       	std	Z+6, r18	; 0x06
	// USART3.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	uint8_t x;

	/* Initialize ringbuffers */
	x = 0;
    28de:	19 82       	std	Y+1, r1	; 0x01

	Terminal_rx_tail     = x;
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	80 93 bf 28 	sts	0x28BF, r24	; 0x8028bf <Terminal_rx_tail>
	Terminal_rx_head     = x;
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	80 93 be 28 	sts	0x28BE, r24	; 0x8028be <Terminal_rx_head>
	Terminal_rx_elements = x;
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	80 93 c0 28 	sts	0x28C0, r24	; 0x8028c0 <Terminal_rx_elements>
	Terminal_tx_tail     = x;
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	80 93 ca 28 	sts	0x28CA, r24	; 0x8028ca <Terminal_tx_tail>
	Terminal_tx_head     = x;
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	80 93 c9 28 	sts	0x28C9, r24	; 0x8028c9 <Terminal_tx_head>
	Terminal_tx_elements = x;
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	80 93 cb 28 	sts	0x28CB, r24	; 0x8028cb <Terminal_tx_elements>

#if defined(__GNUC__)
	stdout = &Terminal_stream;
    2904:	86 e3       	ldi	r24, 0x36	; 54
    2906:	98 e2       	ldi	r25, 0x28	; 40
    2908:	80 93 f0 29 	sts	0x29F0, r24	; 0x8029f0 <__iob+0x2>
    290c:	90 93 f1 29 	sts	0x29F1, r25	; 0x8029f1 <__iob+0x3>
#endif

	return 0;
    2910:	80 e0       	ldi	r24, 0x00	; 0
}
    2912:	0f 90       	pop	r0
    2914:	df 91       	pop	r29
    2916:	cf 91       	pop	r28
    2918:	08 95       	ret

0000291a <__subsf3>:
    291a:	50 58       	subi	r21, 0x80	; 128

0000291c <__addsf3>:
    291c:	bb 27       	eor	r27, r27
    291e:	aa 27       	eor	r26, r26
    2920:	0e 94 a5 14 	call	0x294a	; 0x294a <__addsf3x>
    2924:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__fp_round>
    2928:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__fp_pscA>
    292c:	38 f0       	brcs	.+14     	; 0x293c <__addsf3+0x20>
    292e:	0e 94 11 16 	call	0x2c22	; 0x2c22 <__fp_pscB>
    2932:	20 f0       	brcs	.+8      	; 0x293c <__addsf3+0x20>
    2934:	39 f4       	brne	.+14     	; 0x2944 <__addsf3+0x28>
    2936:	9f 3f       	cpi	r25, 0xFF	; 255
    2938:	19 f4       	brne	.+6      	; 0x2940 <__addsf3+0x24>
    293a:	26 f4       	brtc	.+8      	; 0x2944 <__addsf3+0x28>
    293c:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <__fp_nan>
    2940:	0e f4       	brtc	.+2      	; 0x2944 <__addsf3+0x28>
    2942:	e0 95       	com	r30
    2944:	e7 fb       	bst	r30, 7
    2946:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__fp_inf>

0000294a <__addsf3x>:
    294a:	e9 2f       	mov	r30, r25
    294c:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__fp_split3>
    2950:	58 f3       	brcs	.-42     	; 0x2928 <__addsf3+0xc>
    2952:	ba 17       	cp	r27, r26
    2954:	62 07       	cpc	r22, r18
    2956:	73 07       	cpc	r23, r19
    2958:	84 07       	cpc	r24, r20
    295a:	95 07       	cpc	r25, r21
    295c:	20 f0       	brcs	.+8      	; 0x2966 <__addsf3x+0x1c>
    295e:	79 f4       	brne	.+30     	; 0x297e <__addsf3x+0x34>
    2960:	a6 f5       	brtc	.+104    	; 0x29ca <__addsf3x+0x80>
    2962:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__fp_zero>
    2966:	0e f4       	brtc	.+2      	; 0x296a <__addsf3x+0x20>
    2968:	e0 95       	com	r30
    296a:	0b 2e       	mov	r0, r27
    296c:	ba 2f       	mov	r27, r26
    296e:	a0 2d       	mov	r26, r0
    2970:	0b 01       	movw	r0, r22
    2972:	b9 01       	movw	r22, r18
    2974:	90 01       	movw	r18, r0
    2976:	0c 01       	movw	r0, r24
    2978:	ca 01       	movw	r24, r20
    297a:	a0 01       	movw	r20, r0
    297c:	11 24       	eor	r1, r1
    297e:	ff 27       	eor	r31, r31
    2980:	59 1b       	sub	r21, r25
    2982:	99 f0       	breq	.+38     	; 0x29aa <__addsf3x+0x60>
    2984:	59 3f       	cpi	r21, 0xF9	; 249
    2986:	50 f4       	brcc	.+20     	; 0x299c <__addsf3x+0x52>
    2988:	50 3e       	cpi	r21, 0xE0	; 224
    298a:	68 f1       	brcs	.+90     	; 0x29e6 <__addsf3x+0x9c>
    298c:	1a 16       	cp	r1, r26
    298e:	f0 40       	sbci	r31, 0x00	; 0
    2990:	a2 2f       	mov	r26, r18
    2992:	23 2f       	mov	r18, r19
    2994:	34 2f       	mov	r19, r20
    2996:	44 27       	eor	r20, r20
    2998:	58 5f       	subi	r21, 0xF8	; 248
    299a:	f3 cf       	rjmp	.-26     	; 0x2982 <__addsf3x+0x38>
    299c:	46 95       	lsr	r20
    299e:	37 95       	ror	r19
    29a0:	27 95       	ror	r18
    29a2:	a7 95       	ror	r26
    29a4:	f0 40       	sbci	r31, 0x00	; 0
    29a6:	53 95       	inc	r21
    29a8:	c9 f7       	brne	.-14     	; 0x299c <__addsf3x+0x52>
    29aa:	7e f4       	brtc	.+30     	; 0x29ca <__addsf3x+0x80>
    29ac:	1f 16       	cp	r1, r31
    29ae:	ba 0b       	sbc	r27, r26
    29b0:	62 0b       	sbc	r22, r18
    29b2:	73 0b       	sbc	r23, r19
    29b4:	84 0b       	sbc	r24, r20
    29b6:	ba f0       	brmi	.+46     	; 0x29e6 <__addsf3x+0x9c>
    29b8:	91 50       	subi	r25, 0x01	; 1
    29ba:	a1 f0       	breq	.+40     	; 0x29e4 <__addsf3x+0x9a>
    29bc:	ff 0f       	add	r31, r31
    29be:	bb 1f       	adc	r27, r27
    29c0:	66 1f       	adc	r22, r22
    29c2:	77 1f       	adc	r23, r23
    29c4:	88 1f       	adc	r24, r24
    29c6:	c2 f7       	brpl	.-16     	; 0x29b8 <__addsf3x+0x6e>
    29c8:	0e c0       	rjmp	.+28     	; 0x29e6 <__addsf3x+0x9c>
    29ca:	ba 0f       	add	r27, r26
    29cc:	62 1f       	adc	r22, r18
    29ce:	73 1f       	adc	r23, r19
    29d0:	84 1f       	adc	r24, r20
    29d2:	48 f4       	brcc	.+18     	; 0x29e6 <__addsf3x+0x9c>
    29d4:	87 95       	ror	r24
    29d6:	77 95       	ror	r23
    29d8:	67 95       	ror	r22
    29da:	b7 95       	ror	r27
    29dc:	f7 95       	ror	r31
    29de:	9e 3f       	cpi	r25, 0xFE	; 254
    29e0:	08 f0       	brcs	.+2      	; 0x29e4 <__addsf3x+0x9a>
    29e2:	b0 cf       	rjmp	.-160    	; 0x2944 <__addsf3+0x28>
    29e4:	93 95       	inc	r25
    29e6:	88 0f       	add	r24, r24
    29e8:	08 f0       	brcs	.+2      	; 0x29ec <__addsf3x+0xa2>
    29ea:	99 27       	eor	r25, r25
    29ec:	ee 0f       	add	r30, r30
    29ee:	97 95       	ror	r25
    29f0:	87 95       	ror	r24
    29f2:	08 95       	ret

000029f4 <__cmpsf2>:
    29f4:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__fp_cmp>
    29f8:	08 f4       	brcc	.+2      	; 0x29fc <__cmpsf2+0x8>
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	08 95       	ret

000029fe <__divsf3>:
    29fe:	0e 94 13 15 	call	0x2a26	; 0x2a26 <__divsf3x>
    2a02:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__fp_round>
    2a06:	0e 94 11 16 	call	0x2c22	; 0x2c22 <__fp_pscB>
    2a0a:	58 f0       	brcs	.+22     	; 0x2a22 <__divsf3+0x24>
    2a0c:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__fp_pscA>
    2a10:	40 f0       	brcs	.+16     	; 0x2a22 <__divsf3+0x24>
    2a12:	29 f4       	brne	.+10     	; 0x2a1e <__divsf3+0x20>
    2a14:	5f 3f       	cpi	r21, 0xFF	; 255
    2a16:	29 f0       	breq	.+10     	; 0x2a22 <__divsf3+0x24>
    2a18:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__fp_inf>
    2a1c:	51 11       	cpse	r21, r1
    2a1e:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__fp_szero>
    2a22:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <__fp_nan>

00002a26 <__divsf3x>:
    2a26:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__fp_split3>
    2a2a:	68 f3       	brcs	.-38     	; 0x2a06 <__divsf3+0x8>

00002a2c <__divsf3_pse>:
    2a2c:	99 23       	and	r25, r25
    2a2e:	b1 f3       	breq	.-20     	; 0x2a1c <__divsf3+0x1e>
    2a30:	55 23       	and	r21, r21
    2a32:	91 f3       	breq	.-28     	; 0x2a18 <__divsf3+0x1a>
    2a34:	95 1b       	sub	r25, r21
    2a36:	55 0b       	sbc	r21, r21
    2a38:	bb 27       	eor	r27, r27
    2a3a:	aa 27       	eor	r26, r26
    2a3c:	62 17       	cp	r22, r18
    2a3e:	73 07       	cpc	r23, r19
    2a40:	84 07       	cpc	r24, r20
    2a42:	38 f0       	brcs	.+14     	; 0x2a52 <__divsf3_pse+0x26>
    2a44:	9f 5f       	subi	r25, 0xFF	; 255
    2a46:	5f 4f       	sbci	r21, 0xFF	; 255
    2a48:	22 0f       	add	r18, r18
    2a4a:	33 1f       	adc	r19, r19
    2a4c:	44 1f       	adc	r20, r20
    2a4e:	aa 1f       	adc	r26, r26
    2a50:	a9 f3       	breq	.-22     	; 0x2a3c <__divsf3_pse+0x10>
    2a52:	35 d0       	rcall	.+106    	; 0x2abe <__divsf3_pse+0x92>
    2a54:	0e 2e       	mov	r0, r30
    2a56:	3a f0       	brmi	.+14     	; 0x2a66 <__divsf3_pse+0x3a>
    2a58:	e0 e8       	ldi	r30, 0x80	; 128
    2a5a:	32 d0       	rcall	.+100    	; 0x2ac0 <__divsf3_pse+0x94>
    2a5c:	91 50       	subi	r25, 0x01	; 1
    2a5e:	50 40       	sbci	r21, 0x00	; 0
    2a60:	e6 95       	lsr	r30
    2a62:	00 1c       	adc	r0, r0
    2a64:	ca f7       	brpl	.-14     	; 0x2a58 <__divsf3_pse+0x2c>
    2a66:	2b d0       	rcall	.+86     	; 0x2abe <__divsf3_pse+0x92>
    2a68:	fe 2f       	mov	r31, r30
    2a6a:	29 d0       	rcall	.+82     	; 0x2abe <__divsf3_pse+0x92>
    2a6c:	66 0f       	add	r22, r22
    2a6e:	77 1f       	adc	r23, r23
    2a70:	88 1f       	adc	r24, r24
    2a72:	bb 1f       	adc	r27, r27
    2a74:	26 17       	cp	r18, r22
    2a76:	37 07       	cpc	r19, r23
    2a78:	48 07       	cpc	r20, r24
    2a7a:	ab 07       	cpc	r26, r27
    2a7c:	b0 e8       	ldi	r27, 0x80	; 128
    2a7e:	09 f0       	breq	.+2      	; 0x2a82 <__divsf3_pse+0x56>
    2a80:	bb 0b       	sbc	r27, r27
    2a82:	80 2d       	mov	r24, r0
    2a84:	bf 01       	movw	r22, r30
    2a86:	ff 27       	eor	r31, r31
    2a88:	93 58       	subi	r25, 0x83	; 131
    2a8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a8c:	3a f0       	brmi	.+14     	; 0x2a9c <__divsf3_pse+0x70>
    2a8e:	9e 3f       	cpi	r25, 0xFE	; 254
    2a90:	51 05       	cpc	r21, r1
    2a92:	78 f0       	brcs	.+30     	; 0x2ab2 <__divsf3_pse+0x86>
    2a94:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__fp_inf>
    2a98:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__fp_szero>
    2a9c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a9e:	e4 f3       	brlt	.-8      	; 0x2a98 <__divsf3_pse+0x6c>
    2aa0:	98 3e       	cpi	r25, 0xE8	; 232
    2aa2:	d4 f3       	brlt	.-12     	; 0x2a98 <__divsf3_pse+0x6c>
    2aa4:	86 95       	lsr	r24
    2aa6:	77 95       	ror	r23
    2aa8:	67 95       	ror	r22
    2aaa:	b7 95       	ror	r27
    2aac:	f7 95       	ror	r31
    2aae:	9f 5f       	subi	r25, 0xFF	; 255
    2ab0:	c9 f7       	brne	.-14     	; 0x2aa4 <__divsf3_pse+0x78>
    2ab2:	88 0f       	add	r24, r24
    2ab4:	91 1d       	adc	r25, r1
    2ab6:	96 95       	lsr	r25
    2ab8:	87 95       	ror	r24
    2aba:	97 f9       	bld	r25, 7
    2abc:	08 95       	ret
    2abe:	e1 e0       	ldi	r30, 0x01	; 1
    2ac0:	66 0f       	add	r22, r22
    2ac2:	77 1f       	adc	r23, r23
    2ac4:	88 1f       	adc	r24, r24
    2ac6:	bb 1f       	adc	r27, r27
    2ac8:	62 17       	cp	r22, r18
    2aca:	73 07       	cpc	r23, r19
    2acc:	84 07       	cpc	r24, r20
    2ace:	ba 07       	cpc	r27, r26
    2ad0:	20 f0       	brcs	.+8      	; 0x2ada <__divsf3_pse+0xae>
    2ad2:	62 1b       	sub	r22, r18
    2ad4:	73 0b       	sbc	r23, r19
    2ad6:	84 0b       	sbc	r24, r20
    2ad8:	ba 0b       	sbc	r27, r26
    2ada:	ee 1f       	adc	r30, r30
    2adc:	88 f7       	brcc	.-30     	; 0x2ac0 <__divsf3_pse+0x94>
    2ade:	e0 95       	com	r30
    2ae0:	08 95       	ret

00002ae2 <__fixunssfsi>:
    2ae2:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__fp_splitA>
    2ae6:	88 f0       	brcs	.+34     	; 0x2b0a <__fixunssfsi+0x28>
    2ae8:	9f 57       	subi	r25, 0x7F	; 127
    2aea:	98 f0       	brcs	.+38     	; 0x2b12 <__fixunssfsi+0x30>
    2aec:	b9 2f       	mov	r27, r25
    2aee:	99 27       	eor	r25, r25
    2af0:	b7 51       	subi	r27, 0x17	; 23
    2af2:	b0 f0       	brcs	.+44     	; 0x2b20 <__fixunssfsi+0x3e>
    2af4:	e1 f0       	breq	.+56     	; 0x2b2e <__fixunssfsi+0x4c>
    2af6:	66 0f       	add	r22, r22
    2af8:	77 1f       	adc	r23, r23
    2afa:	88 1f       	adc	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	1a f0       	brmi	.+6      	; 0x2b06 <__fixunssfsi+0x24>
    2b00:	ba 95       	dec	r27
    2b02:	c9 f7       	brne	.-14     	; 0x2af6 <__fixunssfsi+0x14>
    2b04:	14 c0       	rjmp	.+40     	; 0x2b2e <__fixunssfsi+0x4c>
    2b06:	b1 30       	cpi	r27, 0x01	; 1
    2b08:	91 f0       	breq	.+36     	; 0x2b2e <__fixunssfsi+0x4c>
    2b0a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__fp_zero>
    2b0e:	b1 e0       	ldi	r27, 0x01	; 1
    2b10:	08 95       	ret
    2b12:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__fp_zero>
    2b16:	67 2f       	mov	r22, r23
    2b18:	78 2f       	mov	r23, r24
    2b1a:	88 27       	eor	r24, r24
    2b1c:	b8 5f       	subi	r27, 0xF8	; 248
    2b1e:	39 f0       	breq	.+14     	; 0x2b2e <__fixunssfsi+0x4c>
    2b20:	b9 3f       	cpi	r27, 0xF9	; 249
    2b22:	cc f3       	brlt	.-14     	; 0x2b16 <__fixunssfsi+0x34>
    2b24:	86 95       	lsr	r24
    2b26:	77 95       	ror	r23
    2b28:	67 95       	ror	r22
    2b2a:	b3 95       	inc	r27
    2b2c:	d9 f7       	brne	.-10     	; 0x2b24 <__fixunssfsi+0x42>
    2b2e:	3e f4       	brtc	.+14     	; 0x2b3e <__fixunssfsi+0x5c>
    2b30:	90 95       	com	r25
    2b32:	80 95       	com	r24
    2b34:	70 95       	com	r23
    2b36:	61 95       	neg	r22
    2b38:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b3e:	08 95       	ret

00002b40 <__floatunsisf>:
    2b40:	e8 94       	clt
    2b42:	09 c0       	rjmp	.+18     	; 0x2b56 <__floatsisf+0x12>

00002b44 <__floatsisf>:
    2b44:	97 fb       	bst	r25, 7
    2b46:	3e f4       	brtc	.+14     	; 0x2b56 <__floatsisf+0x12>
    2b48:	90 95       	com	r25
    2b4a:	80 95       	com	r24
    2b4c:	70 95       	com	r23
    2b4e:	61 95       	neg	r22
    2b50:	7f 4f       	sbci	r23, 0xFF	; 255
    2b52:	8f 4f       	sbci	r24, 0xFF	; 255
    2b54:	9f 4f       	sbci	r25, 0xFF	; 255
    2b56:	99 23       	and	r25, r25
    2b58:	a9 f0       	breq	.+42     	; 0x2b84 <__floatsisf+0x40>
    2b5a:	f9 2f       	mov	r31, r25
    2b5c:	96 e9       	ldi	r25, 0x96	; 150
    2b5e:	bb 27       	eor	r27, r27
    2b60:	93 95       	inc	r25
    2b62:	f6 95       	lsr	r31
    2b64:	87 95       	ror	r24
    2b66:	77 95       	ror	r23
    2b68:	67 95       	ror	r22
    2b6a:	b7 95       	ror	r27
    2b6c:	f1 11       	cpse	r31, r1
    2b6e:	f8 cf       	rjmp	.-16     	; 0x2b60 <__floatsisf+0x1c>
    2b70:	fa f4       	brpl	.+62     	; 0x2bb0 <__floatsisf+0x6c>
    2b72:	bb 0f       	add	r27, r27
    2b74:	11 f4       	brne	.+4      	; 0x2b7a <__floatsisf+0x36>
    2b76:	60 ff       	sbrs	r22, 0
    2b78:	1b c0       	rjmp	.+54     	; 0x2bb0 <__floatsisf+0x6c>
    2b7a:	6f 5f       	subi	r22, 0xFF	; 255
    2b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b80:	9f 4f       	sbci	r25, 0xFF	; 255
    2b82:	16 c0       	rjmp	.+44     	; 0x2bb0 <__floatsisf+0x6c>
    2b84:	88 23       	and	r24, r24
    2b86:	11 f0       	breq	.+4      	; 0x2b8c <__floatsisf+0x48>
    2b88:	96 e9       	ldi	r25, 0x96	; 150
    2b8a:	11 c0       	rjmp	.+34     	; 0x2bae <__floatsisf+0x6a>
    2b8c:	77 23       	and	r23, r23
    2b8e:	21 f0       	breq	.+8      	; 0x2b98 <__floatsisf+0x54>
    2b90:	9e e8       	ldi	r25, 0x8E	; 142
    2b92:	87 2f       	mov	r24, r23
    2b94:	76 2f       	mov	r23, r22
    2b96:	05 c0       	rjmp	.+10     	; 0x2ba2 <__floatsisf+0x5e>
    2b98:	66 23       	and	r22, r22
    2b9a:	71 f0       	breq	.+28     	; 0x2bb8 <__floatsisf+0x74>
    2b9c:	96 e8       	ldi	r25, 0x86	; 134
    2b9e:	86 2f       	mov	r24, r22
    2ba0:	70 e0       	ldi	r23, 0x00	; 0
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	2a f0       	brmi	.+10     	; 0x2bb0 <__floatsisf+0x6c>
    2ba6:	9a 95       	dec	r25
    2ba8:	66 0f       	add	r22, r22
    2baa:	77 1f       	adc	r23, r23
    2bac:	88 1f       	adc	r24, r24
    2bae:	da f7       	brpl	.-10     	; 0x2ba6 <__floatsisf+0x62>
    2bb0:	88 0f       	add	r24, r24
    2bb2:	96 95       	lsr	r25
    2bb4:	87 95       	ror	r24
    2bb6:	97 f9       	bld	r25, 7
    2bb8:	08 95       	ret

00002bba <__fp_cmp>:
    2bba:	99 0f       	add	r25, r25
    2bbc:	00 08       	sbc	r0, r0
    2bbe:	55 0f       	add	r21, r21
    2bc0:	aa 0b       	sbc	r26, r26
    2bc2:	e0 e8       	ldi	r30, 0x80	; 128
    2bc4:	fe ef       	ldi	r31, 0xFE	; 254
    2bc6:	16 16       	cp	r1, r22
    2bc8:	17 06       	cpc	r1, r23
    2bca:	e8 07       	cpc	r30, r24
    2bcc:	f9 07       	cpc	r31, r25
    2bce:	c0 f0       	brcs	.+48     	; 0x2c00 <__fp_cmp+0x46>
    2bd0:	12 16       	cp	r1, r18
    2bd2:	13 06       	cpc	r1, r19
    2bd4:	e4 07       	cpc	r30, r20
    2bd6:	f5 07       	cpc	r31, r21
    2bd8:	98 f0       	brcs	.+38     	; 0x2c00 <__fp_cmp+0x46>
    2bda:	62 1b       	sub	r22, r18
    2bdc:	73 0b       	sbc	r23, r19
    2bde:	84 0b       	sbc	r24, r20
    2be0:	95 0b       	sbc	r25, r21
    2be2:	39 f4       	brne	.+14     	; 0x2bf2 <__fp_cmp+0x38>
    2be4:	0a 26       	eor	r0, r26
    2be6:	61 f0       	breq	.+24     	; 0x2c00 <__fp_cmp+0x46>
    2be8:	23 2b       	or	r18, r19
    2bea:	24 2b       	or	r18, r20
    2bec:	25 2b       	or	r18, r21
    2bee:	21 f4       	brne	.+8      	; 0x2bf8 <__fp_cmp+0x3e>
    2bf0:	08 95       	ret
    2bf2:	0a 26       	eor	r0, r26
    2bf4:	09 f4       	brne	.+2      	; 0x2bf8 <__fp_cmp+0x3e>
    2bf6:	a1 40       	sbci	r26, 0x01	; 1
    2bf8:	a6 95       	lsr	r26
    2bfa:	8f ef       	ldi	r24, 0xFF	; 255
    2bfc:	81 1d       	adc	r24, r1
    2bfe:	81 1d       	adc	r24, r1
    2c00:	08 95       	ret

00002c02 <__fp_inf>:
    2c02:	97 f9       	bld	r25, 7
    2c04:	9f 67       	ori	r25, 0x7F	; 127
    2c06:	80 e8       	ldi	r24, 0x80	; 128
    2c08:	70 e0       	ldi	r23, 0x00	; 0
    2c0a:	60 e0       	ldi	r22, 0x00	; 0
    2c0c:	08 95       	ret

00002c0e <__fp_nan>:
    2c0e:	9f ef       	ldi	r25, 0xFF	; 255
    2c10:	80 ec       	ldi	r24, 0xC0	; 192
    2c12:	08 95       	ret

00002c14 <__fp_pscA>:
    2c14:	00 24       	eor	r0, r0
    2c16:	0a 94       	dec	r0
    2c18:	16 16       	cp	r1, r22
    2c1a:	17 06       	cpc	r1, r23
    2c1c:	18 06       	cpc	r1, r24
    2c1e:	09 06       	cpc	r0, r25
    2c20:	08 95       	ret

00002c22 <__fp_pscB>:
    2c22:	00 24       	eor	r0, r0
    2c24:	0a 94       	dec	r0
    2c26:	12 16       	cp	r1, r18
    2c28:	13 06       	cpc	r1, r19
    2c2a:	14 06       	cpc	r1, r20
    2c2c:	05 06       	cpc	r0, r21
    2c2e:	08 95       	ret

00002c30 <__fp_round>:
    2c30:	09 2e       	mov	r0, r25
    2c32:	03 94       	inc	r0
    2c34:	00 0c       	add	r0, r0
    2c36:	11 f4       	brne	.+4      	; 0x2c3c <__fp_round+0xc>
    2c38:	88 23       	and	r24, r24
    2c3a:	52 f0       	brmi	.+20     	; 0x2c50 <__fp_round+0x20>
    2c3c:	bb 0f       	add	r27, r27
    2c3e:	40 f4       	brcc	.+16     	; 0x2c50 <__fp_round+0x20>
    2c40:	bf 2b       	or	r27, r31
    2c42:	11 f4       	brne	.+4      	; 0x2c48 <__fp_round+0x18>
    2c44:	60 ff       	sbrs	r22, 0
    2c46:	04 c0       	rjmp	.+8      	; 0x2c50 <__fp_round+0x20>
    2c48:	6f 5f       	subi	r22, 0xFF	; 255
    2c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c4c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c50:	08 95       	ret

00002c52 <__fp_split3>:
    2c52:	57 fd       	sbrc	r21, 7
    2c54:	90 58       	subi	r25, 0x80	; 128
    2c56:	44 0f       	add	r20, r20
    2c58:	55 1f       	adc	r21, r21
    2c5a:	59 f0       	breq	.+22     	; 0x2c72 <__fp_splitA+0x10>
    2c5c:	5f 3f       	cpi	r21, 0xFF	; 255
    2c5e:	71 f0       	breq	.+28     	; 0x2c7c <__fp_splitA+0x1a>
    2c60:	47 95       	ror	r20

00002c62 <__fp_splitA>:
    2c62:	88 0f       	add	r24, r24
    2c64:	97 fb       	bst	r25, 7
    2c66:	99 1f       	adc	r25, r25
    2c68:	61 f0       	breq	.+24     	; 0x2c82 <__fp_splitA+0x20>
    2c6a:	9f 3f       	cpi	r25, 0xFF	; 255
    2c6c:	79 f0       	breq	.+30     	; 0x2c8c <__fp_splitA+0x2a>
    2c6e:	87 95       	ror	r24
    2c70:	08 95       	ret
    2c72:	12 16       	cp	r1, r18
    2c74:	13 06       	cpc	r1, r19
    2c76:	14 06       	cpc	r1, r20
    2c78:	55 1f       	adc	r21, r21
    2c7a:	f2 cf       	rjmp	.-28     	; 0x2c60 <__fp_split3+0xe>
    2c7c:	46 95       	lsr	r20
    2c7e:	f1 df       	rcall	.-30     	; 0x2c62 <__fp_splitA>
    2c80:	08 c0       	rjmp	.+16     	; 0x2c92 <__fp_splitA+0x30>
    2c82:	16 16       	cp	r1, r22
    2c84:	17 06       	cpc	r1, r23
    2c86:	18 06       	cpc	r1, r24
    2c88:	99 1f       	adc	r25, r25
    2c8a:	f1 cf       	rjmp	.-30     	; 0x2c6e <__fp_splitA+0xc>
    2c8c:	86 95       	lsr	r24
    2c8e:	71 05       	cpc	r23, r1
    2c90:	61 05       	cpc	r22, r1
    2c92:	08 94       	sec
    2c94:	08 95       	ret

00002c96 <__fp_zero>:
    2c96:	e8 94       	clt

00002c98 <__fp_szero>:
    2c98:	bb 27       	eor	r27, r27
    2c9a:	66 27       	eor	r22, r22
    2c9c:	77 27       	eor	r23, r23
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	97 f9       	bld	r25, 7
    2ca2:	08 95       	ret

00002ca4 <__gesf2>:
    2ca4:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__fp_cmp>
    2ca8:	08 f4       	brcc	.+2      	; 0x2cac <__gesf2+0x8>
    2caa:	8f ef       	ldi	r24, 0xFF	; 255
    2cac:	08 95       	ret

00002cae <__mulsf3>:
    2cae:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3x>
    2cb2:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__fp_round>
    2cb6:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__fp_pscA>
    2cba:	38 f0       	brcs	.+14     	; 0x2cca <__mulsf3+0x1c>
    2cbc:	0e 94 11 16 	call	0x2c22	; 0x2c22 <__fp_pscB>
    2cc0:	20 f0       	brcs	.+8      	; 0x2cca <__mulsf3+0x1c>
    2cc2:	95 23       	and	r25, r21
    2cc4:	11 f0       	breq	.+4      	; 0x2cca <__mulsf3+0x1c>
    2cc6:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__fp_inf>
    2cca:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <__fp_nan>
    2cce:	11 24       	eor	r1, r1
    2cd0:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__fp_szero>

00002cd4 <__mulsf3x>:
    2cd4:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__fp_split3>
    2cd8:	70 f3       	brcs	.-36     	; 0x2cb6 <__mulsf3+0x8>

00002cda <__mulsf3_pse>:
    2cda:	95 9f       	mul	r25, r21
    2cdc:	c1 f3       	breq	.-16     	; 0x2cce <__mulsf3+0x20>
    2cde:	95 0f       	add	r25, r21
    2ce0:	50 e0       	ldi	r21, 0x00	; 0
    2ce2:	55 1f       	adc	r21, r21
    2ce4:	62 9f       	mul	r22, r18
    2ce6:	f0 01       	movw	r30, r0
    2ce8:	72 9f       	mul	r23, r18
    2cea:	bb 27       	eor	r27, r27
    2cec:	f0 0d       	add	r31, r0
    2cee:	b1 1d       	adc	r27, r1
    2cf0:	63 9f       	mul	r22, r19
    2cf2:	aa 27       	eor	r26, r26
    2cf4:	f0 0d       	add	r31, r0
    2cf6:	b1 1d       	adc	r27, r1
    2cf8:	aa 1f       	adc	r26, r26
    2cfa:	64 9f       	mul	r22, r20
    2cfc:	66 27       	eor	r22, r22
    2cfe:	b0 0d       	add	r27, r0
    2d00:	a1 1d       	adc	r26, r1
    2d02:	66 1f       	adc	r22, r22
    2d04:	82 9f       	mul	r24, r18
    2d06:	22 27       	eor	r18, r18
    2d08:	b0 0d       	add	r27, r0
    2d0a:	a1 1d       	adc	r26, r1
    2d0c:	62 1f       	adc	r22, r18
    2d0e:	73 9f       	mul	r23, r19
    2d10:	b0 0d       	add	r27, r0
    2d12:	a1 1d       	adc	r26, r1
    2d14:	62 1f       	adc	r22, r18
    2d16:	83 9f       	mul	r24, r19
    2d18:	a0 0d       	add	r26, r0
    2d1a:	61 1d       	adc	r22, r1
    2d1c:	22 1f       	adc	r18, r18
    2d1e:	74 9f       	mul	r23, r20
    2d20:	33 27       	eor	r19, r19
    2d22:	a0 0d       	add	r26, r0
    2d24:	61 1d       	adc	r22, r1
    2d26:	23 1f       	adc	r18, r19
    2d28:	84 9f       	mul	r24, r20
    2d2a:	60 0d       	add	r22, r0
    2d2c:	21 1d       	adc	r18, r1
    2d2e:	82 2f       	mov	r24, r18
    2d30:	76 2f       	mov	r23, r22
    2d32:	6a 2f       	mov	r22, r26
    2d34:	11 24       	eor	r1, r1
    2d36:	9f 57       	subi	r25, 0x7F	; 127
    2d38:	50 40       	sbci	r21, 0x00	; 0
    2d3a:	9a f0       	brmi	.+38     	; 0x2d62 <__mulsf3_pse+0x88>
    2d3c:	f1 f0       	breq	.+60     	; 0x2d7a <__mulsf3_pse+0xa0>
    2d3e:	88 23       	and	r24, r24
    2d40:	4a f0       	brmi	.+18     	; 0x2d54 <__mulsf3_pse+0x7a>
    2d42:	ee 0f       	add	r30, r30
    2d44:	ff 1f       	adc	r31, r31
    2d46:	bb 1f       	adc	r27, r27
    2d48:	66 1f       	adc	r22, r22
    2d4a:	77 1f       	adc	r23, r23
    2d4c:	88 1f       	adc	r24, r24
    2d4e:	91 50       	subi	r25, 0x01	; 1
    2d50:	50 40       	sbci	r21, 0x00	; 0
    2d52:	a9 f7       	brne	.-22     	; 0x2d3e <__mulsf3_pse+0x64>
    2d54:	9e 3f       	cpi	r25, 0xFE	; 254
    2d56:	51 05       	cpc	r21, r1
    2d58:	80 f0       	brcs	.+32     	; 0x2d7a <__mulsf3_pse+0xa0>
    2d5a:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__fp_inf>
    2d5e:	0c 94 4c 16 	jmp	0x2c98	; 0x2c98 <__fp_szero>
    2d62:	5f 3f       	cpi	r21, 0xFF	; 255
    2d64:	e4 f3       	brlt	.-8      	; 0x2d5e <__mulsf3_pse+0x84>
    2d66:	98 3e       	cpi	r25, 0xE8	; 232
    2d68:	d4 f3       	brlt	.-12     	; 0x2d5e <__mulsf3_pse+0x84>
    2d6a:	86 95       	lsr	r24
    2d6c:	77 95       	ror	r23
    2d6e:	67 95       	ror	r22
    2d70:	b7 95       	ror	r27
    2d72:	f7 95       	ror	r31
    2d74:	e7 95       	ror	r30
    2d76:	9f 5f       	subi	r25, 0xFF	; 255
    2d78:	c1 f7       	brne	.-16     	; 0x2d6a <__mulsf3_pse+0x90>
    2d7a:	fe 2b       	or	r31, r30
    2d7c:	88 0f       	add	r24, r24
    2d7e:	91 1d       	adc	r25, r1
    2d80:	96 95       	lsr	r25
    2d82:	87 95       	ror	r24
    2d84:	97 f9       	bld	r25, 7
    2d86:	08 95       	ret

00002d88 <strcmp>:
    2d88:	fb 01       	movw	r30, r22
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	8d 91       	ld	r24, X+
    2d8e:	01 90       	ld	r0, Z+
    2d90:	80 19       	sub	r24, r0
    2d92:	01 10       	cpse	r0, r1
    2d94:	d9 f3       	breq	.-10     	; 0x2d8c <strcmp+0x4>
    2d96:	99 0b       	sbc	r25, r25
    2d98:	08 95       	ret

00002d9a <strcpy>:
    2d9a:	fb 01       	movw	r30, r22
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	01 90       	ld	r0, Z+
    2da0:	0d 92       	st	X+, r0
    2da2:	00 20       	and	r0, r0
    2da4:	e1 f7       	brne	.-8      	; 0x2d9e <strcpy+0x4>
    2da6:	08 95       	ret

00002da8 <strncpy>:
    2da8:	fb 01       	movw	r30, r22
    2daa:	dc 01       	movw	r26, r24
    2dac:	41 50       	subi	r20, 0x01	; 1
    2dae:	50 40       	sbci	r21, 0x00	; 0
    2db0:	48 f0       	brcs	.+18     	; 0x2dc4 <strncpy+0x1c>
    2db2:	01 90       	ld	r0, Z+
    2db4:	0d 92       	st	X+, r0
    2db6:	00 20       	and	r0, r0
    2db8:	c9 f7       	brne	.-14     	; 0x2dac <strncpy+0x4>
    2dba:	01 c0       	rjmp	.+2      	; 0x2dbe <strncpy+0x16>
    2dbc:	1d 92       	st	X+, r1
    2dbe:	41 50       	subi	r20, 0x01	; 1
    2dc0:	50 40       	sbci	r21, 0x00	; 0
    2dc2:	e0 f7       	brcc	.-8      	; 0x2dbc <strncpy+0x14>
    2dc4:	08 95       	ret

00002dc6 <printf>:
    2dc6:	a0 e0       	ldi	r26, 0x00	; 0
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e9 ee       	ldi	r30, 0xE9	; 233
    2dcc:	f6 e1       	ldi	r31, 0x16	; 22
    2dce:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__prologue_saves__+0x20>
    2dd2:	ae 01       	movw	r20, r28
    2dd4:	4b 5f       	subi	r20, 0xFB	; 251
    2dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    2dd8:	fa 01       	movw	r30, r20
    2dda:	61 91       	ld	r22, Z+
    2ddc:	71 91       	ld	r23, Z+
    2dde:	af 01       	movw	r20, r30
    2de0:	80 91 f0 29 	lds	r24, 0x29F0	; 0x8029f0 <__iob+0x2>
    2de4:	90 91 f1 29 	lds	r25, 0x29F1	; 0x8029f1 <__iob+0x3>
    2de8:	0e 94 29 17 	call	0x2e52	; 0x2e52 <vfprintf>
    2dec:	e2 e0       	ldi	r30, 0x02	; 2
    2dee:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__epilogue_restores__+0x20>

00002df2 <snprintf>:
    2df2:	ae e0       	ldi	r26, 0x0E	; 14
    2df4:	b0 e0       	ldi	r27, 0x00	; 0
    2df6:	ef ef       	ldi	r30, 0xFF	; 255
    2df8:	f6 e1       	ldi	r31, 0x16	; 22
    2dfa:	0c 94 c8 19 	jmp	0x3390	; 0x3390 <__prologue_saves__+0x1c>
    2dfe:	0d 89       	ldd	r16, Y+21	; 0x15
    2e00:	1e 89       	ldd	r17, Y+22	; 0x16
    2e02:	8f 89       	ldd	r24, Y+23	; 0x17
    2e04:	98 8d       	ldd	r25, Y+24	; 0x18
    2e06:	26 e0       	ldi	r18, 0x06	; 6
    2e08:	2c 83       	std	Y+4, r18	; 0x04
    2e0a:	09 83       	std	Y+1, r16	; 0x01
    2e0c:	1a 83       	std	Y+2, r17	; 0x02
    2e0e:	97 ff       	sbrs	r25, 7
    2e10:	02 c0       	rjmp	.+4      	; 0x2e16 <snprintf+0x24>
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	90 e8       	ldi	r25, 0x80	; 128
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	8d 83       	std	Y+5, r24	; 0x05
    2e1a:	9e 83       	std	Y+6, r25	; 0x06
    2e1c:	ae 01       	movw	r20, r28
    2e1e:	45 5e       	subi	r20, 0xE5	; 229
    2e20:	5f 4f       	sbci	r21, 0xFF	; 255
    2e22:	69 8d       	ldd	r22, Y+25	; 0x19
    2e24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e26:	ce 01       	movw	r24, r28
    2e28:	01 96       	adiw	r24, 0x01	; 1
    2e2a:	0e 94 29 17 	call	0x2e52	; 0x2e52 <vfprintf>
    2e2e:	4d 81       	ldd	r20, Y+5	; 0x05
    2e30:	5e 81       	ldd	r21, Y+6	; 0x06
    2e32:	57 fd       	sbrc	r21, 7
    2e34:	0a c0       	rjmp	.+20     	; 0x2e4a <snprintf+0x58>
    2e36:	2f 81       	ldd	r18, Y+7	; 0x07
    2e38:	38 85       	ldd	r19, Y+8	; 0x08
    2e3a:	42 17       	cp	r20, r18
    2e3c:	53 07       	cpc	r21, r19
    2e3e:	0c f4       	brge	.+2      	; 0x2e42 <snprintf+0x50>
    2e40:	9a 01       	movw	r18, r20
    2e42:	f8 01       	movw	r30, r16
    2e44:	e2 0f       	add	r30, r18
    2e46:	f3 1f       	adc	r31, r19
    2e48:	10 82       	st	Z, r1
    2e4a:	2e 96       	adiw	r28, 0x0e	; 14
    2e4c:	e4 e0       	ldi	r30, 0x04	; 4
    2e4e:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <__epilogue_restores__+0x1c>

00002e52 <vfprintf>:
    2e52:	ab e0       	ldi	r26, 0x0B	; 11
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	ef e2       	ldi	r30, 0x2F	; 47
    2e58:	f7 e1       	ldi	r31, 0x17	; 23
    2e5a:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__prologue_saves__>
    2e5e:	6c 01       	movw	r12, r24
    2e60:	7b 01       	movw	r14, r22
    2e62:	8a 01       	movw	r16, r20
    2e64:	fc 01       	movw	r30, r24
    2e66:	16 82       	std	Z+6, r1	; 0x06
    2e68:	17 82       	std	Z+7, r1	; 0x07
    2e6a:	83 81       	ldd	r24, Z+3	; 0x03
    2e6c:	81 ff       	sbrs	r24, 1
    2e6e:	cc c1       	rjmp	.+920    	; 0x3208 <vfprintf+0x3b6>
    2e70:	ce 01       	movw	r24, r28
    2e72:	01 96       	adiw	r24, 0x01	; 1
    2e74:	3c 01       	movw	r6, r24
    2e76:	f6 01       	movw	r30, r12
    2e78:	93 81       	ldd	r25, Z+3	; 0x03
    2e7a:	f7 01       	movw	r30, r14
    2e7c:	93 fd       	sbrc	r25, 3
    2e7e:	85 91       	lpm	r24, Z+
    2e80:	93 ff       	sbrs	r25, 3
    2e82:	81 91       	ld	r24, Z+
    2e84:	7f 01       	movw	r14, r30
    2e86:	88 23       	and	r24, r24
    2e88:	09 f4       	brne	.+2      	; 0x2e8c <vfprintf+0x3a>
    2e8a:	ba c1       	rjmp	.+884    	; 0x3200 <vfprintf+0x3ae>
    2e8c:	85 32       	cpi	r24, 0x25	; 37
    2e8e:	39 f4       	brne	.+14     	; 0x2e9e <vfprintf+0x4c>
    2e90:	93 fd       	sbrc	r25, 3
    2e92:	85 91       	lpm	r24, Z+
    2e94:	93 ff       	sbrs	r25, 3
    2e96:	81 91       	ld	r24, Z+
    2e98:	7f 01       	movw	r14, r30
    2e9a:	85 32       	cpi	r24, 0x25	; 37
    2e9c:	29 f4       	brne	.+10     	; 0x2ea8 <vfprintf+0x56>
    2e9e:	b6 01       	movw	r22, r12
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	0e 94 20 19 	call	0x3240	; 0x3240 <fputc>
    2ea6:	e7 cf       	rjmp	.-50     	; 0x2e76 <vfprintf+0x24>
    2ea8:	91 2c       	mov	r9, r1
    2eaa:	21 2c       	mov	r2, r1
    2eac:	31 2c       	mov	r3, r1
    2eae:	ff e1       	ldi	r31, 0x1F	; 31
    2eb0:	f3 15       	cp	r31, r3
    2eb2:	d8 f0       	brcs	.+54     	; 0x2eea <vfprintf+0x98>
    2eb4:	8b 32       	cpi	r24, 0x2B	; 43
    2eb6:	79 f0       	breq	.+30     	; 0x2ed6 <vfprintf+0x84>
    2eb8:	38 f4       	brcc	.+14     	; 0x2ec8 <vfprintf+0x76>
    2eba:	80 32       	cpi	r24, 0x20	; 32
    2ebc:	79 f0       	breq	.+30     	; 0x2edc <vfprintf+0x8a>
    2ebe:	83 32       	cpi	r24, 0x23	; 35
    2ec0:	a1 f4       	brne	.+40     	; 0x2eea <vfprintf+0x98>
    2ec2:	23 2d       	mov	r18, r3
    2ec4:	20 61       	ori	r18, 0x10	; 16
    2ec6:	1d c0       	rjmp	.+58     	; 0x2f02 <vfprintf+0xb0>
    2ec8:	8d 32       	cpi	r24, 0x2D	; 45
    2eca:	61 f0       	breq	.+24     	; 0x2ee4 <vfprintf+0x92>
    2ecc:	80 33       	cpi	r24, 0x30	; 48
    2ece:	69 f4       	brne	.+26     	; 0x2eea <vfprintf+0x98>
    2ed0:	23 2d       	mov	r18, r3
    2ed2:	21 60       	ori	r18, 0x01	; 1
    2ed4:	16 c0       	rjmp	.+44     	; 0x2f02 <vfprintf+0xb0>
    2ed6:	83 2d       	mov	r24, r3
    2ed8:	82 60       	ori	r24, 0x02	; 2
    2eda:	38 2e       	mov	r3, r24
    2edc:	e3 2d       	mov	r30, r3
    2ede:	e4 60       	ori	r30, 0x04	; 4
    2ee0:	3e 2e       	mov	r3, r30
    2ee2:	2a c0       	rjmp	.+84     	; 0x2f38 <vfprintf+0xe6>
    2ee4:	f3 2d       	mov	r31, r3
    2ee6:	f8 60       	ori	r31, 0x08	; 8
    2ee8:	1d c0       	rjmp	.+58     	; 0x2f24 <vfprintf+0xd2>
    2eea:	37 fc       	sbrc	r3, 7
    2eec:	2d c0       	rjmp	.+90     	; 0x2f48 <vfprintf+0xf6>
    2eee:	20 ed       	ldi	r18, 0xD0	; 208
    2ef0:	28 0f       	add	r18, r24
    2ef2:	2a 30       	cpi	r18, 0x0A	; 10
    2ef4:	40 f0       	brcs	.+16     	; 0x2f06 <vfprintf+0xb4>
    2ef6:	8e 32       	cpi	r24, 0x2E	; 46
    2ef8:	b9 f4       	brne	.+46     	; 0x2f28 <vfprintf+0xd6>
    2efa:	36 fc       	sbrc	r3, 6
    2efc:	81 c1       	rjmp	.+770    	; 0x3200 <vfprintf+0x3ae>
    2efe:	23 2d       	mov	r18, r3
    2f00:	20 64       	ori	r18, 0x40	; 64
    2f02:	32 2e       	mov	r3, r18
    2f04:	19 c0       	rjmp	.+50     	; 0x2f38 <vfprintf+0xe6>
    2f06:	36 fe       	sbrs	r3, 6
    2f08:	06 c0       	rjmp	.+12     	; 0x2f16 <vfprintf+0xc4>
    2f0a:	8a e0       	ldi	r24, 0x0A	; 10
    2f0c:	98 9e       	mul	r9, r24
    2f0e:	20 0d       	add	r18, r0
    2f10:	11 24       	eor	r1, r1
    2f12:	92 2e       	mov	r9, r18
    2f14:	11 c0       	rjmp	.+34     	; 0x2f38 <vfprintf+0xe6>
    2f16:	ea e0       	ldi	r30, 0x0A	; 10
    2f18:	2e 9e       	mul	r2, r30
    2f1a:	20 0d       	add	r18, r0
    2f1c:	11 24       	eor	r1, r1
    2f1e:	22 2e       	mov	r2, r18
    2f20:	f3 2d       	mov	r31, r3
    2f22:	f0 62       	ori	r31, 0x20	; 32
    2f24:	3f 2e       	mov	r3, r31
    2f26:	08 c0       	rjmp	.+16     	; 0x2f38 <vfprintf+0xe6>
    2f28:	8c 36       	cpi	r24, 0x6C	; 108
    2f2a:	21 f4       	brne	.+8      	; 0x2f34 <vfprintf+0xe2>
    2f2c:	83 2d       	mov	r24, r3
    2f2e:	80 68       	ori	r24, 0x80	; 128
    2f30:	38 2e       	mov	r3, r24
    2f32:	02 c0       	rjmp	.+4      	; 0x2f38 <vfprintf+0xe6>
    2f34:	88 36       	cpi	r24, 0x68	; 104
    2f36:	41 f4       	brne	.+16     	; 0x2f48 <vfprintf+0xf6>
    2f38:	f7 01       	movw	r30, r14
    2f3a:	93 fd       	sbrc	r25, 3
    2f3c:	85 91       	lpm	r24, Z+
    2f3e:	93 ff       	sbrs	r25, 3
    2f40:	81 91       	ld	r24, Z+
    2f42:	7f 01       	movw	r14, r30
    2f44:	81 11       	cpse	r24, r1
    2f46:	b3 cf       	rjmp	.-154    	; 0x2eae <vfprintf+0x5c>
    2f48:	98 2f       	mov	r25, r24
    2f4a:	9f 7d       	andi	r25, 0xDF	; 223
    2f4c:	95 54       	subi	r25, 0x45	; 69
    2f4e:	93 30       	cpi	r25, 0x03	; 3
    2f50:	28 f4       	brcc	.+10     	; 0x2f5c <vfprintf+0x10a>
    2f52:	0c 5f       	subi	r16, 0xFC	; 252
    2f54:	1f 4f       	sbci	r17, 0xFF	; 255
    2f56:	9f e3       	ldi	r25, 0x3F	; 63
    2f58:	99 83       	std	Y+1, r25	; 0x01
    2f5a:	0d c0       	rjmp	.+26     	; 0x2f76 <vfprintf+0x124>
    2f5c:	83 36       	cpi	r24, 0x63	; 99
    2f5e:	31 f0       	breq	.+12     	; 0x2f6c <vfprintf+0x11a>
    2f60:	83 37       	cpi	r24, 0x73	; 115
    2f62:	71 f0       	breq	.+28     	; 0x2f80 <vfprintf+0x12e>
    2f64:	83 35       	cpi	r24, 0x53	; 83
    2f66:	09 f0       	breq	.+2      	; 0x2f6a <vfprintf+0x118>
    2f68:	59 c0       	rjmp	.+178    	; 0x301c <vfprintf+0x1ca>
    2f6a:	21 c0       	rjmp	.+66     	; 0x2fae <vfprintf+0x15c>
    2f6c:	f8 01       	movw	r30, r16
    2f6e:	80 81       	ld	r24, Z
    2f70:	89 83       	std	Y+1, r24	; 0x01
    2f72:	0e 5f       	subi	r16, 0xFE	; 254
    2f74:	1f 4f       	sbci	r17, 0xFF	; 255
    2f76:	88 24       	eor	r8, r8
    2f78:	83 94       	inc	r8
    2f7a:	91 2c       	mov	r9, r1
    2f7c:	53 01       	movw	r10, r6
    2f7e:	13 c0       	rjmp	.+38     	; 0x2fa6 <vfprintf+0x154>
    2f80:	28 01       	movw	r4, r16
    2f82:	f2 e0       	ldi	r31, 0x02	; 2
    2f84:	4f 0e       	add	r4, r31
    2f86:	51 1c       	adc	r5, r1
    2f88:	f8 01       	movw	r30, r16
    2f8a:	a0 80       	ld	r10, Z
    2f8c:	b1 80       	ldd	r11, Z+1	; 0x01
    2f8e:	36 fe       	sbrs	r3, 6
    2f90:	03 c0       	rjmp	.+6      	; 0x2f98 <vfprintf+0x146>
    2f92:	69 2d       	mov	r22, r9
    2f94:	70 e0       	ldi	r23, 0x00	; 0
    2f96:	02 c0       	rjmp	.+4      	; 0x2f9c <vfprintf+0x14a>
    2f98:	6f ef       	ldi	r22, 0xFF	; 255
    2f9a:	7f ef       	ldi	r23, 0xFF	; 255
    2f9c:	c5 01       	movw	r24, r10
    2f9e:	0e 94 15 19 	call	0x322a	; 0x322a <strnlen>
    2fa2:	4c 01       	movw	r8, r24
    2fa4:	82 01       	movw	r16, r4
    2fa6:	f3 2d       	mov	r31, r3
    2fa8:	ff 77       	andi	r31, 0x7F	; 127
    2faa:	3f 2e       	mov	r3, r31
    2fac:	16 c0       	rjmp	.+44     	; 0x2fda <vfprintf+0x188>
    2fae:	28 01       	movw	r4, r16
    2fb0:	22 e0       	ldi	r18, 0x02	; 2
    2fb2:	42 0e       	add	r4, r18
    2fb4:	51 1c       	adc	r5, r1
    2fb6:	f8 01       	movw	r30, r16
    2fb8:	a0 80       	ld	r10, Z
    2fba:	b1 80       	ldd	r11, Z+1	; 0x01
    2fbc:	36 fe       	sbrs	r3, 6
    2fbe:	03 c0       	rjmp	.+6      	; 0x2fc6 <vfprintf+0x174>
    2fc0:	69 2d       	mov	r22, r9
    2fc2:	70 e0       	ldi	r23, 0x00	; 0
    2fc4:	02 c0       	rjmp	.+4      	; 0x2fca <vfprintf+0x178>
    2fc6:	6f ef       	ldi	r22, 0xFF	; 255
    2fc8:	7f ef       	ldi	r23, 0xFF	; 255
    2fca:	c5 01       	movw	r24, r10
    2fcc:	0e 94 0a 19 	call	0x3214	; 0x3214 <strnlen_P>
    2fd0:	4c 01       	movw	r8, r24
    2fd2:	f3 2d       	mov	r31, r3
    2fd4:	f0 68       	ori	r31, 0x80	; 128
    2fd6:	3f 2e       	mov	r3, r31
    2fd8:	82 01       	movw	r16, r4
    2fda:	33 fc       	sbrc	r3, 3
    2fdc:	1b c0       	rjmp	.+54     	; 0x3014 <vfprintf+0x1c2>
    2fde:	82 2d       	mov	r24, r2
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	88 16       	cp	r8, r24
    2fe4:	99 06       	cpc	r9, r25
    2fe6:	b0 f4       	brcc	.+44     	; 0x3014 <vfprintf+0x1c2>
    2fe8:	b6 01       	movw	r22, r12
    2fea:	80 e2       	ldi	r24, 0x20	; 32
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	0e 94 20 19 	call	0x3240	; 0x3240 <fputc>
    2ff2:	2a 94       	dec	r2
    2ff4:	f4 cf       	rjmp	.-24     	; 0x2fde <vfprintf+0x18c>
    2ff6:	f5 01       	movw	r30, r10
    2ff8:	37 fc       	sbrc	r3, 7
    2ffa:	85 91       	lpm	r24, Z+
    2ffc:	37 fe       	sbrs	r3, 7
    2ffe:	81 91       	ld	r24, Z+
    3000:	5f 01       	movw	r10, r30
    3002:	b6 01       	movw	r22, r12
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	0e 94 20 19 	call	0x3240	; 0x3240 <fputc>
    300a:	21 10       	cpse	r2, r1
    300c:	2a 94       	dec	r2
    300e:	21 e0       	ldi	r18, 0x01	; 1
    3010:	82 1a       	sub	r8, r18
    3012:	91 08       	sbc	r9, r1
    3014:	81 14       	cp	r8, r1
    3016:	91 04       	cpc	r9, r1
    3018:	71 f7       	brne	.-36     	; 0x2ff6 <vfprintf+0x1a4>
    301a:	e8 c0       	rjmp	.+464    	; 0x31ec <vfprintf+0x39a>
    301c:	84 36       	cpi	r24, 0x64	; 100
    301e:	11 f0       	breq	.+4      	; 0x3024 <vfprintf+0x1d2>
    3020:	89 36       	cpi	r24, 0x69	; 105
    3022:	41 f5       	brne	.+80     	; 0x3074 <vfprintf+0x222>
    3024:	f8 01       	movw	r30, r16
    3026:	37 fe       	sbrs	r3, 7
    3028:	07 c0       	rjmp	.+14     	; 0x3038 <vfprintf+0x1e6>
    302a:	60 81       	ld	r22, Z
    302c:	71 81       	ldd	r23, Z+1	; 0x01
    302e:	82 81       	ldd	r24, Z+2	; 0x02
    3030:	93 81       	ldd	r25, Z+3	; 0x03
    3032:	0c 5f       	subi	r16, 0xFC	; 252
    3034:	1f 4f       	sbci	r17, 0xFF	; 255
    3036:	08 c0       	rjmp	.+16     	; 0x3048 <vfprintf+0x1f6>
    3038:	60 81       	ld	r22, Z
    303a:	71 81       	ldd	r23, Z+1	; 0x01
    303c:	07 2e       	mov	r0, r23
    303e:	00 0c       	add	r0, r0
    3040:	88 0b       	sbc	r24, r24
    3042:	99 0b       	sbc	r25, r25
    3044:	0e 5f       	subi	r16, 0xFE	; 254
    3046:	1f 4f       	sbci	r17, 0xFF	; 255
    3048:	f3 2d       	mov	r31, r3
    304a:	ff 76       	andi	r31, 0x6F	; 111
    304c:	3f 2e       	mov	r3, r31
    304e:	97 ff       	sbrs	r25, 7
    3050:	09 c0       	rjmp	.+18     	; 0x3064 <vfprintf+0x212>
    3052:	90 95       	com	r25
    3054:	80 95       	com	r24
    3056:	70 95       	com	r23
    3058:	61 95       	neg	r22
    305a:	7f 4f       	sbci	r23, 0xFF	; 255
    305c:	8f 4f       	sbci	r24, 0xFF	; 255
    305e:	9f 4f       	sbci	r25, 0xFF	; 255
    3060:	f0 68       	ori	r31, 0x80	; 128
    3062:	3f 2e       	mov	r3, r31
    3064:	2a e0       	ldi	r18, 0x0A	; 10
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	a3 01       	movw	r20, r6
    306a:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <__ultoa_invert>
    306e:	88 2e       	mov	r8, r24
    3070:	86 18       	sub	r8, r6
    3072:	45 c0       	rjmp	.+138    	; 0x30fe <vfprintf+0x2ac>
    3074:	85 37       	cpi	r24, 0x75	; 117
    3076:	31 f4       	brne	.+12     	; 0x3084 <vfprintf+0x232>
    3078:	23 2d       	mov	r18, r3
    307a:	2f 7e       	andi	r18, 0xEF	; 239
    307c:	b2 2e       	mov	r11, r18
    307e:	2a e0       	ldi	r18, 0x0A	; 10
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	25 c0       	rjmp	.+74     	; 0x30ce <vfprintf+0x27c>
    3084:	93 2d       	mov	r25, r3
    3086:	99 7f       	andi	r25, 0xF9	; 249
    3088:	b9 2e       	mov	r11, r25
    308a:	8f 36       	cpi	r24, 0x6F	; 111
    308c:	c1 f0       	breq	.+48     	; 0x30be <vfprintf+0x26c>
    308e:	18 f4       	brcc	.+6      	; 0x3096 <vfprintf+0x244>
    3090:	88 35       	cpi	r24, 0x58	; 88
    3092:	79 f0       	breq	.+30     	; 0x30b2 <vfprintf+0x260>
    3094:	b5 c0       	rjmp	.+362    	; 0x3200 <vfprintf+0x3ae>
    3096:	80 37       	cpi	r24, 0x70	; 112
    3098:	19 f0       	breq	.+6      	; 0x30a0 <vfprintf+0x24e>
    309a:	88 37       	cpi	r24, 0x78	; 120
    309c:	21 f0       	breq	.+8      	; 0x30a6 <vfprintf+0x254>
    309e:	b0 c0       	rjmp	.+352    	; 0x3200 <vfprintf+0x3ae>
    30a0:	e9 2f       	mov	r30, r25
    30a2:	e0 61       	ori	r30, 0x10	; 16
    30a4:	be 2e       	mov	r11, r30
    30a6:	b4 fe       	sbrs	r11, 4
    30a8:	0d c0       	rjmp	.+26     	; 0x30c4 <vfprintf+0x272>
    30aa:	fb 2d       	mov	r31, r11
    30ac:	f4 60       	ori	r31, 0x04	; 4
    30ae:	bf 2e       	mov	r11, r31
    30b0:	09 c0       	rjmp	.+18     	; 0x30c4 <vfprintf+0x272>
    30b2:	34 fe       	sbrs	r3, 4
    30b4:	0a c0       	rjmp	.+20     	; 0x30ca <vfprintf+0x278>
    30b6:	29 2f       	mov	r18, r25
    30b8:	26 60       	ori	r18, 0x06	; 6
    30ba:	b2 2e       	mov	r11, r18
    30bc:	06 c0       	rjmp	.+12     	; 0x30ca <vfprintf+0x278>
    30be:	28 e0       	ldi	r18, 0x08	; 8
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	05 c0       	rjmp	.+10     	; 0x30ce <vfprintf+0x27c>
    30c4:	20 e1       	ldi	r18, 0x10	; 16
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	02 c0       	rjmp	.+4      	; 0x30ce <vfprintf+0x27c>
    30ca:	20 e1       	ldi	r18, 0x10	; 16
    30cc:	32 e0       	ldi	r19, 0x02	; 2
    30ce:	f8 01       	movw	r30, r16
    30d0:	b7 fe       	sbrs	r11, 7
    30d2:	07 c0       	rjmp	.+14     	; 0x30e2 <vfprintf+0x290>
    30d4:	60 81       	ld	r22, Z
    30d6:	71 81       	ldd	r23, Z+1	; 0x01
    30d8:	82 81       	ldd	r24, Z+2	; 0x02
    30da:	93 81       	ldd	r25, Z+3	; 0x03
    30dc:	0c 5f       	subi	r16, 0xFC	; 252
    30de:	1f 4f       	sbci	r17, 0xFF	; 255
    30e0:	06 c0       	rjmp	.+12     	; 0x30ee <vfprintf+0x29c>
    30e2:	60 81       	ld	r22, Z
    30e4:	71 81       	ldd	r23, Z+1	; 0x01
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 5f       	subi	r16, 0xFE	; 254
    30ec:	1f 4f       	sbci	r17, 0xFF	; 255
    30ee:	a3 01       	movw	r20, r6
    30f0:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <__ultoa_invert>
    30f4:	88 2e       	mov	r8, r24
    30f6:	86 18       	sub	r8, r6
    30f8:	fb 2d       	mov	r31, r11
    30fa:	ff 77       	andi	r31, 0x7F	; 127
    30fc:	3f 2e       	mov	r3, r31
    30fe:	36 fe       	sbrs	r3, 6
    3100:	0d c0       	rjmp	.+26     	; 0x311c <vfprintf+0x2ca>
    3102:	23 2d       	mov	r18, r3
    3104:	2e 7f       	andi	r18, 0xFE	; 254
    3106:	a2 2e       	mov	r10, r18
    3108:	89 14       	cp	r8, r9
    310a:	58 f4       	brcc	.+22     	; 0x3122 <vfprintf+0x2d0>
    310c:	34 fe       	sbrs	r3, 4
    310e:	0b c0       	rjmp	.+22     	; 0x3126 <vfprintf+0x2d4>
    3110:	32 fc       	sbrc	r3, 2
    3112:	09 c0       	rjmp	.+18     	; 0x3126 <vfprintf+0x2d4>
    3114:	83 2d       	mov	r24, r3
    3116:	8e 7e       	andi	r24, 0xEE	; 238
    3118:	a8 2e       	mov	r10, r24
    311a:	05 c0       	rjmp	.+10     	; 0x3126 <vfprintf+0x2d4>
    311c:	b8 2c       	mov	r11, r8
    311e:	a3 2c       	mov	r10, r3
    3120:	03 c0       	rjmp	.+6      	; 0x3128 <vfprintf+0x2d6>
    3122:	b8 2c       	mov	r11, r8
    3124:	01 c0       	rjmp	.+2      	; 0x3128 <vfprintf+0x2d6>
    3126:	b9 2c       	mov	r11, r9
    3128:	a4 fe       	sbrs	r10, 4
    312a:	0f c0       	rjmp	.+30     	; 0x314a <vfprintf+0x2f8>
    312c:	fe 01       	movw	r30, r28
    312e:	e8 0d       	add	r30, r8
    3130:	f1 1d       	adc	r31, r1
    3132:	80 81       	ld	r24, Z
    3134:	80 33       	cpi	r24, 0x30	; 48
    3136:	21 f4       	brne	.+8      	; 0x3140 <vfprintf+0x2ee>
    3138:	9a 2d       	mov	r25, r10
    313a:	99 7e       	andi	r25, 0xE9	; 233
    313c:	a9 2e       	mov	r10, r25
    313e:	09 c0       	rjmp	.+18     	; 0x3152 <vfprintf+0x300>
    3140:	a2 fe       	sbrs	r10, 2
    3142:	06 c0       	rjmp	.+12     	; 0x3150 <vfprintf+0x2fe>
    3144:	b3 94       	inc	r11
    3146:	b3 94       	inc	r11
    3148:	04 c0       	rjmp	.+8      	; 0x3152 <vfprintf+0x300>
    314a:	8a 2d       	mov	r24, r10
    314c:	86 78       	andi	r24, 0x86	; 134
    314e:	09 f0       	breq	.+2      	; 0x3152 <vfprintf+0x300>
    3150:	b3 94       	inc	r11
    3152:	a3 fc       	sbrc	r10, 3
    3154:	11 c0       	rjmp	.+34     	; 0x3178 <vfprintf+0x326>
    3156:	a0 fe       	sbrs	r10, 0
    3158:	06 c0       	rjmp	.+12     	; 0x3166 <vfprintf+0x314>
    315a:	b2 14       	cp	r11, r2
    315c:	88 f4       	brcc	.+34     	; 0x3180 <vfprintf+0x32e>
    315e:	28 0c       	add	r2, r8
    3160:	92 2c       	mov	r9, r2
    3162:	9b 18       	sub	r9, r11
    3164:	0e c0       	rjmp	.+28     	; 0x3182 <vfprintf+0x330>
    3166:	b2 14       	cp	r11, r2
    3168:	60 f4       	brcc	.+24     	; 0x3182 <vfprintf+0x330>
    316a:	b6 01       	movw	r22, r12
    316c:	80 e2       	ldi	r24, 0x20	; 32
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	0e 94 20 19 	call	0x3240	; 0x3240 <fputc>
    3174:	b3 94       	inc	r11
    3176:	f7 cf       	rjmp	.-18     	; 0x3166 <vfprintf+0x314>
    3178:	b2 14       	cp	r11, r2
    317a:	18 f4       	brcc	.+6      	; 0x3182 <vfprintf+0x330>
    317c:	2b 18       	sub	r2, r11
    317e:	02 c0       	rjmp	.+4      	; 0x3184 <vfprintf+0x332>
    3180:	98 2c       	mov	r9, r8
    3182:	21 2c       	mov	r2, r1
    3184:	a4 fe       	sbrs	r10, 4
    3186:	10 c0       	rjmp	.+32     	; 0x31a8 <vfprintf+0x356>
    3188:	b6 01       	movw	r22, r12
    318a:	80 e3       	ldi	r24, 0x30	; 48
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	0e 94 20 19 	call	0x3240	; 0x3240 <fputc>
    3192:	a2 fe       	sbrs	r10, 2
    3194:	17 c0       	rjmp	.+46     	; 0x31c4 <vfprintf+0x372>
    3196:	a1 fc       	sbrc	r10, 1
    3198:	03 c0       	rjmp	.+6      	; 0x31a0 <vfprintf+0x34e>
    319a:	88 e7       	ldi	r24, 0x78	; 120
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	02 c0       	rjmp	.+4      	; 0x31a4 <vfprintf+0x352>
    31a0:	88 e5       	ldi	r24, 0x58	; 88
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	b6 01       	movw	r22, r12
    31a6:	0c c0       	rjmp	.+24     	; 0x31c0 <vfprintf+0x36e>
    31a8:	8a 2d       	mov	r24, r10
    31aa:	86 78       	andi	r24, 0x86	; 134
    31ac:	59 f0       	breq	.+22     	; 0x31c4 <vfprintf+0x372>
    31ae:	a1 fe       	sbrs	r10, 1
    31b0:	02 c0       	rjmp	.+4      	; 0x31b6 <vfprintf+0x364>
    31b2:	8b e2       	ldi	r24, 0x2B	; 43
    31b4:	01 c0       	rjmp	.+2      	; 0x31b8 <vfprintf+0x366>
    31b6:	80 e2       	ldi	r24, 0x20	; 32
    31b8:	a7 fc       	sbrc	r10, 7
    31ba:	8d e2       	ldi	r24, 0x2D	; 45
    31bc:	b6 01       	movw	r22, r12
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	0e 94 20 19 	call	0x3240	; 0x3240 <fputc>
    31c4:	89 14       	cp	r8, r9
    31c6:	38 f4       	brcc	.+14     	; 0x31d6 <vfprintf+0x384>
    31c8:	b6 01       	movw	r22, r12
    31ca:	80 e3       	ldi	r24, 0x30	; 48
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	0e 94 20 19 	call	0x3240	; 0x3240 <fputc>
    31d2:	9a 94       	dec	r9
    31d4:	f7 cf       	rjmp	.-18     	; 0x31c4 <vfprintf+0x372>
    31d6:	8a 94       	dec	r8
    31d8:	f3 01       	movw	r30, r6
    31da:	e8 0d       	add	r30, r8
    31dc:	f1 1d       	adc	r31, r1
    31de:	80 81       	ld	r24, Z
    31e0:	b6 01       	movw	r22, r12
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	0e 94 20 19 	call	0x3240	; 0x3240 <fputc>
    31e8:	81 10       	cpse	r8, r1
    31ea:	f5 cf       	rjmp	.-22     	; 0x31d6 <vfprintf+0x384>
    31ec:	22 20       	and	r2, r2
    31ee:	09 f4       	brne	.+2      	; 0x31f2 <vfprintf+0x3a0>
    31f0:	42 ce       	rjmp	.-892    	; 0x2e76 <vfprintf+0x24>
    31f2:	b6 01       	movw	r22, r12
    31f4:	80 e2       	ldi	r24, 0x20	; 32
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	0e 94 20 19 	call	0x3240	; 0x3240 <fputc>
    31fc:	2a 94       	dec	r2
    31fe:	f6 cf       	rjmp	.-20     	; 0x31ec <vfprintf+0x39a>
    3200:	f6 01       	movw	r30, r12
    3202:	86 81       	ldd	r24, Z+6	; 0x06
    3204:	97 81       	ldd	r25, Z+7	; 0x07
    3206:	02 c0       	rjmp	.+4      	; 0x320c <vfprintf+0x3ba>
    3208:	8f ef       	ldi	r24, 0xFF	; 255
    320a:	9f ef       	ldi	r25, 0xFF	; 255
    320c:	2b 96       	adiw	r28, 0x0b	; 11
    320e:	e2 e1       	ldi	r30, 0x12	; 18
    3210:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <__epilogue_restores__>

00003214 <strnlen_P>:
    3214:	fc 01       	movw	r30, r24
    3216:	05 90       	lpm	r0, Z+
    3218:	61 50       	subi	r22, 0x01	; 1
    321a:	70 40       	sbci	r23, 0x00	; 0
    321c:	01 10       	cpse	r0, r1
    321e:	d8 f7       	brcc	.-10     	; 0x3216 <strnlen_P+0x2>
    3220:	80 95       	com	r24
    3222:	90 95       	com	r25
    3224:	8e 0f       	add	r24, r30
    3226:	9f 1f       	adc	r25, r31
    3228:	08 95       	ret

0000322a <strnlen>:
    322a:	fc 01       	movw	r30, r24
    322c:	61 50       	subi	r22, 0x01	; 1
    322e:	70 40       	sbci	r23, 0x00	; 0
    3230:	01 90       	ld	r0, Z+
    3232:	01 10       	cpse	r0, r1
    3234:	d8 f7       	brcc	.-10     	; 0x322c <strnlen+0x2>
    3236:	80 95       	com	r24
    3238:	90 95       	com	r25
    323a:	8e 0f       	add	r24, r30
    323c:	9f 1f       	adc	r25, r31
    323e:	08 95       	ret

00003240 <fputc>:
    3240:	0f 93       	push	r16
    3242:	1f 93       	push	r17
    3244:	cf 93       	push	r28
    3246:	df 93       	push	r29
    3248:	fb 01       	movw	r30, r22
    324a:	23 81       	ldd	r18, Z+3	; 0x03
    324c:	21 fd       	sbrc	r18, 1
    324e:	03 c0       	rjmp	.+6      	; 0x3256 <fputc+0x16>
    3250:	8f ef       	ldi	r24, 0xFF	; 255
    3252:	9f ef       	ldi	r25, 0xFF	; 255
    3254:	2c c0       	rjmp	.+88     	; 0x32ae <fputc+0x6e>
    3256:	22 ff       	sbrs	r18, 2
    3258:	16 c0       	rjmp	.+44     	; 0x3286 <fputc+0x46>
    325a:	46 81       	ldd	r20, Z+6	; 0x06
    325c:	57 81       	ldd	r21, Z+7	; 0x07
    325e:	24 81       	ldd	r18, Z+4	; 0x04
    3260:	35 81       	ldd	r19, Z+5	; 0x05
    3262:	42 17       	cp	r20, r18
    3264:	53 07       	cpc	r21, r19
    3266:	44 f4       	brge	.+16     	; 0x3278 <fputc+0x38>
    3268:	a0 81       	ld	r26, Z
    326a:	b1 81       	ldd	r27, Z+1	; 0x01
    326c:	9d 01       	movw	r18, r26
    326e:	2f 5f       	subi	r18, 0xFF	; 255
    3270:	3f 4f       	sbci	r19, 0xFF	; 255
    3272:	20 83       	st	Z, r18
    3274:	31 83       	std	Z+1, r19	; 0x01
    3276:	8c 93       	st	X, r24
    3278:	26 81       	ldd	r18, Z+6	; 0x06
    327a:	37 81       	ldd	r19, Z+7	; 0x07
    327c:	2f 5f       	subi	r18, 0xFF	; 255
    327e:	3f 4f       	sbci	r19, 0xFF	; 255
    3280:	26 83       	std	Z+6, r18	; 0x06
    3282:	37 83       	std	Z+7, r19	; 0x07
    3284:	14 c0       	rjmp	.+40     	; 0x32ae <fputc+0x6e>
    3286:	8b 01       	movw	r16, r22
    3288:	ec 01       	movw	r28, r24
    328a:	fb 01       	movw	r30, r22
    328c:	00 84       	ldd	r0, Z+8	; 0x08
    328e:	f1 85       	ldd	r31, Z+9	; 0x09
    3290:	e0 2d       	mov	r30, r0
    3292:	09 95       	icall
    3294:	89 2b       	or	r24, r25
    3296:	e1 f6       	brne	.-72     	; 0x3250 <fputc+0x10>
    3298:	d8 01       	movw	r26, r16
    329a:	16 96       	adiw	r26, 0x06	; 6
    329c:	8d 91       	ld	r24, X+
    329e:	9c 91       	ld	r25, X
    32a0:	17 97       	sbiw	r26, 0x07	; 7
    32a2:	01 96       	adiw	r24, 0x01	; 1
    32a4:	16 96       	adiw	r26, 0x06	; 6
    32a6:	8d 93       	st	X+, r24
    32a8:	9c 93       	st	X, r25
    32aa:	17 97       	sbiw	r26, 0x07	; 7
    32ac:	ce 01       	movw	r24, r28
    32ae:	df 91       	pop	r29
    32b0:	cf 91       	pop	r28
    32b2:	1f 91       	pop	r17
    32b4:	0f 91       	pop	r16
    32b6:	08 95       	ret

000032b8 <__ultoa_invert>:
    32b8:	fa 01       	movw	r30, r20
    32ba:	aa 27       	eor	r26, r26
    32bc:	28 30       	cpi	r18, 0x08	; 8
    32be:	51 f1       	breq	.+84     	; 0x3314 <__ultoa_invert+0x5c>
    32c0:	20 31       	cpi	r18, 0x10	; 16
    32c2:	81 f1       	breq	.+96     	; 0x3324 <__ultoa_invert+0x6c>
    32c4:	e8 94       	clt
    32c6:	6f 93       	push	r22
    32c8:	6e 7f       	andi	r22, 0xFE	; 254
    32ca:	6e 5f       	subi	r22, 0xFE	; 254
    32cc:	7f 4f       	sbci	r23, 0xFF	; 255
    32ce:	8f 4f       	sbci	r24, 0xFF	; 255
    32d0:	9f 4f       	sbci	r25, 0xFF	; 255
    32d2:	af 4f       	sbci	r26, 0xFF	; 255
    32d4:	b1 e0       	ldi	r27, 0x01	; 1
    32d6:	3e d0       	rcall	.+124    	; 0x3354 <__ultoa_invert+0x9c>
    32d8:	b4 e0       	ldi	r27, 0x04	; 4
    32da:	3c d0       	rcall	.+120    	; 0x3354 <__ultoa_invert+0x9c>
    32dc:	67 0f       	add	r22, r23
    32de:	78 1f       	adc	r23, r24
    32e0:	89 1f       	adc	r24, r25
    32e2:	9a 1f       	adc	r25, r26
    32e4:	a1 1d       	adc	r26, r1
    32e6:	68 0f       	add	r22, r24
    32e8:	79 1f       	adc	r23, r25
    32ea:	8a 1f       	adc	r24, r26
    32ec:	91 1d       	adc	r25, r1
    32ee:	a1 1d       	adc	r26, r1
    32f0:	6a 0f       	add	r22, r26
    32f2:	71 1d       	adc	r23, r1
    32f4:	81 1d       	adc	r24, r1
    32f6:	91 1d       	adc	r25, r1
    32f8:	a1 1d       	adc	r26, r1
    32fa:	20 d0       	rcall	.+64     	; 0x333c <__ultoa_invert+0x84>
    32fc:	09 f4       	brne	.+2      	; 0x3300 <__ultoa_invert+0x48>
    32fe:	68 94       	set
    3300:	3f 91       	pop	r19
    3302:	2a e0       	ldi	r18, 0x0A	; 10
    3304:	26 9f       	mul	r18, r22
    3306:	11 24       	eor	r1, r1
    3308:	30 19       	sub	r19, r0
    330a:	30 5d       	subi	r19, 0xD0	; 208
    330c:	31 93       	st	Z+, r19
    330e:	de f6       	brtc	.-74     	; 0x32c6 <__ultoa_invert+0xe>
    3310:	cf 01       	movw	r24, r30
    3312:	08 95       	ret
    3314:	46 2f       	mov	r20, r22
    3316:	47 70       	andi	r20, 0x07	; 7
    3318:	40 5d       	subi	r20, 0xD0	; 208
    331a:	41 93       	st	Z+, r20
    331c:	b3 e0       	ldi	r27, 0x03	; 3
    331e:	0f d0       	rcall	.+30     	; 0x333e <__ultoa_invert+0x86>
    3320:	c9 f7       	brne	.-14     	; 0x3314 <__ultoa_invert+0x5c>
    3322:	f6 cf       	rjmp	.-20     	; 0x3310 <__ultoa_invert+0x58>
    3324:	46 2f       	mov	r20, r22
    3326:	4f 70       	andi	r20, 0x0F	; 15
    3328:	40 5d       	subi	r20, 0xD0	; 208
    332a:	4a 33       	cpi	r20, 0x3A	; 58
    332c:	18 f0       	brcs	.+6      	; 0x3334 <__ultoa_invert+0x7c>
    332e:	49 5d       	subi	r20, 0xD9	; 217
    3330:	31 fd       	sbrc	r19, 1
    3332:	40 52       	subi	r20, 0x20	; 32
    3334:	41 93       	st	Z+, r20
    3336:	02 d0       	rcall	.+4      	; 0x333c <__ultoa_invert+0x84>
    3338:	a9 f7       	brne	.-22     	; 0x3324 <__ultoa_invert+0x6c>
    333a:	ea cf       	rjmp	.-44     	; 0x3310 <__ultoa_invert+0x58>
    333c:	b4 e0       	ldi	r27, 0x04	; 4
    333e:	a6 95       	lsr	r26
    3340:	97 95       	ror	r25
    3342:	87 95       	ror	r24
    3344:	77 95       	ror	r23
    3346:	67 95       	ror	r22
    3348:	ba 95       	dec	r27
    334a:	c9 f7       	brne	.-14     	; 0x333e <__ultoa_invert+0x86>
    334c:	00 97       	sbiw	r24, 0x00	; 0
    334e:	61 05       	cpc	r22, r1
    3350:	71 05       	cpc	r23, r1
    3352:	08 95       	ret
    3354:	9b 01       	movw	r18, r22
    3356:	ac 01       	movw	r20, r24
    3358:	0a 2e       	mov	r0, r26
    335a:	06 94       	lsr	r0
    335c:	57 95       	ror	r21
    335e:	47 95       	ror	r20
    3360:	37 95       	ror	r19
    3362:	27 95       	ror	r18
    3364:	ba 95       	dec	r27
    3366:	c9 f7       	brne	.-14     	; 0x335a <__ultoa_invert+0xa2>
    3368:	62 0f       	add	r22, r18
    336a:	73 1f       	adc	r23, r19
    336c:	84 1f       	adc	r24, r20
    336e:	95 1f       	adc	r25, r21
    3370:	a0 1d       	adc	r26, r0
    3372:	08 95       	ret

00003374 <__prologue_saves__>:
    3374:	2f 92       	push	r2
    3376:	3f 92       	push	r3
    3378:	4f 92       	push	r4
    337a:	5f 92       	push	r5
    337c:	6f 92       	push	r6
    337e:	7f 92       	push	r7
    3380:	8f 92       	push	r8
    3382:	9f 92       	push	r9
    3384:	af 92       	push	r10
    3386:	bf 92       	push	r11
    3388:	cf 92       	push	r12
    338a:	df 92       	push	r13
    338c:	ef 92       	push	r14
    338e:	ff 92       	push	r15
    3390:	0f 93       	push	r16
    3392:	1f 93       	push	r17
    3394:	cf 93       	push	r28
    3396:	df 93       	push	r29
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
    339c:	ca 1b       	sub	r28, r26
    339e:	db 0b       	sbc	r29, r27
    33a0:	cd bf       	out	0x3d, r28	; 61
    33a2:	de bf       	out	0x3e, r29	; 62
    33a4:	09 94       	ijmp

000033a6 <__epilogue_restores__>:
    33a6:	2a 88       	ldd	r2, Y+18	; 0x12
    33a8:	39 88       	ldd	r3, Y+17	; 0x11
    33aa:	48 88       	ldd	r4, Y+16	; 0x10
    33ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    33ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    33b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    33b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    33b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    33b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    33b8:	b9 84       	ldd	r11, Y+9	; 0x09
    33ba:	c8 84       	ldd	r12, Y+8	; 0x08
    33bc:	df 80       	ldd	r13, Y+7	; 0x07
    33be:	ee 80       	ldd	r14, Y+6	; 0x06
    33c0:	fd 80       	ldd	r15, Y+5	; 0x05
    33c2:	0c 81       	ldd	r16, Y+4	; 0x04
    33c4:	1b 81       	ldd	r17, Y+3	; 0x03
    33c6:	aa 81       	ldd	r26, Y+2	; 0x02
    33c8:	b9 81       	ldd	r27, Y+1	; 0x01
    33ca:	ce 0f       	add	r28, r30
    33cc:	d1 1d       	adc	r29, r1
    33ce:	cd bf       	out	0x3d, r28	; 61
    33d0:	de bf       	out	0x3e, r29	; 62
    33d2:	ed 01       	movw	r28, r26
    33d4:	08 95       	ret

000033d6 <_exit>:
    33d6:	f8 94       	cli

000033d8 <__stop_program>:
    33d8:	ff cf       	rjmp	.-2      	; 0x33d8 <__stop_program>
